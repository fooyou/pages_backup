<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Joshua Liu</title>
 <link href="http://fooyou.github.io/atom.xml" rel="self"/>
 <link href="http://fooyou.github.io/"/>
 <updated>2015-09-09T11:19:22+08:00</updated>
 <id>http://fooyou.github.io</id>
 <author>
   <name>Joshua Liu</name>
 </author>
 
 
 <entry>
   <title>bash 中文文档</title>
   <link href="http://fooyou.github.io/blog/man-bash-chinese"/>
   <updated>2015-09-08T18:55:01+08:00</updated>
   <id>http://fooyou.github.io/blog/man-bash-chinese</id>
   <content type="html">&lt;p&gt;BASH(1)                                                                     BASH(1)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;名称(NAME)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;bash - GNU Bourne-Again SHell（GNU命令解释程序“Bourne”二世）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;概述(SYNOPSIS)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;bash [option] [command_string | file]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;版权(COPYRIGHT)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bash is Copyright (C) 1989-2013 by the Free Software Foundation, Inc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;描述(DESCRIPTION)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bash 是一个与 sh 兼容的命令解释程序，可以执行从标准输入或者文件中读取的命令。 Bash 也整合了 Korn 和 C Shell (ksh 和 csh) 中的优秀特性。&lt;/p&gt;

&lt;p&gt;Bash 的目标是成为遵循 IEEE POSIX Shell and Tools specification (IEEE Working Group 1003.2，可移植操作系统规约： shell 和工具) 的实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;选项(OPTIONS)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;除了在 set 内建命令的文档中讲述的单字符选项 (option) 之外，bash 在启动时还解释下列选项。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-c string:  如果有 -c 选项，那么命令将从 string 中读取。如果 string 后面有参数 (argument)，它们将用于给位置参数 (positional parameter，以 $0 起始) 赋值。&lt;/li&gt;
&lt;li&gt;-i: 如果有-i选项，shell将交互地执行（interactive）.&lt;/li&gt;
&lt;li&gt;-l: 使得bash以类似登录shell(login shell)的方式启动（参见下面的启动(INVOCATION)章节） 。&lt;/li&gt;
&lt;li&gt;-r: 如果有 -r 选项，shell 成为受限的。&lt;/li&gt;
&lt;li&gt;-s: 如果有 -s 选项，或者如果选项处理完以后，没有参数剩余，那么 命令将从标准输入读取。这个选项允许在启动一个交互 shell 时可以设置位置参数。&lt;/li&gt;
&lt;li&gt;-D: 向标准输出打印一个以 $ 为前导的，以双引号引用的字符串列表。这在当前语言环境不是 C 或 POSIX 时，脚本中需要翻译的字符串。这个选项隐含了 -n 选项；不会执行命令。&lt;/li&gt;
&lt;li&gt;[-+]O [shopt_option]

&lt;ul&gt;
&lt;li&gt;shopt_option 是一个 shopt 内建命令可接受的选项 (参见下面的 shell内建命令(SHELL BUILTIN COMMANDS) 章节)。如果有shopt_option，-O 将设置那个选项的取值； +O 取消它。如果没有给出 shopt_option，shopt 将在标准输出上打印设为允许的选项的名称和值。如果启动选项是 +O，输出将以一种可以重用为输入的格式显示。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;--: --标志选项的结束，禁止其余的选项处理。任何 -- 之后的参数将作为文件名和参数对待。参数 - 与此等价。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bash 也解释一些多字节的选项。在命令行中，这些选项必须置于需要被识别的单字符参数之前。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>bash命令基础篇</title>
   <link href="http://fooyou.github.io/blog/bash-commnad-1-base"/>
   <updated>2015-09-08T17:12:40+08:00</updated>
   <id>http://fooyou.github.io/blog/bash-commnad-1-base</id>
   <content type="html">&lt;h2 id=&quot;文档帮助类命令&quot;&gt;文档帮助类命令&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;man&lt;/td&gt;
&lt;td&gt;阅读命令文档&lt;/td&gt;
&lt;td&gt;man bash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apropos&lt;/td&gt;
&lt;td&gt;搜索手册页名称和描述&lt;/td&gt;
&lt;td&gt;apropos ssh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;help&lt;/td&gt;
&lt;td&gt;查看bash内置命令，如jobs，fg&lt;/td&gt;
&lt;td&gt;help bg&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;重定向&quot;&gt;重定向&lt;/h2&gt;

&lt;p&gt;使用&lt;code&gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;&lt;/code&gt;来重定向输出和输入，明白&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;是在文件尾追加而不是重写文件，明白&lt;code&gt;|&lt;/code&gt;可用来重定向管道。&lt;/p&gt;

&lt;h2 id=&quot;文件管理&quot;&gt;文件管理&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ls&lt;/td&gt;
&lt;td&gt;列举当前目录下的内容&lt;/td&gt;
&lt;td&gt;ls -la&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;more&lt;/td&gt;
&lt;td&gt;文件细读过滤器&lt;/td&gt;
&lt;td&gt;more readme.md&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;less&lt;/td&gt;
&lt;td&gt;和more相反的文件阅读器&lt;/td&gt;
&lt;td&gt;less readme.md&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tail&lt;/td&gt;
&lt;td&gt;查看文件的最后部分&lt;/td&gt;
&lt;td&gt;tail readme.md&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ln&lt;/td&gt;
&lt;td&gt;在文件间建立链接&lt;/td&gt;
&lt;td&gt;ln -s target directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chown&lt;/td&gt;
&lt;td&gt;改变文件所有者和组&lt;/td&gt;
&lt;td&gt;chown -hR root:joshua /u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chmod&lt;/td&gt;
&lt;td&gt;改变文件的读写可执行模式&lt;/td&gt;
&lt;td&gt;chmod 777 run.sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;du&lt;/td&gt;
&lt;td&gt;评估文件空间占用&lt;/td&gt;
&lt;td&gt;du 01.mp3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;df&lt;/td&gt;
&lt;td&gt;文件系统磁盘空间使用情况&lt;/td&gt;
&lt;td&gt;df -a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mount&lt;/td&gt;
&lt;td&gt;挂载文件系统&lt;/td&gt;
&lt;td&gt;mount /dev/foo /dir&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fdisk&lt;/td&gt;
&lt;td&gt;操作磁盘分区表&lt;/td&gt;
&lt;td&gt;fdisk -l（root权限）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkfs&lt;/td&gt;
&lt;td&gt;创建linux文件系统（新建磁盘）&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lsblk&lt;/td&gt;
&lt;td&gt;列出块设备&lt;/td&gt;
&lt;td&gt;lsblk&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;网络管理&quot;&gt;网络管理&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ip&lt;/td&gt;
&lt;td&gt;显示/操作路由，设备，隧道等&lt;/td&gt;
&lt;td&gt;ip address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ifconfig&lt;/td&gt;
&lt;td&gt;配置网络接口&lt;/td&gt;
&lt;td&gt;ifconfig -a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dig&lt;/td&gt;
&lt;td&gt;DNS 查找工具&lt;/td&gt;
&lt;td&gt;dig @server name type&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;bash快捷键&quot;&gt;Bash快捷键&lt;/h2&gt;

&lt;p&gt;可使用&lt;code&gt;man readline&lt;/code&gt;查看Bash所有快捷键，以下列出我常用的快捷键&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ctrl-w&lt;/td&gt;
&lt;td&gt;删除键入的最后一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl-u&lt;/td&gt;
&lt;td&gt;删除键入整行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alt-b&lt;/td&gt;
&lt;td&gt;按单词向前移动光标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alt-f&lt;/td&gt;
&lt;td&gt;按单词向后移动光标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl-k&lt;/td&gt;
&lt;td&gt;从光标出删除到行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl-l&lt;/td&gt;
&lt;td&gt;伪清屏&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;常用功能及命令&quot;&gt;常用功能及命令&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cd -&lt;/td&gt;
&lt;td&gt;回到上一个工作路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find . -name &amp;#39;*.py&amp;#39;&lt;/td&gt;
&lt;td&gt;xargs grep graphviz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pstree -p&lt;/td&gt;
&lt;td&gt;展示进程树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netstat -lntp / ss -plat&lt;/td&gt;
&lt;td&gt;检查哪些进程在监听端口（默认检查TCP端口，-u检查UDP端口）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uptime / w&lt;/td&gt;
&lt;td&gt;查看系统已经运行的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;td&gt;查看文件行数，词数，字节数，etc&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>linux下抓取屏幕至动态gif图像中</title>
   <link href="http://fooyou.github.io/blog/linux-screen-2-gif"/>
   <updated>2015-09-08T00:42:27+08:00</updated>
   <id>http://fooyou.github.io/blog/linux-screen-2-gif</id>
   <content type="html">&lt;h3 id=&quot;以下是实际效果：&quot;&gt;以下是实际效果：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fooyou/fooyou.github.io/master/img/posts/2015-09-07_17%3A34%3A51.gif&quot; alt=&quot;sample&quot;&gt;&lt;/p&gt;

&lt;p&gt;操作步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;启动脚本 ./screen2gif&lt;/li&gt;
&lt;li&gt;选中要录制的屏幕区域&lt;/li&gt;
&lt;li&gt;返回脚本，按q退出录制&lt;/li&gt;
&lt;li&gt;等待一会儿，gif生成完毕。&lt;/li&gt;
&lt;li&gt;OK，到Home/Pictures下查看吧！&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;怎么实现：&quot;&gt;怎么实现：&lt;/h2&gt;

&lt;h3 id=&quot;屏幕抓取&quot;&gt;屏幕抓取&lt;/h3&gt;

&lt;p&gt;FFcast可以使用户选择屏幕一块区域并使用第三方工具比如ffmpeg进行屏幕录像。&lt;/p&gt;

&lt;p&gt;ffcast是Arch linux社区的一些黑客的荣耀作品，可以在github上找到&lt;a href=&quot;https://github.com/lolilolicon/FFcast2&quot;&gt;ffcast&lt;/a&gt;，它只依赖于&lt;code&gt;bash&lt;/code&gt;和&lt;code&gt;ffmpeg&lt;/code&gt;，并使用&lt;a href=&quot;https://github.com/lolilolicon/xrectsel&quot;&gt;xrectsel&lt;/a&gt;进行矩形选择。&lt;/p&gt;

&lt;p&gt;还可以对ffmpeg命令进行扩展。我使用&lt;code&gt;-r 15&lt;/code&gt;来进行每秒种捕获15帧，&lt;code&gt;-codec:v huffyuv&lt;/code&gt;进行无损录制。&lt;/p&gt;

&lt;h3 id=&quot;gif化&quot;&gt;Gif化&lt;/h3&gt;

&lt;p&gt;Imagemagick可以读取&lt;code&gt;.avi&lt;/code&gt;视频并有一些gif优化的小把戏能减少gif文件的大小同时还能保持好的画面质量。&lt;code&gt;convert&lt;/code&gt;命令的&lt;code&gt;-layers Optimize&lt;/code&gt;参数可启动Gif优化，我使用的最后的convert命令如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;convert -set delay 1x40 -layers Optimize &lt;span class=&quot;nv&quot;&gt;$TMP_AVI&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/Pictures/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date +%Y-%m-%d_%H:%M:%S&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 -delay 1x40 ：指每秒40帧&lt;/p&gt;

&lt;h3 id=&quot;最后的脚本代码&quot;&gt;最后的脚本代码&lt;/h3&gt;

&lt;p&gt;将以下代码另存为：screen2gif，并添加可执行权限，即可使用了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;TMP_AVI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;mktemp /tmp/outXXXXXXXXXX.avi&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
ffcast -s % ffmpeg -y -f x11grab -show_region &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -framerate &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -video_size %s -i %D+%c -codec:v huffyuv                  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -vf &lt;span class=&quot;nv&quot;&gt;crop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;iw-mod(iw\\,2):ih-mod(ih\\,2)&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TMP_AVI&lt;/span&gt;         &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; convert -set delay 1x40 -layers Optimize &lt;span class=&quot;nv&quot;&gt;$TMP_AVI&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/Pictures/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date +%Y-%m-%d_%H:%M:%S&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;.gif  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nv&quot;&gt;$TMP_AVI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;注：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ffmpeg和ffcast的安装略。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://unix.stackexchange.com/questions/113695/gif-screencasting-the-unix-way&quot;&gt;http://unix.stackexchange.com/questions/113695/gif-screencasting-the-unix-way&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>命令行的艺术</title>
   <link href="http://fooyou.github.io/blog/the-art-of-commandline"/>
   <updated>2015-09-07T18:42:27+08:00</updated>
   <id>http://fooyou.github.io/blog/the-art-of-commandline</id>
   <content type="html">&lt;h1 id=&quot;命令行的艺术&quot;&gt;命令行的艺术&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://gitter.im/jlevy/the-art-of-command-line?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg&quot; alt=&quot;Join the chat at https://gitter.im/jlevy/the-art-of-command-line&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BF%85%E8%AF%BB&quot;&gt;必读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9F%BA%E7%A1%80&quot;&gt;基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8&quot;&gt;日常使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%96%87%E4%BB%B6%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86&quot;&gt;文件及数据处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95&quot;&gt;系统调试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81&quot;&gt;一行代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%86%B7%E9%97%A8%E4%BD%86%E6%9C%89%E7%94%A8&quot;&gt;冷门但有用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BB%85%E9%99%90-macos-x-%E7%B3%BB%E7%BB%9F&quot;&gt;仅限 MacOS X 系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%9B%B4%E5%A4%9A%E8%B5%84%E6%BA%90&quot;&gt;更多资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%8D%E8%B4%A3%E5%A3%B0%E6%98%8E&quot;&gt;免责声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%8E%88%E6%9D%83%E6%9D%A1%E6%AC%BE&quot;&gt;授权条款&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;cowsay.png&quot; alt=&quot;curl -s &amp;#39;https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md&amp;#39; | egrep -o &amp;#39;`\w+`&amp;#39; | tr -d &amp;#39;`&amp;#39; | cowsay -W50&quot;&gt;&lt;/p&gt;

&lt;p&gt;熟练使用命令行是一种常常被忽视或被认为难以掌握的技能，但实际上，它可以提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时发现的一些关于命令行的使用的小技巧的摘要。有些小技巧是非常基础的，而另外一些则是相当复杂的甚至晦涩难懂的。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。&lt;/p&gt;

&lt;p&gt;这里的大部分内容
&lt;a href=&quot;http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands&quot;&gt;首次&lt;/a&gt;
&lt;a href=&quot;http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix&quot;&gt;出现&lt;/a&gt;
于 &lt;a href=&quot;http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know&quot;&gt;Quora&lt;/a&gt;，但考虑到这里的人们都具有学习的天赋且乐于接受别人的建议，使用 Github 来做这件事是更佳的选择。如果你在本文中发现了错误或者存在可以改善的地方，请果断提交 Issue 或 Pull Request！(当然在提交前请看一下必读节和已有的 PR/issue）。&lt;/p&gt;

&lt;h2 id=&quot;必读&quot;&gt;必读&lt;/h2&gt;

&lt;p&gt;涵盖范围：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这篇文章对刚接触命令行的新手以及具有命令行使用经验的人都有用处。本文致力于做到覆盖面广（尽量包括一切重要的内容），具体（给出最常见的具体的例子）以及简洁（避免一些不必要的东西以及一些偏题的可以在其他地方翻阅到文献的东西）。 每个小技巧在某个特定情境下都是基本的或能够显著地节约时间。&lt;/li&gt;
&lt;li&gt;本文为 Linux 所写，除了&lt;a href=&quot;#%E4%BB%85%E9%99%90-macos-x-%E7%B3%BB%E7%BB%9F&quot;&gt;仅限 MacOS X 系统&lt;/a&gt;节。其它节中的大部分内容都适用于其它 Unix 系统或 MacOS 系统，甚至 Cygwin。&lt;/li&gt;
&lt;li&gt;本文关注于交互式 Bash，尽管很多技巧适用于其他 shell 或 Bash 脚本。&lt;/li&gt;
&lt;li&gt;本文包括了“标准的”Unix 命令和需要安装特定包的命令，只要它们足够重要。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意事项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;为了能在一页内展示尽量多的东西，一些具体的信息会被间接的包含在引用页里。聪明机智的你如果掌握了使用 Google 搜索引擎的基本思路与命令，那么你将可以查阅到更多的详细信息。使用 &lt;code&gt;apt-get&lt;/code&gt;／&lt;code&gt;yum&lt;/code&gt;／&lt;code&gt;dnf&lt;/code&gt;／&lt;code&gt;pacman&lt;/code&gt;／&lt;code&gt;pip&lt;/code&gt;／&lt;code&gt;brew&lt;/code&gt;（以及其它合适的包管理器）来安装新程序。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&quot;http://explainshell.com/&quot;&gt;Explainshell&lt;/a&gt; 去获取相关命令、参数、管道等内容的解释。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基础&quot;&gt;基础&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;学习 Bash 的基础知识。具体来说，输入 &lt;code&gt;man bash&lt;/code&gt; 并至少全文浏览一遍; 它很简单并且不长。其他的 shell 可能很好用，但 Bash 功能强大且几乎所有情况下都是可用的 （ &lt;em&gt;只&lt;/em&gt;学习 zsh，fish 或其他的 shell 的话，在你自己的电脑上会显得很方便，但在很多情况下会限制你，比如当你需要在服务器上工作时）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习并掌握至少一个基于文本的编辑器。通常 Vim （&lt;code&gt;vi&lt;/code&gt;） 会是你最好的选择。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会如何使用 &lt;code&gt;man&lt;/code&gt; 命令去阅读文档。学会使用 &lt;code&gt;apropos&lt;/code&gt; 去查找文档。了解有些命令并不对应可执行文件，而是Bash内置的，可以使用 &lt;code&gt;help&lt;/code&gt; 和 &lt;code&gt;help -d&lt;/code&gt; 命令获取帮助信息。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使用 &lt;code&gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&lt;/code&gt; 来重定向输出和输入，学会使用 &lt;code&gt;|&lt;/code&gt; 来重定向管道。明白 &lt;code&gt;&amp;gt;&lt;/code&gt; 会覆盖了输出文件而 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 是在文件未添加。了解标准输出 stdout 和标准错误 stderr。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使用通配符 &lt;code&gt;*&lt;/code&gt; （或许再算上 &lt;code&gt;?&lt;/code&gt; 和 &lt;code&gt;{&lt;/code&gt;...&lt;code&gt;}&lt;/code&gt;） 和引用以及引用中 &lt;code&gt;&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;&lt;/code&gt; 的区别。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;熟悉 Bash 任务管理工具：&lt;code&gt;&amp;amp;&lt;/code&gt;，&lt;strong&gt;ctrl-z&lt;/strong&gt;，&lt;strong&gt;ctrl-c&lt;/strong&gt;，&lt;code&gt;jobs&lt;/code&gt;，&lt;code&gt;fg&lt;/code&gt;，&lt;code&gt;bg&lt;/code&gt;，&lt;code&gt;kill&lt;/code&gt; 等。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 &lt;code&gt;ssh&lt;/code&gt;，以及基本的无密码认证，&lt;code&gt;ssh-agent&lt;/code&gt;，&lt;code&gt;ssh-add&lt;/code&gt; 等。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会基本的文件管理：&lt;code&gt;ls&lt;/code&gt; 和 &lt;code&gt;ls -l&lt;/code&gt; （了解 &lt;code&gt;ls -l&lt;/code&gt; 中每一列代表的意义），&lt;code&gt;less&lt;/code&gt;，&lt;code&gt;head&lt;/code&gt;，&lt;code&gt;tail&lt;/code&gt; 和 &lt;code&gt;tail -f&lt;/code&gt; （甚至 &lt;code&gt;less +F&lt;/code&gt;），&lt;code&gt;ln&lt;/code&gt; 和 &lt;code&gt;ln -s&lt;/code&gt; （了解硬链接与软链接的区别），&lt;code&gt;chown&lt;/code&gt;，&lt;code&gt;chmod&lt;/code&gt;，&lt;code&gt;du&lt;/code&gt; （硬盘使用情况概述：&lt;code&gt;du -hk *&lt;/code&gt;）。 关于文件系统的管理，学习 &lt;code&gt;df&lt;/code&gt;，&lt;code&gt;mount&lt;/code&gt;，&lt;code&gt;fdisk&lt;/code&gt;，&lt;code&gt;mkfs&lt;/code&gt;，&lt;code&gt;lsblk&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习基本的网络管理：&lt;code&gt;ip&lt;/code&gt; 或 &lt;code&gt;ifconfig&lt;/code&gt;，&lt;code&gt;dig&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;熟悉正则表达式，以及 &lt;code&gt;grep&lt;/code&gt;／&lt;code&gt;egrep&lt;/code&gt; 里不同参数的作用，例如 &lt;code&gt;-i&lt;/code&gt;，&lt;code&gt;-o&lt;/code&gt;，&lt;code&gt;-v&lt;/code&gt;，&lt;code&gt;-A&lt;/code&gt;，&lt;code&gt;-B&lt;/code&gt; 和 &lt;code&gt;-C&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使用 &lt;code&gt;apt-get&lt;/code&gt;，&lt;code&gt;yum&lt;/code&gt;，&lt;code&gt;dnf&lt;/code&gt; 或 &lt;code&gt;pacman&lt;/code&gt; （取决于你使用的 Linux 发行版）来查找或安装包。确保你的环境中有 &lt;code&gt;pip&lt;/code&gt; 来安装基于 Python 的命令行工具 （部分程序使用 &lt;code&gt;pip&lt;/code&gt; 来安装会很简单）。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;日常使用&quot;&gt;日常使用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Bash 中，可以使用 &lt;strong&gt;Tab&lt;/strong&gt; 自动补全参数，使用 &lt;strong&gt;ctrl-r&lt;/strong&gt; 搜索命令行历史。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 中，使用 &lt;strong&gt;ctrl-w&lt;/strong&gt; 删除你键入的最后一个单词，使用 &lt;strong&gt;ctrl-u&lt;/strong&gt; 删除整行，使用 &lt;strong&gt;alt-b&lt;/strong&gt; 和 &lt;strong&gt;alt-f&lt;/strong&gt; 按单词移动，使用 &lt;strong&gt;ctrl-k&lt;/strong&gt; 从光标处删除到行尾，使用 &lt;strong&gt;ctrl-l&lt;/strong&gt; 清屏。键入 &lt;code&gt;man readline&lt;/code&gt; 查看 Bash 中的默认快捷键，内容很多。例如 &lt;strong&gt;alt-.&lt;/strong&gt; 循环地移向前一个参数，以及 &lt;strong&gt;alt-&lt;/strong&gt;* 展开通配符。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你喜欢的话，可以键入 &lt;code&gt;set -o vi&lt;/code&gt; 来使用 vi 风格的快捷键。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;键入 &lt;code&gt;history&lt;/code&gt; 查看命令行历史记录。其中有许多缩写，例如 &lt;code&gt;!$&lt;/code&gt;（最后键入的参数）和 &lt;code&gt;!!&lt;/code&gt;（最后键入的命令），尽管通常被 &lt;strong&gt;ctrl-r&lt;/strong&gt; 和 &lt;strong&gt;alt-.&lt;/strong&gt; 取代。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回到上一个工作路径：&lt;code&gt;cd -&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你输入命令的时候改变了主意，按下 &lt;strong&gt;alt-#&lt;/strong&gt; 在行首添加 &lt;code&gt;#&lt;/code&gt;（将你输入的命令视为注释），并回车。这样做的话，之后你可以很方便的利用命令行历史回到你刚才输入到一半的命令。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;xargs&lt;/code&gt; （ 或 &lt;code&gt;parallel&lt;/code&gt;）。他们非常给力。注意到你可以控制每行参数个数（&lt;code&gt;-L&lt;/code&gt;）和最大并行数（&lt;code&gt;-P&lt;/code&gt;）。如果你不确定它们是否会按你想的那样工作，先使用 &lt;code&gt;xargs echo&lt;/code&gt; 查看一下。此外，使用 &lt;code&gt;-I{}&lt;/code&gt; 会很方便。例如：
&lt;code&gt;bash
  find . -name &amp;#39;*.py&amp;#39; | xargs grep some_function
  cat hosts | xargs -I{} ssh root@{} hostname
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pstree -p&lt;/code&gt; 有助于展示进程树。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;pgrep&lt;/code&gt; 和 &lt;code&gt;pkill&lt;/code&gt; 根据名字查找进程或发送信号。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解你可以发往进程的信号的种类。比如，使用 &lt;code&gt;kill -STOP [pid]&lt;/code&gt; 停止一个进程。使用 &lt;code&gt;man 7 signal&lt;/code&gt; 查看详细列表。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;nohup&lt;/code&gt; 或 &lt;code&gt;disown&lt;/code&gt; 使一个后台进程持续运行。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;netstat -lntp&lt;/code&gt; 或 &lt;code&gt;ss -plat&lt;/code&gt; 检查哪些进程在监听端口（默认是检查 TCP 端口; 使用参数 &lt;code&gt;-u&lt;/code&gt; 检查 UDP 端口）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有关打开套接字和文件，请参阅 &lt;code&gt;lsof&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;uptime&lt;/code&gt; 或 &lt;code&gt;w&lt;/code&gt; 来查看系统已经运行多长时间。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;alias&lt;/code&gt;来创建常用命令的快捷形式。例如：&lt;code&gt;alias ll=&amp;#39;ls -latr&amp;#39;&lt;/code&gt;使你可以方便地执行&lt;code&gt;ls -latr&lt;/code&gt;命令。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 脚本中，使用 &lt;code&gt;set -x&lt;/code&gt; 去调试输出，尽可能的使用严格模式，使用 &lt;code&gt;set -e&lt;/code&gt; 令脚本在发生错误时退出而不是继续运行，使用 &lt;code&gt;set -o pipefail&lt;/code&gt; 严谨地对待错误（尽管问题可能很微妙）。当牵扯到很多脚本时，使用 &lt;code&gt;trap&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 脚本中，子 shell（使用括号&lt;code&gt;(...)&lt;/code&gt;）是一种便捷的方式去组织参数。一个常见的例子是临时地移动工作路径，代码如下：
&lt;code&gt;bash
  # do something in current dir
  (cd /some/other/dir &amp;amp;&amp;amp; other-command)
  # continue in original dir
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 中，注意到其中有许多形式的扩展。检查变量是否存在：&lt;code&gt;${name:?error message}&lt;/code&gt;。例如，当 Bash 脚本需要一个参数时，可以使用这样的代码 &lt;code&gt;input_file=${1:?usage: $0 input_file}&lt;/code&gt;。数学表达式：&lt;code&gt;i=$(( (i + 1) % 5 ))&lt;/code&gt;。序列：&lt;code&gt;{1..10}&lt;/code&gt;。 截断字符串：&lt;code&gt;${var%suffix}&lt;/code&gt; 和 &lt;code&gt;${var#prefix}&lt;/code&gt;。例如，假设 &lt;code&gt;var=foo.pdf&lt;/code&gt;，那么 &lt;code&gt;echo ${var%.pdf}.txt&lt;/code&gt; 将输出 &lt;code&gt;foo.txt&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过使用 &lt;code&gt;&amp;lt;(some command)&lt;/code&gt; 可以将输出视为文件。例如，对比本地文件 &lt;code&gt;/etc/hosts&lt;/code&gt; 和一个远程文件：
&lt;code&gt;sh
  diff /etc/hosts &amp;lt;(ssh somehost cat /etc/hosts)
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 Bash 中的“here documents”，例如 &lt;code&gt;cat &amp;lt;&amp;lt;EOF ...&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 中，同时重定向标准输出和标准错误，&lt;code&gt;some-command &amp;gt;logfile 2&amp;gt;&amp;amp;1&lt;/code&gt;。通常，为了保证命令不会在标准输入里残留一个打开了的文件句柄导致你当前所在的终端无法操作，添加 &lt;code&gt;&amp;lt;/dev/null&lt;/code&gt; 是一个好习惯。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;man ascii&lt;/code&gt; 查看具有十六进制和十进制值的ASCII表。&lt;code&gt;man unicode&lt;/code&gt;，&lt;code&gt;man utf-8&lt;/code&gt;，以及 &lt;code&gt;man latin1&lt;/code&gt; 有助于你去了解通用的编码信息。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;screen&lt;/code&gt; 或 &lt;a href=&quot;https://tmux.github.io/&quot;&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/a&gt; 来使用多个屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。另一个轻量级的解决方案是 &lt;code&gt;dtach&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ssh 中，了解如何使用 &lt;code&gt;-L&lt;/code&gt; 或 &lt;code&gt;-D&lt;/code&gt;（偶尔需要用 &lt;code&gt;-R&lt;/code&gt;）去开启隧道是非常有用的，例如当你需要从一台远程服务器上访问 web。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对 ssh 设置做一些小优化可能是很有用的，例如这个 &lt;code&gt;~/.ssh/config&lt;/code&gt; 文件包含了防止特定环境下断开连接、压缩数据、多通道等选项：
&lt;code&gt;
  TCPKeepAlive=yes
  ServerAliveInterval=15
  ServerAliveCountMax=6
  Compression=yes
  ControlMaster auto
  ControlPath /tmp/%r@%h:%p
  ControlPersist yes
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部分其他的关于 ssh 的选项是安全敏感且应当小心启用的。例如在可信任的网络中：&lt;code&gt;StrictHostKeyChecking=no&lt;/code&gt;，&lt;code&gt;ForwardAgent=yes&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取文件的八进制格式权限，使用类似如下的代码：
&lt;code&gt;sh
  stat -c &amp;#39;%A %a %n&amp;#39; /etc/timezone
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/mooz/percol&quot;&gt;&lt;code&gt;percol&lt;/code&gt;&lt;/a&gt; 或者 &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; 可以交互式地从另一个命令输出中选取值。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;fpp&lt;/code&gt;（&lt;a href=&quot;https://github.com/facebook/PathPicker&quot;&gt;PathPicker&lt;/a&gt;）可以与基于另一个命令(例如 &lt;code&gt;git&lt;/code&gt;）输出的文件交互。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：
&lt;code&gt;python -m SimpleHTTPServer 7777&lt;/code&gt; （使用端口 7777 和 Python 2）或&lt;code&gt;python -m http.server 7777&lt;/code&gt; （使用端口 7777 和 Python 3）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以某种权限执行命令，使用&lt;code&gt;sudo&lt;/code&gt;（root 权限）或&lt;code&gt;sudo -u&lt;/code&gt;（其他用户）。使用&lt;code&gt;su&lt;/code&gt;或者&lt;code&gt;sudo bash&lt;/code&gt;来启动一个以对应用户权限运行的 shell。使用&lt;code&gt;su -&lt;/code&gt;模拟其他用户的登录。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;文件及数据处理&quot;&gt;文件及数据处理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在当前路径下通过文件名定位一个文件，&lt;code&gt;find . -iname &amp;#39;*something*&amp;#39;&lt;/code&gt;（或类似的）。在所有路径下通过文件名查找文件，使用 &lt;code&gt;locate something&lt;/code&gt; （但请记住 &lt;code&gt;updatedb&lt;/code&gt; 可能没有对最近新建的文件建立索引）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;&lt;code&gt;ag&lt;/code&gt;&lt;/a&gt; 在源代码或数据文件里检索（比 &lt;code&gt;grep -r&lt;/code&gt; 更好）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将HTML转为文本：&lt;code&gt;lynx -dump -stdin&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Markdown，HTML，以及所有文档格式之间的转换，试试 &lt;a href=&quot;http://pandoc.org/&quot;&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你不得不处理 XML，&lt;code&gt;xmlstarlet&lt;/code&gt; 宝刀未老。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;http://stedolan.github.io/jq/&quot;&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/a&gt; 处理 JSON。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Excel 或 CSV 文件的处理，&lt;a href=&quot;https://github.com/onyxfish/csvkit&quot;&gt;csvkit&lt;/a&gt; 提供了 &lt;code&gt;in2csv&lt;/code&gt;，&lt;code&gt;csvcut&lt;/code&gt;，&lt;code&gt;csvjoin&lt;/code&gt;，&lt;code&gt;csvgrep&lt;/code&gt; 等工具。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于 Amazon S3，&lt;a href=&quot;https://github.com/s3tools/s3cmd&quot;&gt;&lt;code&gt;s3cmd&lt;/code&gt;&lt;/a&gt; 很方便而 &lt;a href=&quot;https://github.com/bloomreach/s4cmd&quot;&gt;&lt;code&gt;s4cmd&lt;/code&gt;&lt;/a&gt; 更快。Amazon 官方的 &lt;a href=&quot;https://github.com/aws/aws-cli&quot;&gt;&lt;code&gt;aws&lt;/code&gt;&lt;/a&gt; 是其他 AWS 相关工作的基础。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何使用 &lt;code&gt;sort&lt;/code&gt; 和 &lt;code&gt;uniq&lt;/code&gt;，包括 uniq 的 &lt;code&gt;-u&lt;/code&gt; 参数和 &lt;code&gt;-d&lt;/code&gt; 参数，详见后文一行代码节。另外可以了解一下 &lt;code&gt;comm&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何使用 &lt;code&gt;cut&lt;/code&gt;，&lt;code&gt;paste&lt;/code&gt; 和 &lt;code&gt;join&lt;/code&gt; 来更改文件。很多人都会使用 &lt;code&gt;cut&lt;/code&gt;，但几乎都不会使用 &lt;code&gt;join&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何运用 &lt;code&gt;wc&lt;/code&gt; 去计算新行数（&lt;code&gt;-l&lt;/code&gt;），字符数（&lt;code&gt;-m&lt;/code&gt;），单词数（&lt;code&gt;-w&lt;/code&gt;）以及字节数（&lt;code&gt;-c&lt;/code&gt;）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何使用 &lt;code&gt;tee&lt;/code&gt; 将标准输入复制到文件甚至标准输出，例如 &lt;code&gt;ls -al | tee file.txt&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解语言环境对许多命令行工具的微妙影响，包括排序的顺序和性能。大多数 Linux 的安装过程会将 &lt;code&gt;LANG&lt;/code&gt; 或其他有关的变量设置为符合本地的设置。意识到当你改变语言环境时，排序的结果可能会改变。明白国际化可能会时 sort 或其他命令运行效率下降&lt;em&gt;许多倍&lt;/em&gt;。某些情况下（例如集合运算）你可以放心的使用 &lt;code&gt;export LC_ALL=C&lt;/code&gt; 来忽略掉国际化并使用基于字节的顺序。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 &lt;code&gt;awk&lt;/code&gt; 和 &lt;code&gt;sed&lt;/code&gt; 关于数据的简单处理的用法。例如，将文本文件中第三列的所有数字求和：&lt;code&gt;awk &amp;#39;{ x += $3 } END { print x }&amp;#39;&lt;/code&gt;. 这可能比同等作用的 Python 代码块三倍且代码量少三倍。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;替换一个或多个文件中出现的字符串：
&lt;code&gt;sh
  perl -pi.bak -e &amp;#39;s/old-string/new-string/g&amp;#39; my-files-*.txt
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依据某种模式批量重命名多个文件，使用 &lt;code&gt;rename&lt;/code&gt;。对于复杂的重命名规则，&lt;a href=&quot;https://github.com/jlevy/repren&quot;&gt;&lt;code&gt;repren&lt;/code&gt;&lt;/a&gt; 或许有帮助。
&lt;code&gt;sh
  # Recover backup files foo.bak -&amp;gt; foo:
  rename &amp;#39;s/\.bak$//&amp;#39; *.bak
  # Full rename of filenames，directories，and contents foo -&amp;gt; bar:
  repren --full --preserve-case --from foo --to bar .
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;shuf&lt;/code&gt; 从一个文件中随机选取行。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 &lt;code&gt;sort&lt;/code&gt; 的参数。处理数字方面，使用 &lt;code&gt;-n&lt;/code&gt; 或者 &lt;code&gt;-h&lt;/code&gt; 来处理可读性数字（例如 &lt;code&gt;du -h&lt;/code&gt; 的输出）。明白键的工作原理（&lt;code&gt;-t&lt;/code&gt; 和 &lt;code&gt;-k&lt;/code&gt;）。例如，注意到你需要 &lt;code&gt;-k1，1&lt;/code&gt; 来仅按第一个域来排序，而 &lt;code&gt;-k1&lt;/code&gt; 意味着按整行排序。稳定排序（&lt;code&gt;sort -s&lt;/code&gt;）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 &lt;code&gt;sort -k1，1 | sort -s -k2，2&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你想在 Bash 命令行中写 tab 制表符，按下 &lt;strong&gt;ctrl-v&lt;/strong&gt; &lt;strong&gt;[Tab]&lt;/strong&gt; 或键入 &lt;code&gt;$&amp;#39;\t&amp;#39;&lt;/code&gt; （后者可能更好，因为你可以复制粘贴它）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;标准的源代码对比及合并工具是 &lt;code&gt;diff&lt;/code&gt; 和 &lt;code&gt;patch&lt;/code&gt;。使用 &lt;code&gt;diffstat&lt;/code&gt; 查看变更总览数据。注意到 &lt;code&gt;diff -r&lt;/code&gt; 对整个文件夹有效。使用 &lt;code&gt;diff -r tree1 tree2 | diffstat&lt;/code&gt; 查看变更总览数据。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于二进制文件，使用 &lt;code&gt;hd&lt;/code&gt; 使其以十六进制显示以及使用 &lt;code&gt;bvi&lt;/code&gt; 来编辑二进制。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同样对于二进制文件，使用 &lt;code&gt;strings&lt;/code&gt;（包括 &lt;code&gt;grep&lt;/code&gt; 等等）允许你查找一些文本。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二进制文件对比（Delta 压缩），使用 &lt;code&gt;xdelta3&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;iconv&lt;/code&gt; 更改文本编码。而更高级的用法，可以使用 &lt;code&gt;uconv&lt;/code&gt;，它支持一些高级的 Unicode 功能。例如，这条命令将所有元音字母转为小写并移除了：
&lt;code&gt;sh
  uconv -f utf-8 -t utf-8 -x &amp;#39;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &amp;gt;; ::Any-NFC; &amp;#39; &amp;lt; input.txt &amp;gt; output.txt
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拆分文件，查看 &lt;code&gt;split&lt;/code&gt;（按大小拆分）和 &lt;code&gt;csplit&lt;/code&gt;（按模式拆分）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;zless&lt;/code&gt;，&lt;code&gt;zmore&lt;/code&gt;，&lt;code&gt;zcat&lt;/code&gt; 和 &lt;code&gt;zgrep&lt;/code&gt;对压缩过的文件进行操作。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;系统调试&quot;&gt;系统调试&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;curl&lt;/code&gt; 和 &lt;code&gt;curl -I&lt;/code&gt; 可以便捷地被应用于 web 调试中，它们的好兄弟 &lt;code&gt;wget&lt;/code&gt; 也可以，或者是更潮的 &lt;a href=&quot;https://github.com/jakubroztocil/httpie&quot;&gt;&lt;code&gt;httpie&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;iostat&lt;/code&gt;、&lt;code&gt;netstat&lt;/code&gt;、&lt;code&gt;top&lt;/code&gt; （&lt;code&gt;htop&lt;/code&gt; 更佳）和 &lt;code&gt;dstat&lt;/code&gt; 去获取硬盘、cpu 和网络的状态。熟练掌握这些工具可以使你快速的对系统的当前状态有一个大概的认识。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若要对系统有一个深度的总体认识，使用 &lt;a href=&quot;https://github.com/nicolargo/glances&quot;&gt;&lt;code&gt;glances&lt;/code&gt;&lt;/a&gt;。它在一个终端窗口中向你提供一些系统级的数据。这对于快速的检查各个子系统非常有帮助。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若要了解内存状态，运行并理解 &lt;code&gt;free&lt;/code&gt; 和 &lt;code&gt;vmstat&lt;/code&gt; 的输出。尤其注意“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，因此它与空闲内存无关。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的小技巧是你可以运行 &lt;code&gt;kill -3 &amp;lt;pid&amp;gt;&lt;/code&gt; 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准输出/日志文件。JDK 中的 &lt;code&gt;jps&lt;/code&gt;，&lt;code&gt;jstat&lt;/code&gt;，&lt;code&gt;jstack&lt;/code&gt;，&lt;code&gt;jmap&lt;/code&gt; 很有用。&lt;a href=&quot;https://github.com/aragozin/jvm-tools&quot;&gt;SJK tools&lt;/a&gt; 更高级.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;mtr&lt;/code&gt; 去跟踪路由，用于确定网络问题。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;ncdu&lt;/code&gt; 来查看磁盘使用情况，它比常用的命令，如 &lt;code&gt;du -sh *&lt;/code&gt;，更节省时间。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查找正在使用带宽的套接字连接或进程，使用 &lt;code&gt;iftop&lt;/code&gt; 或 &lt;code&gt;nethogs&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ab&lt;/code&gt; 工具（捆绑于 Apache）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 &lt;code&gt;siege&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;wireshark&lt;/code&gt;，&lt;code&gt;tshark&lt;/code&gt; 和 &lt;code&gt;ngrep&lt;/code&gt; 可用于复杂的网络调试。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 &lt;code&gt;strace&lt;/code&gt; 和 &lt;code&gt;ltrace&lt;/code&gt;。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（&lt;code&gt;-c&lt;/code&gt;）和附加到一个运行的进程参数 （&lt;code&gt;-p&lt;/code&gt;）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解使用 &lt;code&gt;ldd&lt;/code&gt; 来检查共享库。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何运用 &lt;code&gt;gdb&lt;/code&gt; 连接到一个运行着的进程并获取它的堆栈轨迹。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使用 &lt;code&gt;/proc&lt;/code&gt;。它在调试正在出现的问题的时候有时会效果惊人。比如：&lt;code&gt;/proc/cpuinfo&lt;/code&gt;，&lt;code&gt;/proc/meminfo&lt;/code&gt;，&lt;code&gt;/proc/cmdline&lt;/code&gt;，&lt;code&gt;/proc/xxx/cwd&lt;/code&gt;，&lt;code&gt;/proc/xxx/exe&lt;/code&gt;，&lt;code&gt;/proc/xxx/fd/&lt;/code&gt;，&lt;code&gt;/proc/xxx/smaps&lt;/code&gt;（这里的 &lt;code&gt;xxx&lt;/code&gt; 表示进程的 id 或 pid）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当调试一些之前出现的问题的时候，&lt;code&gt;sar&lt;/code&gt; 非常有用。它展示了 cpu、内存以及网络等的历史数据。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于更深层次的系统分析以及性能分析，看看 &lt;code&gt;stap&lt;/code&gt;（&lt;a href=&quot;https://sourceware.org/systemtap/wiki&quot;&gt;SystemTap&lt;/a&gt;），&lt;a href=&quot;http://en.wikipedia.org/wiki/Perf_(Linux)&quot;&gt;&lt;code&gt;perf&lt;/code&gt;&lt;/a&gt;，以及&lt;a href=&quot;https://github.com/draios/sysdig&quot;&gt;&lt;code&gt;sysdig&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看你当前使用的系统，使用 &lt;code&gt;uname&lt;/code&gt; 或者 &lt;code&gt;uname -a&lt;/code&gt; （Unix／kernel 信息） or &lt;code&gt;lsb_release -a&lt;/code&gt; （Linux 发行版信息）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无论什么东西工作得很欢乐时试试 &lt;code&gt;dmesg&lt;/code&gt;（可能是硬件或驱动问题）。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;一行代码&quot;&gt;一行代码&lt;/h2&gt;

&lt;p&gt;一些命令组合的例子：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当你需要对文本文件做集合交、并、差运算时，结合使用 &lt;code&gt;sort&lt;/code&gt;/&lt;code&gt;uniq&lt;/code&gt; 很有帮助。假设 &lt;code&gt;a&lt;/code&gt; 与 &lt;code&gt;b&lt;/code&gt; 是两内容不同的文件。这种方式效率很高，并且在小文件和上G的文件上都能运用 （&lt;code&gt;sort&lt;/code&gt; 不被内存大小约束，尽管在 &lt;code&gt;/tmp&lt;/code&gt; 在一个小的根分区上时你可能需要 &lt;code&gt;-T&lt;/code&gt; 参数），参阅前文中关于 &lt;code&gt;LC_ALL&lt;/code&gt; 和 &lt;code&gt;sort&lt;/code&gt; 的 &lt;code&gt;-u&lt;/code&gt; 参数的部分。
&lt;code&gt;sh
  cat a b | sort | uniq &amp;gt; c   # c is a union b
  cat a b | sort | uniq -d &amp;gt; c   # c is a intersect b
  cat a b b | sort | uniq -u &amp;gt; c   # c is set difference a - b
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;grep . *&lt;/code&gt; 来阅读检查目录下所有文件的内容，例如检查一个充满配置文件的目录比如 &lt;code&gt;/sys&lt;/code&gt;、&lt;code&gt;/proc&lt;/code&gt;、&lt;code&gt;/etc&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：
&lt;code&gt;sh
  awk &amp;#39;{ x += $3 } END { print x }&amp;#39; myfile
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你想在文件树上查看大小\日期，这可能看起来像递归版的 &lt;code&gt;ls -l&lt;/code&gt; 但比 &lt;code&gt;ls -lR&lt;/code&gt; 更易于理解：
&lt;code&gt;sh
  find . -type f -ls
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 &lt;code&gt;acct_id&lt;/code&gt; 参数在URI中。如果你想计算出每个 &lt;code&gt;acct_id&lt;/code&gt; 值有多少次请求，使用如下代码：
&lt;code&gt;sh
  cat access.log | egrep -o &amp;#39;acct_id=[0-9]+&amp;#39; | cut -d= -f2 | sort | uniq -c | sort -rn
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行这个函数从这篇文档中随机获取一条小技巧（解析 Markdown 文件并抽取项目）：
&lt;code&gt;sh
  function taocl() {
    curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
      pandoc -f markdown -t html |
      xmlstarlet fo --html --dropdtd |
      xmlstarlet sel -t -v &amp;quot;(html/body/ul/li[count(p)&amp;gt;0])[$RANDOM mod last()+1]&amp;quot; |
      xmlstarlet unesc | fmt -80
  }
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;冷门但有用&quot;&gt;冷门但有用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;expr&lt;/code&gt;：计算表达式或正则匹配&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;m4&lt;/code&gt;：简单地宏处理器&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;yes&lt;/code&gt;：多次打印字符串&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cal&lt;/code&gt;：漂亮的日历&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;env&lt;/code&gt;：执行一个命令（脚本文件中很有用）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;printenv&lt;/code&gt;：打印环境变量（调试时或在使用脚本文件时很有用）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;look&lt;/code&gt;：查找以特定字符串开头的单词&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cut&lt;/code&gt;、&lt;code&gt;paste&lt;/code&gt; 和 &lt;code&gt;join&lt;/code&gt;：数据修改&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fmt&lt;/code&gt;：格式化文本段落&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pr&lt;/code&gt;：将文本格式化成页/列形式&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fold&lt;/code&gt;：包裹文本中的几行&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;column&lt;/code&gt;：将文本格式化成多列或表格&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;expand&lt;/code&gt; 和 &lt;code&gt;unexpand&lt;/code&gt;：制表符与空格之间转换&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;nl&lt;/code&gt;：添加行号&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;seq&lt;/code&gt;：打印数字&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;bc&lt;/code&gt;：计算器&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;factor&lt;/code&gt;：分解因数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;gpg&lt;/code&gt;：加密并签名文件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;toe&lt;/code&gt;：terminfo entries 列表&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;nc&lt;/code&gt;：网络调试及数据传输&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;socat&lt;/code&gt;：套接字代理，与 &lt;code&gt;netcat&lt;/code&gt; 类似&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;slurm&lt;/code&gt;：网络可视化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;：文件或设备间传输数据&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;file&lt;/code&gt;：确定文件类型&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tree&lt;/code&gt;：以树的形式显示路径和文件，类似于递归的 &lt;code&gt;ls&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stat&lt;/code&gt;：文件信息&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time&lt;/code&gt;：执行命令，并计算执行时间&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tac&lt;/code&gt;：反向输出文件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;shuf&lt;/code&gt;：文件中随机选取几行&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;comm&lt;/code&gt;：一行一行的比较排序过的文件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pv&lt;/code&gt;：监视通过管道的数据&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hd&lt;/code&gt; 和 &lt;code&gt;bvi&lt;/code&gt;：保存或编辑二进制文件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;strings&lt;/code&gt;：从二进制文件中抽取文本&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tr&lt;/code&gt;：转换字母&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;iconv&lt;/code&gt; 或 &lt;code&gt;uconv&lt;/code&gt;：简易的文件编码&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;split&lt;/code&gt; 和 &lt;code&gt;csplit&lt;/code&gt;：分割文件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;units&lt;/code&gt;：将一种计量单位转换为另一种等效的计量单位（参阅 &lt;code&gt;/usr/share/units/definitions.units&lt;/code&gt;）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;7z&lt;/code&gt;：高比例的文件压缩&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ldd&lt;/code&gt;：动态库信息&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;nm&lt;/code&gt;：提取 obj 文件中的符号&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ab&lt;/code&gt;：性能分析 web 服务器&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;strace&lt;/code&gt;：系统调用调试&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mtr&lt;/code&gt;：更好的网络调试跟踪工具&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cssh&lt;/code&gt;：可视化的并发 shell&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rsync&lt;/code&gt;：通过 ssh 或本地文件系统同步文件和文件夹&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;wireshark&lt;/code&gt; 和 &lt;code&gt;tshark&lt;/code&gt;：抓包和网络调试工具&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ngrep&lt;/code&gt;：网络层的 grep&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;host&lt;/code&gt; 和 &lt;code&gt;dig&lt;/code&gt;：DNS 查找&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lsof&lt;/code&gt;：列出当前系统打开文件的工具以及查看端口信息&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dstat&lt;/code&gt;：系统状态查看&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nicolargo/glances&quot;&gt;&lt;code&gt;glances&lt;/code&gt;&lt;/a&gt;：高层次的多子系统总览&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;iostat&lt;/code&gt;：硬盘使用状态&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mpstat&lt;/code&gt;: CPU 使用状态&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;vmstat&lt;/code&gt;: 内存使用状态&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt;：top 的加强版&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;last&lt;/code&gt;：登入记录&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;w&lt;/code&gt;：查看处于登录状态的用户&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;id&lt;/code&gt;：用户/组 ID 信息&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sar&lt;/code&gt;：系统历史数据&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;iftop&lt;/code&gt; 或 &lt;code&gt;nethogs&lt;/code&gt;：套接字及进程的网络利用&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ss&lt;/code&gt;：套接字数据&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dmesg&lt;/code&gt;：引导及系统错误信息&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sysctl&lt;/code&gt;: 在内核运行时动态地查看和修改内核的运行参数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hdparm&lt;/code&gt;：SATA/ATA 磁盘更改及性能分析&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lsb_release&lt;/code&gt;：Linux 发行版信息&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lsblk&lt;/code&gt;：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lshw&lt;/code&gt;，&lt;code&gt;lscpu&lt;/code&gt;，&lt;code&gt;lspci&lt;/code&gt;，&lt;code&gt;lsusb&lt;/code&gt; 和 &lt;code&gt;dmidecode&lt;/code&gt;：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lsmod&lt;/code&gt; 和 &lt;code&gt;modifno&lt;/code&gt;：列出内核模块，并显示其细节&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fortune&lt;/code&gt;，&lt;code&gt;ddate&lt;/code&gt; 和 &lt;code&gt;sl&lt;/code&gt;：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;仅限-macos-x-系统&quot;&gt;仅限 MacOS X 系统&lt;/h2&gt;

&lt;p&gt;以下是&lt;em&gt;仅限于&lt;/em&gt; MacOS 系统的技巧&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;brew&lt;/code&gt; （Homebrew）或者 &lt;code&gt;port&lt;/code&gt; （MacPorts）进行包管理。这些可以用来在 Mac 系统上安装以上的大多数命令。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;pbcopy&lt;/code&gt; 复制任何命令的输出到桌面应用，用 &lt;code&gt;pbpaste&lt;/code&gt; 粘贴输入。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;open&lt;/code&gt; 或者 &lt;code&gt;open -a /Applications/Whatever.app&lt;/code&gt; 使用桌面应用打开文件。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spotlight： 用 &lt;code&gt;mdfind&lt;/code&gt; 搜索文件，用 &lt;code&gt;mdls&lt;/code&gt; 列出元数据（例如照片的 EXIF 信息）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意 MacOS 系统是基于 BSD UNIX 的，许多命令（例如 &lt;code&gt;ps&lt;/code&gt;，&lt;code&gt;ls&lt;/code&gt;，&lt;code&gt;tail&lt;/code&gt;，&lt;code&gt;awk&lt;/code&gt;，&lt;code&gt;sed&lt;/code&gt;）都和 Linux 中有些微的不同，这些极大的被 System V-style Unix 和 GNU 工具影响。你可以通过标题为 &amp;quot;BSD General Commands Manual&amp;quot; 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 &lt;code&gt;gawk&lt;/code&gt; 和 &lt;code&gt;gsed&lt;/code&gt; 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 &lt;code&gt;perl&lt;/code&gt; ）或者经过仔细的测试。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;更多资源&quot;&gt;更多资源&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alebcay/awesome-shell&quot;&gt;awesome-shell&lt;/a&gt;：一份精心组织的命令行工具及资源的列表。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://redsymbol.net/articles/unofficial-bash-strict-mode/&quot;&gt;Strict mode&lt;/a&gt;：为了编写更好的脚本文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;免责声明&quot;&gt;免责声明&lt;/h2&gt;

&lt;p&gt;除去特别微小的任务，记录下这些代码以便他人查看。责任往往伴随着能力，&lt;em&gt;可以&lt;/em&gt;做并不意味着应该做。&lt;/p&gt;

&lt;h2 id=&quot;授权条款&quot;&gt;授权条款&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;&lt;img src=&quot;https://i.creativecommons.org/l/by-sa/4.0/88x31.png&quot; alt=&quot;Creative Commons License&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文使用授权协议 &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CentOS iptables如何能打开端口</title>
   <link href="http://fooyou.github.io/blog/centos-iptables-open-port"/>
   <updated>2015-09-01T23:42:27+08:00</updated>
   <id>http://fooyou.github.io/blog/centos-iptables-open-port</id>
   <content type="html">&lt;p&gt;之前搞过，好用了，重装服务器后，又不好用了，重搞发现还没好用，好记性不如烂笔头啊！&lt;/p&gt;

&lt;p&gt;关键是对文件的 /etc/systemctl/iptables的修改，未修改的CentOS 7的文件如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# sample configuration for iptables service
# you can edit this manually or use system-config-firewall
# please do not ask us to add additional ports/services to this default configuration
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后开始在COMMIT前，添加参考 22 端口的语句：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-A INPUT -p tcp -m state --state NEW -m tcp --dport 8081 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启服务：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ service iptables restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看修改：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ iptables -L -n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到8081端口已经打开，可是却无法访问，折腾半天，突然发现其上这两句：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;难道先执行这两句，再执行打开8081的端口就有问题，一试果然如此，调整一下顺序就OK了，最终如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# sample configuration for iptables service
# you can edit this manually or use system-config-firewall
# please do not ask us to add additional ports/services to this default configuration
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 8081 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;iptables，以后有时间再慢慢研究吧！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>nrg转换成iso</title>
   <link href="http://fooyou.github.io/blog/nrg-2-iso"/>
   <updated>2015-08-21T23:46:00+08:00</updated>
   <id>http://fooyou.github.io/blog/nrg-2-iso</id>
   <content type="html">&lt;p&gt;网上下个音乐CD，是nrg格式的，Mac下无法打开，搜索到nrg2img这个工具，安装：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ brew install nrg2iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转换：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ nrg2iso sample.nrg sample.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件生成成功，无奈用DiskImageMounter无法打开，不知哪里出了问题，待解决！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>elementary os 网络代理下 build thrift</title>
   <link href="http://fooyou.github.io/blog/build-thrift-java-with-proxy"/>
   <updated>2015-08-20T23:46:00+08:00</updated>
   <id>http://fooyou.github.io/blog/build-thrift-java-with-proxy</id>
   <content type="html">&lt;p&gt;之前就在开发机上Build过，好像遇到什么代理的问题了，但很快解决了，没有留下什么记录。等过了好长时间又需要用到thrift，这时环境变了，一切都得重来，依稀记得设置的方式，却又遇到不同的问题。&lt;/p&gt;

&lt;p&gt;我下载的版本是0.9.2的Release包，所以不用安装Boost。&lt;/p&gt;

&lt;p&gt;安装Ubuntu需要的编译环境（是的elementary os来自ubuntu）：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install libboost-dev libboost-test-dev libboost-program-options-dev libboost-system-dev libboost-filesystem-dev libevent-dev automake libtool flex bison pkg-config g++ libssl-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;thrift会自动查找当前的开发语言环境，因为我只需用到python、java和C++并且环境都配好了，所以直接Configure：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;代理配置（我没有用这种方式）&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./configure --with-java ANT_FLAGS=&amp;#39;-Dproxy.enabled=1 -Dproxy.host=proxy.xxx.com -Dproxy.port=8080&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没有问题，然后：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;遇到问题了，执行到 &lt;code&gt;mvn.ant.tasks.download&lt;/code&gt; 不动了，肯定是代理问题，按记忆找到了 ./thrift-0.9.2/lib/java/build.pom第292行的proxy设置，修改后make成功。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;proxy&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;setproxy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;proxyhost=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;proxy.xxx.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;proxyport=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;8080&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该安装了：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本以为没问题了，可是就在&lt;code&gt;mvn.ant.tasks.download&lt;/code&gt;后，有个下载mvn依赖的&lt;code&gt;mvn.init&lt;/code&gt;停住不动了，肯定又是代理的事，可是在 ~/.m2/settings.xml里我已经配置了代理啊，一直再用啊～～&lt;/p&gt;

&lt;p&gt;然后终于看到了&lt;code&gt;sudo&lt;/code&gt;root用户啊，于是在root用户下创建了 ~/.m2/settings.xml，OK万事大吉！&lt;/p&gt;

&lt;p&gt;settings.xml内容如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;proxies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;proxy&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;active&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/active&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;protocol&amp;gt;&lt;/span&gt;http&lt;span class=&quot;nt&quot;&gt;&amp;lt;/protocol&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&amp;gt;&lt;/span&gt;proxy.xxx.com&lt;span class=&quot;nt&quot;&gt;&amp;lt;/host&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;port&amp;gt;&lt;/span&gt;8080&lt;span class=&quot;nt&quot;&gt;&amp;lt;/port&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;            &amp;lt;username&amp;gt;proxyuser&amp;lt;/username&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;            &amp;lt;password&amp;gt;somepassword&amp;lt;/password&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;            &amp;lt;nonProxyHosts&amp;gt;www.google.com|*.somewhere.com&amp;lt;/nonProxyHosts&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;            --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/proxy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/proxies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;jdk-1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;activation&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;activeByDefault&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/activeByDefault&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;jdk&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/jdk&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activation&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.compiler.source&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.compiler.source&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.compiler.target&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.compiler.target&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.compiler.compilerVersion&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.compiler.compilerVersion&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总之好用了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://thrift.apache.org/docs/BuildingFromSource&quot;&gt;https://thrift.apache.org/docs/BuildingFromSource&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Vim工作时和Terminal的切换</title>
   <link href="http://fooyou.github.io/blog/vim-terminal"/>
   <updated>2015-08-20T00:55:03+08:00</updated>
   <id>http://fooyou.github.io/blog/vim-terminal</id>
   <content type="html">&lt;p&gt;有很多方法，我最喜欢这个：&lt;/p&gt;

&lt;p&gt;vim工作环境中，启动Terminal：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;:sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回Terminal在当前vim工作目录，再次切回vim使用&lt;code&gt;Ctrl + d&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ &amp;lt;Ctrl + d&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://stackoverflow.com/questions/1236563/how-to-run-a-terminal-inside-of-vim&quot;&gt;http://stackoverflow.com/questions/1236563/how-to-run-a-terminal-inside-of-vim&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>使用TextRank算法为文本生成关键字和摘要</title>
   <link href="http://fooyou.github.io/blog/textrank-used-to-generate-keyword-and-summary"/>
   <updated>2015-08-19T23:23:43+08:00</updated>
   <id>http://fooyou.github.io/blog/textrank-used-to-generate-keyword-and-summary</id>
   <content type="html">&lt;p&gt;TextRank算法基于PageRank，使用TextRank算法为文本生成关键字和摘要。其比TF-IDF效果要好，因为TF-IDF依赖于语料词库，要训练一个能覆盖全互联网或者是某个领域的全语料是非常难的，更何况每天网上的新内容都大的惊人。而TextRank对其依赖较小，所以用起来更方便，效果也不错。但不论如何现在的算法不可能像人那样理解语言所要表达的信息，它只是用机器可理解的方式对文本句子和词进行权重计算而已。&lt;/p&gt;

&lt;h2 id=&quot;pagerank&quot;&gt;PageRank&lt;/h2&gt;

&lt;p&gt;PageRank通过网络浩瀚的超链接关系来确定一个页面的等级。Google把从A页面到B页面的链接解释为A页面给B页面的投票。一个高等级的页面可以提升其相邻页面的等级。一个页面的PageRank是由所有链向它的页面的重要性经过递归算法得到的。&lt;/p&gt;

&lt;p&gt;PageRank论文如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf&quot;&gt;The PageRank Citation Ranking: Bringing Order to the Web&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;PageRank的专利权属于斯坦福大学&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;pagerank算法&quot;&gt;PageRank算法&lt;/h3&gt;

&lt;h4 id=&quot;简单的&quot;&gt;简单的&lt;/h4&gt;

&lt;p&gt;假设一个由4个页面组成的小团体：A，B，C，D。如果所有页面都链接到A，如下图示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rankdir=&amp;quot;TD&amp;quot;
bgcolor=&amp;quot;transparent&amp;quot;;
node [color=&amp;quot;#dddddd&amp;quot; fontcolor=&amp;quot;#dddddd&amp;quot;]
edge [color=&amp;quot;#dddddd&amp;quot;]
B -&amp;gt; A;
C -&amp;gt; A;
D -&amp;gt; A;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;图1:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;那么A的PR（PageRank）将是BCD的PR总和：&lt;/p&gt;

&lt;p&gt;$$ PR(A) = PR(B) + PR(C) + PR(D) $$&lt;/p&gt;

&lt;p&gt;继续假设B也有链接到C，并且D也有链接到包括A的3个页面。如下图示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bgcolor=&amp;quot;transparent&amp;quot;;
node [color=&amp;quot;#dddddd&amp;quot; fontcolor=&amp;quot;#dddddd&amp;quot;]
edge [color=&amp;quot;#dddddd&amp;quot;]
rankdir=&amp;quot;LR&amp;quot;
B -&amp;gt; A;
B -&amp;gt; C;
C -&amp;gt; A;
D -&amp;gt; A;
D -&amp;gt; B;
D -&amp;gt; C;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;图2:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一个页面不能投票2次，所以B给每个页面半票。以同样逻辑，D投的票只有1/3算到A的PageRank上：&lt;/p&gt;

&lt;p&gt;$$ PR(A) = \frac{PR(B)}{2} + \frac{PR(C)}{1} + \frac{PR(D)}{3} $$&lt;/p&gt;

&lt;p&gt;也就是说，根据链出总数平分一个页面的PR值：&lt;/p&gt;

&lt;p&gt;$$ PR(A) = \frac{PR(B)}{L(B)} + \frac{PR(C)}{L(C)} + \frac{PR(D)}{L(D)} $$&lt;/p&gt;

&lt;p&gt;最后，所有这些被换算为一个百分比再乘上一个系数d。由于“没有向外链接的页面”传递出去的PageRank会是0，所以，Google通过数学公式给每个页面一个最小值\(\frac{(1 - d)}{N}\)：&lt;/p&gt;

&lt;p&gt;$$ PR(A) = \left( \frac{PR(B)}{L(B)} + \frac{PR(C)}{LC()} + \frac{PR(D)}{L(D)} + ... \right) d + \frac{1 - d}{N} $$&lt;/p&gt;

&lt;p&gt;如果给每个页面一个随机PageRank值（非0），那么经过不断的重复计算，这些页面的PR值会趋向稳定，也就是收敛状态。这就是搜索引擎使用它的原因。&lt;/p&gt;

&lt;h4 id=&quot;完整的&quot;&gt;完整的&lt;/h4&gt;

&lt;p&gt;这个方程式引入了随机浏览的概念，即有人上网无聊随机打开一些页面，点一些链接。一个页面的PageRank值也影响了它被随机浏览的概率。为了便于理解，这里假设上网者不断点网页上的链接，最终到了一个没有任何链出页面的网页，这时候上网者会随机到另外的网页开始浏览。&lt;/p&gt;

&lt;p&gt;为了处理那些“没有向外链接的页面”（这些页面就像“黑洞”会吞噬掉用户继续向下浏览的概率）带来的问题，\( d = 0.85 \)，（这里的d被称为阻尼系数（damping factor）），其意义是，在任何时刻，用户到达某页面后并继续向后浏览的概率，该数值是根据上网使用浏览器书签平均频率估算而得。\( 1 - d = 0.15 \)（就是用户停止点击，随机跳到新URL的概率）的算法被用到了所有页面上。&lt;/p&gt;

&lt;p&gt;所以，这个公式如下：&lt;/p&gt;

&lt;p&gt;$$ PageRank(p_i) = \frac{1 - d}{N} + d \sum_{p_j \in M(p_i)} \frac{PageRank(p_j)}{L(p_j)} $$&lt;/p&gt;

&lt;p&gt;\( p_1,p_2,...,p_N \)是被研究的页面，\(M(p_i)\)是链入\(p_i\)页面的集合，\(L(p_j)\)是\(p_j\)链出页面的数量，而N是所有页面的数量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PageRank&lt;/strong&gt;值是一个特殊矩阵中的特征向量。这个特征向量为：&lt;/p&gt;

&lt;p&gt;$$
\mathbf{R} =
\begin{bmatrix}
{\rm PageRank}(p_1) \\
{\rm PageRank}(p_2) \\
\vdots \\
{\rm PageRank}(p_N)
\end{bmatrix}
$$&lt;/p&gt;

&lt;p&gt;R是等式的答案：&lt;/p&gt;

&lt;p&gt;$$
\mathbf{R} =
\begin{bmatrix}
{(1-d) / N} \\
{(1-d) / N} \\
\vdots \\
{(1-d) / N}
\end{bmatrix}
+ d
\begin{bmatrix}
\ell(p_1,p_1) &amp;amp; \ell(p_1,p_2) &amp;amp; \cdots &amp;amp; \ell(p_1,p_N) \\
\ell(p_2,p_1) &amp;amp; \ddots &amp;amp; &amp;amp; \\
\vdots &amp;amp; &amp;amp; \ell(p_i,p_j) &amp;amp; \\
\ell(p_N,p_1) &amp;amp; &amp;amp; &amp;amp; \ell(p_N,p_N)
\end{bmatrix}
\mathbf{R}
$$&lt;/p&gt;

&lt;p&gt;如果\(p_j\)不链向\(p_i\)，而且每个j都成立时，\( \ell(p_i,p_j) \)等于0。&lt;/p&gt;

&lt;p&gt;$$ \sum_{i = 1}^N \ell(p_i,p_j) = 1 $$&lt;/p&gt;

&lt;p&gt;这项技术的主要缺点是旧的页面等级会比新页面高。因为即使是非常好的新页面也不会有很多外链，除非它是某个站点的子站点。&lt;/p&gt;

&lt;p&gt;这就是PageRank需要多项算法结合的原因。PageRank似乎偏好于维基百科页面，在条目名称的搜索结果中，维基百科页面总在大多数或者其他所有页面之前。原因主要是维基百科内相互的链接很多，并且有很多站点链入。&lt;/p&gt;

&lt;p&gt;Google经常处罚恶意提高PageRank的行为，至于其如何区分正常的链接和不正常的链接仍然是个商业机密。但是在Google的链接规范中，已经很清楚地说明，哪些做法是属于违反指南的行为。&lt;/p&gt;

&lt;h4 id=&quot;计算图1-2的pr值&quot;&gt;计算图1,2的PR值&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;图1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;建立矩阵，两个节点有链接其值为1&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假定每个网页的PR初始值为1&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;PR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用于计算PageRank的Python代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 使用numpy进行矩阵计算&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.85&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PR&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0
[[ 2.7 ]
 [ 0.15]
 [ 0.15]
 [ 0.15]]
1
[[ 0.5325]
 [ 0.15  ]
 [ 0.15  ]
 [ 0.15  ]]

...

9
[[ 0.5325]
 [ 0.15  ]
 [ 0.15  ]
 [ 0.15  ]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出网页A的PageRank是最高的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;建立矩阵，一个网页的总值为1，如果有多个链接则均摊。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;.5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;用于计算PageRank的Python代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.85&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PR&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0
[[ 1.7055]
 [ 0.4305]
 [ 0.8555]
 [ 0.15  ]]
1
[[ 1.1022125]
 [ 0.192075 ]
 [ 0.3750375]
 [ 0.15     ]]
...
9
[[ 0.50635772]
 [ 0.192075  ]
 [ 0.27370688]
 [ 0.15      ]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到各个网页的PR值的变化。&lt;/p&gt;

&lt;h2 id=&quot;textrank&quot;&gt;TextRank&lt;/h2&gt;

&lt;p&gt;TextRank是在Google的PageRank算法启发下，针对文本里的句子设计的权重算法，目标是自动摘要。它利用PageRank的投票原理，让每一个单词给它的邻居（TextRank术语称为“窗口”）投赞成票，票的权重取决于自己的票数。像PageRank一样TextRank也采用矩阵迭代收敛的方式解决权重和票数相互依赖的“悖论”。&lt;/p&gt;

&lt;p&gt;TextRank 论文如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://web.eecs.umich.edu/%7Emihalcea/papers/mihalcea.emnlp04.pdf&quot;&gt;TextRank: Bringing Order into Texts&lt;/a&gt; &lt;em&gt;Rada Mihalcea and Paul Tarau&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中对PageRank的表述：&lt;/p&gt;

&lt;p&gt;$$ S(V_i) = (1 - d) + d * \sum_{j \in I_n(V_i)} \frac{1}{\left| O_{ut}(V_j) \right|} S(V_j) $$&lt;/p&gt;

&lt;p&gt;其中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;\( S(V_i) \)：指第i个网页的PageRank。&lt;/li&gt;
&lt;li&gt;d：阻尼系数，一般为0.85。&lt;/li&gt;
&lt;li&gt;\( I_n(V_i) \)：指指向第i个网页的网页集合。&lt;/li&gt;
&lt;li&gt;\( O_{ut}(V_j) \)：指第j个网页所链出的网页集合。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TextRank的公式：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TextRank算法计算自动摘要的公式：&lt;/p&gt;

&lt;p&gt;$$ WS(V_i) = (1 - d) + d * \sum_{V_j \in I_n(V_i)} \frac{w_{ji}}{\sum_{V_k \in O_{ut}(V_j)} w_{jk}} WS(V_j) $$&lt;/p&gt;

&lt;p&gt;WS：是weight_sum（权重）的缩写，右侧的求和表示每个相邻句子的贡献程度。&lt;/p&gt;

&lt;p&gt;其中： \( w_{ji} \)：表示两个句子的相似度。&lt;/p&gt;

&lt;p&gt;而关于相似度的计算，有许多方法，比如基于向量空间模型的欧式距离和余弦相似度和基于Hash算法的minhash和simhash等等。论文中给出的相似度计算公式如下：&lt;/p&gt;

&lt;p&gt;$$ Similarity(S_i, S_j) = \frac{\left| { w_k | w_k \in S_i  w_k \in S_j } \right|}{log\left(\left| S_i \right|\right) + log\left(\left| S_j \right|\right))} $$&lt;/p&gt;

&lt;p&gt;$$ &amp;amp; $$&lt;/p&gt;

&lt;p&gt;正规的TextRank公式在PageRank的公式基础上，引入了边的权值概念，代表两个句子的相似度：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://zh.wikipedia.org/wiki/PageRank&quot;&gt;https://zh.wikipedia.org/wiki/PageRank&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&quot;http://www.hankcs.com/category/nlp/&quot;&gt;http://www.hankcs.com/category/nlp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&quot;http://my.oschina.net/letiantian/blog/351154&quot;&gt;http://my.oschina.net/letiantian/blog/351154&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>npm设置代理</title>
   <link href="http://fooyou.github.io/blog/npm-with-proxy"/>
   <updated>2015-08-19T22:42:20+08:00</updated>
   <id>http://fooyou.github.io/blog/npm-with-proxy</id>
   <content type="html">&lt;p&gt;有许多方法设置npm代理，要让nodejs和npm绕过代理，我还是喜欢使用npm命令：&lt;/p&gt;

&lt;p&gt;设置http代理&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ npm config set proxy http://proxy.xxx.com:8080/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是访问的确实https的源，所以还得设置https-proxy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ npm config set https-proxy http://proxy.xxx.com:8080/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;万事大吉！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Markdwon中插入数学公式</title>
   <link href="http://fooyou.github.io/blog/markdown-insert-formula"/>
   <updated>2015-08-19T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/markdown-insert-formula</id>
   <content type="html">&lt;p&gt;去他的Office，自使用Markdown书写文档以来，一直乐在其中，只有一点就是导入图片的问题，像流程图啊，公式啊什么都得用其他图形工具做好后，然后上传到某个服务器上，然后在Markdown里引用。非常麻烦。不过话说回来，如果使用Office不也是这个过程吗？更何况Markdown可直接发布在网页上呢！&lt;/p&gt;

&lt;p&gt;图形的问题可以用graphviz解决，程序员最不怕的就是敲代码，它可以只敲一些代码就可以把各种流程图什么的图形画出来，不怕乱的话，可以直接把生成的svg代码嵌入到markdown里，当然也可以路径引入。&lt;/p&gt;

&lt;p&gt;至于公式吗，以下有三个解决方案：&lt;/p&gt;

&lt;h2 id=&quot;方案一：使用google-chart的服务器&quot;&gt;方案一：使用Google Chart的服务器&lt;/h2&gt;

&lt;p&gt;Google Chart API:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://chart.googleapis.com/chart?cht=tx&amp;amp;chl= 在此插入Latex公式&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;border:none;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://chart.googleapis.com/chart?cht=tx&amp;amp;chl=\Large x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;border:none;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=\Large x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;

&lt;p&gt;可是google api是墙外的，不保靠。并且其还是以&lt;img&gt;标签出现的，不利于主题的修改。&lt;/p&gt;

&lt;h2 id=&quot;方案二：使用forkosh服务器&quot;&gt;方案二：使用forkosh服务器&lt;/h2&gt;

&lt;p&gt;forkosh API:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.forkosh.com/mathtex.cgi? 在此处插入Latex公式&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.forkosh.com/mathtex.cgi? \Large x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.forkosh.com/mathtex.cgi? \Large x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;方案三：使用mathjax引擎&quot;&gt;方案三：使用MathJax引擎&lt;/h2&gt;

&lt;p&gt;用这个引擎生成的公式不是img，这就是我想要的，可以这样添加公式引擎：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后写入Tex公式，&lt;code&gt;$$公式$$&lt;/code&gt;：表示行间公式；&lt;code&gt;\\(公式\\)&lt;/code&gt;：行内公式，一个简单例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$
\\(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\\)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示效果如下：&lt;/p&gt;

&lt;p&gt;行间：&lt;/p&gt;

&lt;p&gt;$$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$&lt;/p&gt;

&lt;p&gt;行内：&lt;/p&gt;

&lt;p&gt;\(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\)&lt;/p&gt;

&lt;p&gt;这就是你想要的有木有？很帅，有木有？！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考： &lt;a href=&quot;http://blog.csdn.net/xiahouzuoxin/article/details/26478179&quot;&gt;http://blog.csdn.net/xiahouzuoxin/article/details/26478179&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有关LaTeX公式的写法，请参照：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikibooks.org/wiki/LaTeX/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F&quot;&gt;https://zh.wikibooks.org/wiki/LaTeX/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>jekyll博客的分页实现</title>
   <link href="http://fooyou.github.io/blog/jekyll-blog-paginator"/>
   <updated>2015-08-19T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/jekyll-blog-paginator</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;引用：&lt;a href=&quot;http://segmentfault.com/a/1190000000406015&quot;&gt;http://segmentfault.com/a/1190000000406015&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;开启分页功能&quot;&gt;开启分页功能&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;首先我们需要在jekyll中开启分页功能，在jekyll的_config.yml中加入分页配置：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;paginate: 5
paginate_path: &amp;quot;page:num&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一行定义了每页的文章数量，而第二行则定义了在分页的结果，比如在/index.html中使用分页，定义为page:num，则第二页的路径将是/page2/index.html，第三页的路径将是/page3/index.html，以此类推&lt;/p&gt;

&lt;p&gt;&lt;em&gt;需要注意的几个点：&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分页只在html文件中起作用&lt;/li&gt;
&lt;li&gt;paginate_path同时定义了需要被分页的文件，本人测试这个叫index.html，具体目录由paginate_path中的路径定义，如果定义的目录没有，则会向上寻找index.html，直到根目录的index.html，具体机制官网上没有详细说，所以还需要进一步实验&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用分页&quot;&gt;使用分页&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;只是开启了分页还没有用，我们需要确实使用到首页之中，在首页(/index.html)中添加如下代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，jekyll就会根据paginator来进行分页了，被分出来多少页，就会有多少个页面生成。排1-5的文章就在/index.html中了，而排6-10的文章则在/page2/index.html中，依次类推&lt;/p&gt;

&lt;h2 id=&quot;换页&quot;&gt;换页&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;只是分页还不够，我们还需要在每个页面上做一个跳转到其他页面的导航，这里需要用到paginator的一些其他属性&lt;/p&gt;

&lt;p&gt;首先检测总的页数，如果只有一页，自然就不需要分页了。通过paginator的total_pages属性能判断总页数：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们需要一个跳转到上一页的按钮，这个按钮在第一页不需要显示，通过paginator的previous_page属性来判断是否是第一个页面，使用paginator的previous_page_path来输出上一页的路径，注意在前面添加baseurl，并进行一些必要的字符替换：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着是生成所有页面的按钮，并使当前页按钮无效化，遍历所有页面，使用paginator的page属性来确定当前页，如果是当前页，则按钮无效，否则使用page{&amp;quot;layout&amp;quot;=&amp;gt;&amp;quot;post&amp;quot;, &amp;quot;title&amp;quot;=&amp;gt;&amp;quot;jekyll博客的分页实现&amp;quot;, &amp;quot;category&amp;quot;=&amp;gt;&amp;quot;Document&amp;quot;, &amp;quot;tags&amp;quot;=&amp;gt;[&amp;quot;jekyll&amp;quot;, &amp;quot;blog&amp;quot;], &amp;quot;year&amp;quot;=&amp;gt;2015, &amp;quot;month&amp;quot;=&amp;gt;7, &amp;quot;day&amp;quot;=&amp;gt;24, &amp;quot;published&amp;quot;=&amp;gt;true, &amp;quot;summary&amp;quot;=&amp;gt;&amp;quot;jekyll本身支持分页功能&amp;quot;, &amp;quot;image&amp;quot;=&amp;gt;&amp;quot;pirates.svg&amp;quot;, &amp;quot;comment&amp;quot;=&amp;gt;true, &amp;quot;url&amp;quot;=&amp;gt;&amp;quot;/blog/jekyll-blog-paginator&amp;quot;, &amp;quot;dir&amp;quot;=&amp;gt;&amp;quot;/blog&amp;quot;, &amp;quot;date&amp;quot;=&amp;gt;2015-08-19 00:00:00 +0800, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;/blog/jekyll-blog-paginator&amp;quot;, &amp;quot;categories&amp;quot;=&amp;gt;[&amp;quot;document&amp;quot;], &amp;quot;next&amp;quot;=&amp;gt;&lt;Post: /blog/markdown-insert-formula&gt;, &amp;quot;previous&amp;quot;=&amp;gt;&lt;Post: /blog/vim-as-ide&gt;, &amp;quot;path&amp;quot;=&amp;gt;&amp;quot;&lt;em&gt;posts/2015-08-19-jekyll-blog-paginator.markdown&amp;quot;, &amp;quot;content&amp;quot;=&amp;gt;&amp;quot;&amp;gt; 引用：&lt;a href=&quot;http://segmentfault.com/a/1190000000406015%5Cn%5Cn##&quot;&gt;http://segmentfault.com/a/1190000000406015\n\n##&lt;/a&gt; 开启分页功能\n------------\n\n首先我们需要在jekyll中开启分页功能，在jekyll的_config.yml中加入分页配置：\n\n&lt;code&gt;\npaginate: 5\npaginate_path: \&amp;quot;page:num\&amp;quot;\n&lt;/code&gt;\n\n第一行定义了每页的文章数量，而第二行则定义了在分页的结果，比如在/index.html中使用分页，定义为page:num，则第二页的路径将是/page2/index.html，第三页的路径将是/page3/index.html，以此类推\n\n&lt;/em&gt;需要注意的几个点：&lt;em&gt;\n\n* 分页只在html文件中起作用\n* paginate_path同时定义了需要被分页的文件，本人测试这个叫index.html，具体目录由paginate_path中的路径定义，如果定义的目录没有，则会向上寻找index.html，直到根目录的index.html，具体机制官网上没有详细说，所以还需要进一步实验\n\n## 使用分页\n------------\n\n只是开启了分页还没有用，我们需要确实使用到首页之中，在首页(/index.html)中添加如下代码：\n\n&lt;code&gt;\n{% for post in paginator.posts %}\n    &amp;lt;a href=\&amp;quot;{{ post.url }}\&amp;quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;\n{% endfor %}\n&lt;/code&gt;\n\n这样，jekyll就会根据paginator来进行分页了，被分出来多少页，就会有多少个页面生成。排1-5的文章就在/index.html中了，而排6-10的文章则在/page2/index.html中，依次类推\n\n## 换页\n-------------\n\n只是分页还不够，我们还需要在每个页面上做一个跳转到其他页面的导航，这里需要用到paginator的一些其他属性\n\n首先检测总的页数，如果只有一页，自然就不需要分页了。通过paginator的total_pages属性能判断总页数：\n\n&lt;code&gt;\n{% if paginator.total_pages &amp;gt; 1 %}\n&amp;lt;!-- 分页代码 --&amp;gt;\n{% endif %}\n&lt;/code&gt;\n\n我们需要一个跳转到上一页的按钮，这个按钮在第一页不需要显示，通过paginator的previous_page属性来判断是否是第一个页面，使用paginator的previous_page_path来输出上一页的路径，注意在前面添加baseurl，并进行一些必要的字符替换：\n\n&lt;code&gt;\n{% if paginator.previous_page %}\n    &amp;lt;a href=\&amp;quot;{{ paginator.previous_page_path | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; }}\&amp;quot;上一页&amp;lt;/a&amp;gt;\n{% endif %}\n&lt;/code&gt;\n\n接着是生成所有页面的按钮，并使当前页按钮无效化，遍历所有页面，使用paginator的page属性来确定当前页，如果是当前页，则按钮无效，否则使用{{ site.paginate&lt;/em&gt;path | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; | replace: &amp;#39;:num&amp;#39;, page }}来将:num替换成当前页面的数字生成页面路径：\n\n&lt;code&gt;\n{% for page in (1..paginator.total_pages) %}\n    {% if page == paginator.page %}\n      &amp;lt;span class=\&amp;quot;active\&amp;quot;&amp;gt;{{ page }}&amp;lt;/span&amp;gt;\n    {% elsif page == 1 %}\n      &amp;lt;a href=\&amp;quot;{{ &amp;#39;/index.html&amp;#39; | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; }}\&amp;quot;&amp;gt;{{ page }}&amp;lt;/a&amp;gt;\n    {% else %}\n      &amp;lt;a href=\&amp;quot;{{ site.paginate_path | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; | replace: &amp;#39;:num&amp;#39;, page }}\&amp;quot;&amp;gt;{{ page }}&amp;lt;/a&amp;gt;\n    {% endif %}\n{% endfor %}\n&lt;/code&gt;\n\n最后生成一个下一页的按钮，在最后一页不显示，和上一页按钮类似，通过paginator的next_page_path来确定是否还有下一页：\n\n&lt;code&gt;\n{% if paginator.next_page %}\n    &amp;lt;a href=\&amp;quot;{{ paginator.next_page_path | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; }}\&amp;quot;&amp;gt;下一页&amp;lt;/a&amp;gt;\n{% endif %}\n&lt;/code&gt;\n\n这样一个完整的分页导航功能就做好了，效果就和博客主页上的分页效果是一样的\n\n总结\n\njekyll的分页总的来说还算给力，基本的功能可以完成。但是有一些缺陷，就是category，tag的分类分页无法实现，必须通过插件的方式来做。但是github不允许三方插件，所以只能通过一些其他的方式实现了。\n\n&amp;gt; 引用：&lt;a href=&quot;http://segmentfault.com/a/1190000000406015%5Cn&quot;&gt;http://segmentfault.com/a/1190000000406015\n&lt;/a&gt;&amp;quot;, &amp;quot;excerpt&amp;quot;=&amp;gt;&amp;quot;&lt;blockquote&gt;\n&lt;p&gt;引用：&lt;a href=\&quot;http://segmentfault.com/a/1190000000406015\&quot;&gt;&lt;a href=&quot;http://segmentfault.com/a/1190000000406015&quot;&gt;http://segmentfault.com/a/1190000000406015&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&amp;quot;}来将:num替换成当前页面的数字生成页面路径：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后生成一个下一页的按钮，在最后一页不显示，和上一页按钮类似，通过paginator的next_page_path来确定是否还有下一页：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样一个完整的分页导航功能就做好了，效果就和博客主页上的分页效果是一样的&lt;/p&gt;

&lt;p&gt;总结&lt;/p&gt;

&lt;p&gt;jekyll的分页总的来说还算给力，基本的功能可以完成。但是有一些缺陷，就是category，tag的分类分页无法实现，必须通过插件的方式来做。但是github不允许三方插件，所以只能通过一些其他的方式实现了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;引用：&lt;a href=&quot;http://segmentfault.com/a/1190000000406015&quot;&gt;http://segmentfault.com/a/1190000000406015&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>使用vim打造IDE</title>
   <link href="http://fooyou.github.io/blog/vim-as-ide"/>
   <updated>2015-08-13T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/vim-as-ide</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;参见：&lt;a href=&quot;https://www.safaribooksonline.com/blog/2014/11/23/way-vim-ide/&quot;&gt;https://www.safaribooksonline.com/blog/2014/11/23/way-vim-ide/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;越来越喜欢vim，当然我还是很喜欢Sublime Text，但是最近一直在linux server上写代码，所以就开始用vim，等一些按键熟悉之后发现脱离鼠标后，使用键盘疯狂敲击真的是非常爽的事。&lt;/p&gt;

&lt;h3 id=&quot;所需vim插件&quot;&gt;所需vim插件&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;插件名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;vundle&lt;/td&gt;
&lt;td&gt;管理vim插件的插件，需要在.vimrc中增/删插件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NERDTree&lt;/td&gt;
&lt;td&gt;IDE的必需品，Tree目录结构，有许多子插件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrlp&lt;/td&gt;
&lt;td&gt;类似Sublime Ctrl+P功能，极速检索目录树中的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;neocomplcache&lt;/td&gt;
&lt;td&gt;自动补全的插件，最棒的，谁用谁知道&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;airline&lt;/td&gt;
&lt;td&gt;状态bar，自认为很有用，显示当前文件状态，编码格式，等等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;还有很多美好的插件，不过对于我来说这些已经够用了。.vimrc配置文件如下，里面有说明。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;                                      通用设置 
&amp;quot; -------------------------------------------------------------------------------------------
set number                    &amp;quot; 显示行号
set tabstop=4                 &amp;quot; Tab长度为4
set softtabstop=4             &amp;quot; 
set shiftwidth=4              &amp;quot;
set expandtab                 &amp;quot; 空格代替Tab，否：set noexpandtab



&amp;quot;                                  Vundle Vim插件管理
&amp;quot; -------------------------------------------------------------------------------------------
set nocompatible              &amp;quot; be iMproved, required
filetype off                  &amp;quot; required

&amp;quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
&amp;quot; alternatively, pass a path where Vundle should install plugins
&amp;quot;call vundle#begin(&amp;#39;~/some/path/here&amp;#39;)

&amp;quot; let Vundle manage Vundle, required
Plugin &amp;#39;VundleVim/Vundle.vim&amp;#39;

&amp;quot; 追上sublime text的 ctrp-p
Plugin &amp;#39;kien/ctrlp.vim&amp;#39;

&amp;quot; 文件浏览插件
Plugin &amp;#39;scrooloose/nerdtree&amp;#39;

&amp;quot; 灵活显示status/tabline的超轻量级插件
Plugin &amp;#39;bling/vim-airline&amp;#39;

&amp;quot; 自动补全的终极插件-Neocomplcache
Plugin &amp;#39;Shougo/neocomplcache.vim&amp;#39;

&amp;quot; All of your Plugins must be added before the following line
call vundle#end()            &amp;quot; required
filetype plugin indent on    &amp;quot; required
&amp;quot; To ignore plugin indent changes, instead use:
&amp;quot;filetype plugin on
&amp;quot;
&amp;quot; Brief help
&amp;quot; :PluginList       - lists configured plugins
&amp;quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
&amp;quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache
&amp;quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
&amp;quot;
&amp;quot; see :h vundle for more details or wiki for FAQ
&amp;quot; Put your non-Plugin stuff after this line

&amp;quot;                                 NERDTree 插件配置 
&amp;quot; --------------------------------------------------------------------------------------------
&amp;quot;  按下 Ctrol+n 显示/隐藏 NERDTree
map &amp;lt;C-n&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;

&amp;quot; 当前目录下打开NERDTree
set autochdir
let NERDTreeChDirMode=2
nnoremap &amp;lt;leader&amp;gt;n :NERDTree .&amp;lt;CR&amp;gt;

&amp;quot;                                 airline 插件配置 
&amp;quot; --------------------------------------------------------------------------------------------
set laststatus=2                &amp;quot; 默认打开airline
&amp;quot; let g:airline#extensions#tabline#enabled = 1      &amp;quot; 打开tabline

&amp;quot;                                 neocomplcache 插件配置 
&amp;quot; --------------------------------------------------------------------------------------------
&amp;quot;Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
&amp;quot; Disable AutoComplPop.
let g:acp_enableAtStartup = 0
&amp;quot; Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
&amp;quot; Use smartcase.
let g:neocomplcache_enable_smart_case = 1
&amp;quot; Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = &amp;#39;\*ku\*&amp;#39;

&amp;quot; Enable heavy features.
&amp;quot; Use camel case completion.
&amp;quot;let g:neocomplcache_enable_camel_case_completion = 1
&amp;quot; Use underbar completion.
&amp;quot;let g:neocomplcache_enable_underbar_completion = 1

&amp;quot; Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ &amp;#39;default&amp;#39; : &amp;#39;&amp;#39;,
    \ &amp;#39;vimshell&amp;#39; : $HOME.&amp;#39;/.vimshell_hist&amp;#39;,
    \ &amp;#39;scheme&amp;#39; : $HOME.&amp;#39;/.gosh_completions&amp;#39;
        \ }

&amp;quot; Define keyword.
if !exists(&amp;#39;g:neocomplcache_keyword_patterns&amp;#39;)
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns[&amp;#39;default&amp;#39;] = &amp;#39;\h\w*&amp;#39;

&amp;quot; Plugin key-mappings.
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-g&amp;gt;     neocomplcache#undo_completion()
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-l&amp;gt;     neocomplcache#complete_common_string()

&amp;quot; Recommended key-mappings.
&amp;quot; &amp;lt;CR&amp;gt;: close popup and save indent.
inoremap &amp;lt;silent&amp;gt; &amp;lt;CR&amp;gt; &amp;lt;C-r&amp;gt;=&amp;lt;SID&amp;gt;my_cr_function()&amp;lt;CR&amp;gt;
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . &amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;
  &amp;quot; For no inserting &amp;lt;CR&amp;gt; key.
  &amp;quot;return pumvisible() ? neocomplcache#close_popup() : &amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;
endfunction
&amp;quot; &amp;lt;TAB&amp;gt;: completion.
inoremap &amp;lt;expr&amp;gt;&amp;lt;TAB&amp;gt;  pumvisible() ? &amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;
&amp;quot; &amp;lt;C-h&amp;gt;, &amp;lt;BS&amp;gt;: close popup and delete backword char.
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-h&amp;gt; neocomplcache#smart_close_popup().&amp;quot;\&amp;lt;C-h&amp;gt;&amp;quot;
inoremap &amp;lt;expr&amp;gt;&amp;lt;BS&amp;gt; neocomplcache#smart_close_popup().&amp;quot;\&amp;lt;C-h&amp;gt;&amp;quot;
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-y&amp;gt;  neocomplcache#close_popup()
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-e&amp;gt;  neocomplcache#cancel_popup()
&amp;quot; Close popup by &amp;lt;Space&amp;gt;.
&amp;quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Space&amp;gt; pumvisible() ? neocomplcache#close_popup() : &amp;quot;\&amp;lt;Space&amp;gt;&amp;quot;

&amp;quot; For cursor moving in insert mode(Not recommended)
&amp;quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Left&amp;gt;  neocomplcache#close_popup() . &amp;quot;\&amp;lt;Left&amp;gt;&amp;quot;
&amp;quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Right&amp;gt; neocomplcache#close_popup() . &amp;quot;\&amp;lt;Right&amp;gt;&amp;quot;
&amp;quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Up&amp;gt;    neocomplcache#close_popup() . &amp;quot;\&amp;lt;Up&amp;gt;&amp;quot;
&amp;quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Down&amp;gt;  neocomplcache#close_popup() . &amp;quot;\&amp;lt;Down&amp;gt;&amp;quot;
&amp;quot; Or set this.
&amp;quot;let g:neocomplcache_enable_cursor_hold_i = 1
&amp;quot; Or set this.
&amp;quot;let g:neocomplcache_enable_insert_char_pre = 1

&amp;quot; AutoComplPop like behavior.
&amp;quot;let g:neocomplcache_enable_auto_select = 1

&amp;quot; Shell like behavior(not recommended).
&amp;quot;set completeopt+=longest
&amp;quot;let g:neocomplcache_enable_auto_select = 1
&amp;quot;let g:neocomplcache_disable_auto_complete = 1
&amp;quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;TAB&amp;gt;  pumvisible() ? &amp;quot;\&amp;lt;Down&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;C-x&amp;gt;\&amp;lt;C-u&amp;gt;&amp;quot;

&amp;quot; Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

&amp;quot; Enable heavy omni completion.
if !exists(&amp;#39;g:neocomplcache_force_omni_patterns&amp;#39;)
  let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_omni_patterns.php = &amp;#39;[^. \t]-&amp;gt;\h\w*\|\h\w*::&amp;#39;
let g:neocomplcache_force_omni_patterns.c = &amp;#39;[^.[:digit:] *\t]\%(\.\|-&amp;gt;\)&amp;#39;
let g:neocomplcache_force_omni_patterns.cpp = &amp;#39;[^.[:digit:] *\t]\%(\.\|-&amp;gt;\)\|\h\w*::&amp;#39;

&amp;quot; For perlomni.vim setting.
&amp;quot; https://github.com/c9s/perlomni.vim
let g:neocomplcache_force_omni_patterns.perl = &amp;#39;\h\w*-&amp;gt;\h\w*\|\h\w*::&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;vim-工作区切换的快捷键&quot;&gt;vim 工作区切换的快捷键&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ctrl + w + h&lt;/td&gt;
&lt;td&gt;光标Focus左侧树形目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl + w + l&lt;/td&gt;
&lt;td&gt;光标Focus右侧文件显示窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl + w + w&lt;/td&gt;
&lt;td&gt;光标在多个split窗口间切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl + w + r&lt;/td&gt;
&lt;td&gt;移动当前窗口的布局位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;nerdtree的常用快捷键&quot;&gt;NERDTree的常用快捷键&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;td&gt;在已有窗口中打开文件、目录或书签，并Focus到该窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;go&lt;/td&gt;
&lt;td&gt;在已有窗口中打开文件、目录或书签，但不跳到该窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;在新 Tab 中打开选中文件/书签，并跳到新 Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;在新 Tab 中打开选中文件/书签，但不跳到新 Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;split 一个新窗口打开选中文件，并跳到该窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gi&lt;/td&gt;
&lt;td&gt;split 一个新窗口打开选中文件，但不跳到该窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;vsplit 一个新窗口打开选中文件，并跳到该窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gs&lt;/td&gt;
&lt;td&gt;vsplit 一个新 窗口打开选中文件，但不跳到该窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;执行当前文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;递归打开选中 结点下的所有目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;合拢选中结点的父目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;递归 合拢选中结点下的所有目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;编辑当前路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;CR&gt;&lt;/td&gt;
&lt;td&gt;同 o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;双击&lt;/td&gt;
&lt;td&gt;同 o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中击&lt;/td&gt;
&lt;td&gt;对于文件同 i，对于目录同 e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;删除当前书签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;跳到根结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;跳到父结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;td&gt;跳到当前目录下同级的第一个结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td&gt;跳到当前目录下同级的最后一个结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;td&gt;跳到当前目录下同级的前一个结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;td&gt;跳到当前目录下同级的后一个结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;将选中目录或选中文件的父目录设为根结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;td&gt;将当前根结点的父目录设为根目录，并变成合拢原根结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;将当前根结点的父目录设为根目录，但保持展开原根结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;递归刷新选中目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;递归刷新根结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;显示文件系统菜单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cd&lt;/td&gt;
&lt;td&gt;将 CWD 设为选中目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;切换是否显示隐藏文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;切换是否使用文件过滤器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;切换是否显示文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;切换是否显示书签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;关闭 NerdTree 窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;切换是否显示 Quick Help&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ma&lt;/td&gt;
&lt;td&gt;新建目录或文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>elementary OS Freya中文输入的解决方法</title>
   <link href="http://fooyou.github.io/blog/elementaryos-scratch-chinese-input"/>
   <updated>2015-08-07T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/elementaryos-scratch-chinese-input</id>
   <content type="html">&lt;p&gt;据说使用iBus的能输入中文，但我用的是fcitx不能输入中文。&lt;/p&gt;

&lt;p&gt;有哥们说只要指定&lt;code&gt;GTK_IM_MODULE=&amp;#39;xim&amp;#39;&lt;/code&gt;然后启动 scratch-text-editor就行了，果然好用。&lt;/p&gt;

&lt;p&gt;两种执行方式：&lt;/p&gt;

&lt;p&gt;一、终端启动：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ GTK_IM_MODULE=&amp;quot;xim&amp;quot; scratch-text-editor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二、修改scratch.desktop&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ vi /usr/share/applications/scratch-text-editor.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改&lt;code&gt;Exec=&lt;/code&gt;这行为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Exec=env GTK_IM_MODULE=xim scratch-text-editor %U
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, Enjoy!!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2015年最棒的11个linux操作系统</title>
   <link href="http://fooyou.github.io/blog/top-linux-distros"/>
   <updated>2015-07-24T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/top-linux-distros</id>
   <content type="html">&lt;p&gt;正像参考的文章中的作者在2005年开始使用linux，我是在2008年开始使用ubuntu的，记得那时的ubuntu刚刚到9.04版本，从那时起我变逐渐离开Windows开始进入linux的世界。一晃间，那么多年头过去了，今天的linux世界不再那么孤立了，linux系统层出不穷，本文介绍2015年原作者发现的11个“好”的linux系统。&lt;/p&gt;

&lt;h3 id=&quot;最美系统：elementary-os&quot;&gt;最美系统：elementary OS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://elementaryos.org/&quot;&gt;elementaryos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.linux.com/images/stories/41373/images/stories/elementary-OS.png&quot; alt=&quot;img_elementary&quot;&gt;&lt;/p&gt;

&lt;p&gt;毫无疑问，在所有的linux发行版本中，elementary OS是颜值最高的，它是由开源世界里的世界顶级设计师参与设计的，所说和Mac OS很像，但作为一个开源系统，真的是相当相当难得的。我现在正在用elementary OS freya版本，感觉妙不可言。&lt;/p&gt;

&lt;p&gt;原来用的是ubuntu 14.04，结果我的机器很老，基本无法正常工作，Elementary OS是轻量级的Ubuntu改进版，在我老机器上能飞速运行。&lt;/p&gt;

&lt;h3 id=&quot;最佳桌面系统：opensuse&quot;&gt;最佳桌面系统：openSUSE&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.opensuse.org/en/&quot;&gt;openSUSE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.linux.com/images/stories/41373/images/stories/opensuse.png&quot; alt=&quot;img_openSUSE&quot;&gt;&lt;/p&gt;

&lt;p&gt;除了一些顽固的linux程序员，几乎所有的计算机用户都在使用桌面系统。看视频，编图片，写文档，玩游戏，一键安装，桌面切换……&lt;/p&gt;

&lt;h3 id=&quot;最佳个人服务器：debian&quot;&gt;最佳个人服务器：Debian&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.debian.org/&quot;&gt;Debian&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;最佳笔记本系统：ubuntu-mate&quot;&gt;最佳笔记本系统：Ubuntu Mate&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://ubuntu-mate.org/&quot;&gt;Ubuntu Mate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.linux.com/images/stories/41373/images/stories/ubuntu-mate.png&quot; alt=&quot;Ubuntu Mate&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;最佳自定制系统：arch-linux&quot;&gt;最佳自定制系统：Arch Linux&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/&quot;&gt;Arch Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.linux.com/images/stories/41373/images/stories/arch-linux.jpg&quot; alt=&quot;Arch linux&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;最佳儿童系统：sugar&quot;&gt;最佳儿童系统：Sugar&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.sugarlabs.org/&quot;&gt;Sugar&lt;/a&gt;
&lt;img src=&quot;http://wiki.sugarlabs.org/images/7/76/Download_Mirabell.png&quot; alt=&quot;Sugar&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;最佳游戏系统：steam-os&quot;&gt;最佳游戏系统：Steam OS&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://store.steampowered.com/livingroom/SteamOS/&quot; alt=&quot;Steam OS&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;最佳隐私系统：tails&quot;&gt;最佳隐私系统：Tails&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://tails.boum.org/&quot;&gt;Tails&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;最佳音视频编辑系统：kxstudio-amp-avlinux&quot;&gt;最佳音视频编辑系统：KXStudio &amp;amp; AVLinux&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bandshed.net/AVLinux.html&quot;&gt;KXStudio &amp;amp; AVLinux&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;最佳企业级系统：suse-linux-amp-red-hat&quot;&gt;最佳企业级系统：SUSE linux &amp;amp; Red Hat&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.redhat.com/en&quot;&gt;Red Hat&lt;/a&gt;
&lt;a href=&quot;https://www.suse.com/&quot;&gt;SUSE&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;最佳老硬件系统：lubuntu&quot;&gt;最佳老硬件系统：Lubuntu&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://lubuntu.net/&quot;&gt;Lubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原作者排的与博主无关.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linux.com/news/software/applications/810295-the-top-11-best-linux-distros-for-2015&quot;&gt;https://www.linux.com/news/software/applications/810295-the-top-11-best-linux-distros-for-2015&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Makefile</title>
   <link href="http://fooyou.github.io/blog/makefile"/>
   <updated>2015-07-23T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/makefile</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.chinaunix.net/old_jh/23/408225.html&quot;&gt;http://www.chinaunix.net/old_jh/23/408225.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>C/C++性能测试工具 GNU gprof</title>
   <link href="http://fooyou.github.io/blog/performance-tools-for-linux-cplusplus"/>
   <updated>2015-07-22T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/performance-tools-for-linux-cplusplus</id>
   <content type="html">&lt;h2 id=&quot;代码剖析（code-profiling）&quot;&gt;代码剖析（Code profiling）&lt;/h2&gt;

&lt;p&gt;程序员在优化软件性能时要注意应尽量优化软件中被频繁调用的部分，这样才能对程序进行有效优化。使用真实的数据，精确的分析应用程序在时间上的花费的行为就成为&lt;em&gt;代码剖析&lt;/em&gt;。现在几乎所有的开发平台都支持代码剖析，本文要介绍的是linux下针对c/c++的GNU的gprof代码剖析工具。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;PS：gprof不只能对c/c++，还可对Pascal和Fortran 77进行代码剖析。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gprof&quot;&gt;gprof&lt;/h2&gt;

&lt;p&gt;GNU gprof 是一款linux平台上的程序分析软件（unix也有prof)。借助gprof可以获得C/C++程序运行期间的统计数据，例如每个函数耗费的时间，函数被调用的次数以及各个函数相互之间的调用关系。gprof可以帮助我们找到程序运行的瓶颈，对占据大量CPU时间的函数进行调优。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;PS：gprof统计的只是用户态CPU的占用时间，不包括内核态的CPU时间。gprof对I/O瓶颈无能为力，耗时甚久的I/O操作很可能只占据极少的CPU时间。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;如何使用gprof&quot;&gt;如何使用gprof&lt;/h3&gt;

&lt;p&gt;gprof的使用很简单，遵循以下步骤即可：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用编译标志&lt;code&gt;-pg&lt;/code&gt;编译代码。&lt;/li&gt;
&lt;li&gt;运行程序生成剖析数据。&lt;/li&gt;
&lt;li&gt;运行gprof分析剖析数据，得到可视结果。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面，我们来演练一下：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test.c:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Inside a()&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Inside b()&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Inside main()&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xfffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: for循环被用来产生执行时间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;func.c:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Inside func&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;step-1-使用-pg标识编译上述代码&quot;&gt;Step 1: 使用&lt;code&gt;-pg&lt;/code&gt;标识编译上述代码&lt;/h4&gt;

&lt;p&gt;gcc文档中对&lt;code&gt;-pg&lt;/code&gt;的描述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-pg : Generate extra code to write profile information suitable for the analysis program gprof. You must use this option when compiling the source files you want data about, and you must also use it when linking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是，在编译和链接的时候都要使用&lt;code&gt;-pg&lt;/code&gt;标识，所以，一起用吧：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gcc -Wall -pg test.c func.c -o test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;step-2-运行程序&quot;&gt;Step 2: 运行程序&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ls
func.c  makefile  test  test.c

$ ./test
Inside main()
Inside a()
Inside func
Inside b()

$ ls
func.c  gmon.out  makefile  test  test.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时，会发现目录下多了一个文件&lt;code&gt;gmon.out&lt;/code&gt;，可以用gprof来分析它了。&lt;/p&gt;

&lt;h4 id=&quot;step-3-使用gprof分析工具&quot;&gt;Step 3: 使用gprof分析工具&lt;/h4&gt;

&lt;p&gt;gprof可以把gmon.out以人可读的方式解析出来，解析出的内容包括两个表（flat profile和call graph），一个包含函数执行时间，一个包含函数调用过程。&lt;/p&gt;

&lt;p&gt;把这两个表重定向到analysis.txt：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gprof test gmon.out &amp;gt; analysis.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到analysis.txt：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 33.69     10.42    10.42        1    10.42    10.42  b
 33.65     20.82    10.41        1    10.41    20.81  a
 33.65     31.23    10.41        1    10.41    10.41  func
  0.13     31.27     0.04                             main

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
       else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
       function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
       the function in the gprof listing. If the index is
       in parenthesis it shows where it would appear in
       the gprof listing if it were to be printed.

Copyright (C) 2012-2014 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

             Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.03% of 31.27 seconds

index % time    self  children    called     name
                                                 &amp;lt;spontaneous&amp;gt;
[1]    100.0    0.04   31.23                 main [1]
               10.41   10.41       1/1           a [2]
               10.42    0.00       1/1           b [3]
-----------------------------------------------
               10.41   10.41       1/1           main [1]
[2]     66.6   10.41   10.41       1         a [2]
               10.41    0.00       1/1           func [4]
-----------------------------------------------
               10.42    0.00       1/1           main [1]
[3]     33.3   10.42    0.00       1         b [3]
-----------------------------------------------
               10.41    0.00       1/1           a [2]
[4]     33.3   10.41    0.00       1         func [4]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index  A unique number given to each element of the table.
        Index numbers are sorted numerically.
        The index number is printed next to every function name so
        it is easier to look up where the function is in the table.

     % time This is the percentage of the `total&amp;#39; time that was spent
        in this function and its children.  Note that due to
        different viewpoints, functions excluded by options, etc,
        these numbers will NOT add up to 100%.

     self   This is the total amount of time spent in this function.

     children   This is the total amount of time propagated into this
        function by its children.

     called This is the number of times the function was called.
        If the function called itself recursively, the number
        only includes non-recursive calls, and is followed by
        a `+&amp;#39; and the number of recursive calls.

     name   The name of the current function.  The index number is
        printed after it.  If the function is a member of a
        cycle, the cycle number is printed between the
        function&amp;#39;s name and the index number.


 For the function&amp;#39;s parents, the fields have the following meanings:

     self   This is the amount of time that was propagated directly
        from the function into this parent.

     children   This is the amount of time that was propagated from
        the function&amp;#39;s children into this parent.

     called This is the number of times this parent called the
        function `/&amp;#39; the total number of times the function
        was called.  Recursive calls to the function are not
        included in the number after the `/&amp;#39;.

     name   This is the name of the parent.  The parent&amp;#39;s index
        number is printed after it.  If the parent is a
        member of a cycle, the cycle number is printed between
        the name and the index number.

 If the parents of the function cannot be determined, the word
 `&amp;lt;spontaneous&amp;gt;&amp;#39; is printed in the `name&amp;#39; field, and all the other
 fields are blank.

 For the function&amp;#39;s children, the fields have the following meanings:

     self   This is the amount of time that was propagated directly
        from the child into the function.

     children   This is the amount of time that was propagated from the
        child&amp;#39;s children to the function.

     called This is the number of times the function called
        this child `/&amp;#39; the total number of times the child
        was called.  Recursive calls by the child are not
        listed in the number after the `/&amp;#39;.

     name   This is the name of the child.  The child&amp;#39;s index
        number is printed after it.  If the child is a
        member of a cycle, the cycle number is printed
        between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+&amp;#39; recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2014 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [2] a                       [4] func
   [3] b                       [1] main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;-a&lt;/code&gt;参数屏蔽静态（私有）函数信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gprof -a test gmon.out &amp;gt; analysis.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;-b&lt;/code&gt;参数屏蔽冗余信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gprof -b test gmon.out &amp;gt; analysis.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到如下信息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 33.69     10.42    10.42        1    10.42    10.42  b
 33.65     20.82    10.41        1    10.41    20.81  a
 33.65     31.23    10.41        1    10.41    10.41  func
  0.13     31.27     0.04                             main


            Call graph


granularity: each sample hit covers 2 byte(s) for 0.03% of 31.27 seconds

index % time    self  children    called     name
                                                 &amp;lt;spontaneous&amp;gt;
[1]    100.0    0.04   31.23                 main [1]
               10.41   10.41       1/1           a [2]
               10.42    0.00       1/1           b [3]
-----------------------------------------------
               10.41   10.41       1/1           main [1]
[2]     66.6   10.41   10.41       1         a [2]
               10.41    0.00       1/1           func [4]
-----------------------------------------------
               10.42    0.00       1/1           main [1]
[3]     33.3   10.42    0.00       1         b [3]
-----------------------------------------------
               10.41    0.00       1/1           a [2]
[4]     33.3   10.41    0.00       1         func [4]
-----------------------------------------------


Index by function name

   [2] a                       [4] func
   [3] b                       [1] main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;-p&lt;/code&gt;参数只打印flat profile信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gprof -p test gmon.out &amp;gt; analysis.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;-p(function)&lt;/code&gt;参数只打印&lt;code&gt;function&lt;/code&gt;函数信息：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;只打印函数&lt;code&gt;a()&lt;/code&gt;的flat profile信息&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gprof -pa test gmon.out &amp;gt; analysis.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;-P&lt;/code&gt;参数屏蔽flat profile信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gprof -P test gmon.out &amp;gt; analysis.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;-q&lt;/code&gt;参数只打印call graph信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gprof -q test gmon.out &amp;gt; analysis.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;-q(function)&lt;/code&gt;参数只打印&lt;code&gt;function&lt;/code&gt;函数的call graph信息：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;只打印函数&lt;code&gt;a()&lt;/code&gt;的call graph信息&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gprof -qa test gmon.out &amp;gt; analysis.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;-Q&lt;/code&gt;参数屏蔽call graph信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gprof -Q test gmon.out &amp;gt; analysis.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以组合使用这个参数。&lt;/p&gt;

&lt;h3 id=&quot;参考：&quot;&gt;参考：&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/rocketfan/archive/2009/11/15/1603465.html&quot;&gt;http://www.cnblogs.com/rocketfan/archive/2009/11/15/1603465.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.thegeekstuff.com/2012/08/gprof-tutorial/&quot;&gt;http://www.thegeekstuff.com/2012/08/gprof-tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/leichelle/article/details/8208530&quot;&gt;http://blog.csdn.net/leichelle/article/details/8208530&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-gnuprof.html&quot;&gt;http://www.ibm.com/developerworks/cn/linux/l-gnuprof.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>网站压力测试之——如何生成百万级的http请求</title>
   <link href="http://fooyou.github.io/blog/web-stress-test"/>
   <updated>2015-07-21T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/web-stress-test</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;文章选自：&lt;a href=&quot;http://blog.jobbole.com/87509/&quot;&gt;http://blog.jobbole.com/87509/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;负载生成器是一些生成用于测试的流量的程序。它们可以向你展示服务器在高负载的情况下的性能，以及让你能够找出服务器可能存在的问题。通过负载测试了解服务器的缺点，是测试服务器弹性以及未雨绸缪的好方法。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;负载生成工具（load-generating-tools）&quot;&gt;负载生成工具（Load-Generating Tools）&lt;/h2&gt;

&lt;p&gt;在进行负责测试时要牢记一件重要的事：你能在 Linux 上建立多少个 socket 连接。这个限制是硬编码在内核里的，最典型的就是临时 W 端口的限制。（在某种程度上）你可以在 /etc/sysctl.conf 里扩展它。但是基本上，一台 Linux 机器只能同时打开大约 64,000 个 socket 。因此在负载测试时，我们不得不通过在单一的连接上尽可能多地发出请求来充分利用 socket 。 除此之外，我们还需要不止一台的机器来产生负载。否则，负载生成器会把可用的 socket 占用导致不能产生足够的负载。&lt;/p&gt;

&lt;p&gt;我一开始用的是‘ab’，Apache Bench 。它是我所知道的 http 基准测试工具中最简单、最通用的。并且它是 Apache 附带的产品，因此它可能已经存在于你的系统中。不幸的是，我在使用它的时候每秒大约只能生成 900 个请求。虽然我见过其他人使用它每秒能达到 2,000 个请求，但我可以立即告诉你，‘ab’并不适合我们的基准测试。&lt;/p&gt;

&lt;h2 id=&quot;httperf&quot;&gt;Httperf&lt;/h2&gt;

&lt;p&gt;接着，我尝试了 ‘httperf’。这个工具更强大，但是它依然相对简单并且功能有限。要算出每秒生产了多少个请求并不是仅传递参数那么简单。经过我的多次尝试，获取了每秒超过几百请求的结果。例如：&lt;/p&gt;

&lt;p&gt;它以每秒 1,000 个的速率创建了 100,000 个会话（session）。每次会话发起 5 次请求，时间间隔为 2 秒。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;httperf --hog --server=192.168.122.10 --wsess=100000,5,2 --rate 1000 --timeout 5

Total: connections 117557 requests 219121 replies 116697 test-duration 111.423 s

Connection rate: 1055.0 conn/s (0.9 ms/conn, &amp;lt;=1022 concurrent connections)
Connection time [ms]: min 0.3 avg 865.9 max 7912.5 median 459.5 stddev 993.1
Connection time [ms]: connect 31.1
Connection length [replies/conn]: 1.000

Request rate: 1966.6 req/s (0.5 ms/req)
Request size [B]: 91.0

Reply rate [replies/s]: min 59.4 avg 1060.3 max 1639.7 stddev 475.2 (22 samples)
Reply time [ms]: response 56.3 transfer 0.0
Reply size [B]: header 267.0 content 18.0 footer 0.0 (total 285.0)
Reply status: 1xx=0 2xx=116697 3xx=0 4xx=0 5xx=0

CPU time [s]: user 9.68 system 101.72 (user 8.7% system 91.3% total 100.0%)
Net I/O: 467.5 KB/s (3.8*10^6 bps)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终，我使用这些设置达到了每秒 6,622 个连接：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;httperf --hog --server 192.168.122.10 --num-conn 100000 --ra 20000 --timeout 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（总共创建了 100,000 个连接，并且以每秒 20,000 个连接的固定速率创建）&lt;/p&gt;

&lt;p&gt;它还有一些潜在的优势，并且拥有比‘ab‘更多的特性。但它不是我要用在这个项目里的重量级工具。我需要的是能够支持分布式多负载测试节点的工具。因此，我的下一个尝试是：Jmeter。&lt;/p&gt;

&lt;h2 id=&quot;apache-jmeter&quot;&gt;Apache Jmeter&lt;/h2&gt;

&lt;p&gt;这是一个功能齐全的 web 应用测试套件，它可以模拟真实用户的所有行为。你可以使用 Jmeter 的代理去访问你的网站，进行点击、登陆、模仿用户可以做的所有行为。Jemeter 会把这些行为记录下来作为测试用例。然后 Jmeter 会反复执行这些动作来模拟你想要的用户数量。尽管配置 Jmeter 比 ‘ab‘ 和 ’httperf‘ 复杂得多，但它是一个很有趣的工具！&lt;/p&gt;

&lt;p&gt;根据我的测试，它每秒可以产生 14,000 个请求！这绝对是一个好的进展。&lt;/p&gt;

&lt;p&gt;我使用了 Googlle Code project 上的一些插件，并且使用它们的“Stepping Threads”和“HTTP RAW”请求，最终每秒大约可以产生 30,000 个请求！但这已经达到极限了，所以还要寻找另一个工具。这里有一个我之前的 Jmeter 配置，希望可以帮助到其他人。虽然这个配置离完美相差甚远，但有时它可以满足你的要求。&lt;/p&gt;

&lt;h2 id=&quot;tsung-重型的（heavy-duty）、分布式的、多协议测试工具&quot;&gt;Tsung: 重型的（heavy-duty）、分布式的、多协议测试工具&lt;/h2&gt;

&lt;p&gt;它每秒基本可以产生 40,000 个请求，这绝对是我们想要的工具。类似于 Jmeter，你可以把一些行为记录下来在测试时运行，并且可以测试大多数的协议。比如 SSL、HHTP、WebDAV、SOAP、PostgreSQL、MySQL、LDAP 和 Jabber/XMPP。与 Jmeter 不同的是，它没有让人感到迷茫的 GUI 设置，它仅有一个 XML 配置文件，和一些你选择的分布式节点的 SSH 密钥。它的简洁和效率对我的吸引力，完全不亚于它的健壮性和可扩展性。我发现它是一个很强大的工具，在正确的配置下它可以每秒产生百万级的 HTTP 请求。&lt;/p&gt;

&lt;p&gt;除此之外，Tsung 还可以在 html 上产生图表以及输入你的测试的详细报告。测试的结果通俗易懂，并且你甚至可以把这些图片展示给你的 boss 看！&lt;/p&gt;

&lt;p&gt;在这个系列文章的剩余部分，我还会讲解这个工具。现在你可以继续浏览下面的配置说明，或者直接跳到下一页。&lt;/p&gt;

&lt;h3 id=&quot;在-centos-6-2-上安装-tsung&quot;&gt;在 CentOS 6.2 上安装 Tsung&lt;/h3&gt;

&lt;p&gt;首先，你要安装（Erlang 需要的） EPEL 源。因此，在进行下一步之前要把它安装好。安装完后，继续安装你用来产生负载的每个节点需要的包。如果你还没有在节点之间建立无密码 SSH 密钥（passwordless SSH key），那么请建立之。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;yum -y install erlang perl perl-RRD-Simple.noarch perl-Log-Log4perl-RRDs.noarch gnuplot perl-Template-Toolkit firefox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从 Github 或者 Tsung 的官网上下载最新的 Tsung。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wget http://tsung.erlang-projects.org/dist/tsung-1.4.2.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压并且编译。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;tar zxfv  tsung-1.4.2.tar.gz
cd tsung-1.4.2
./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把示例配置复制到 ~/.tsung 目录里。这是 Tsung 的配置文件和日志文件的存放地方。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cp /usr/share/doc/tsung/examples/http_simple.xml /root/.tsung/tsung.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以根据你的需求去编辑这个配置文件，或者使用我的配置文件。经过大量的尝试以及失败后，我目前的配置文件在使用 7 个分布式节点时可以每秒产生 5 百万个 HTTP 请求。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE tsung SYSTEM &amp;quot;/usr/share/tsung/tsung-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tsung&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loglevel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;notice&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;clients&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;client&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpu=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxusers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40000&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.122.2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/client&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;client&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;loadnode1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpu=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxusers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40000&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.122.2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/client&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;client&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;loadnode2&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxusers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpu=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.122.3&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/client&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;client&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;loadnode3&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxusers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpu=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.122.21&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/client&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;client&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;loadnode4&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxusers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpu=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.122.11&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/client&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;client&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;loadnode5&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxusers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpu=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.122.12&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/client&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;client&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;loadnode6&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxusers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpu=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.122.13&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/client&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;client&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;loadnode7&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxusers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpu=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.122.14&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/client&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/clients&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;servers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;server&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.122.10&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;80&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servers&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;load&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;arrivalphase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;phase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;minute&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;users&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxnumber=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;15000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;arrivalrate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/arrivalphase&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;arrivalphase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;phase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;minute&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;users&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxnumber=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;15000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;arrivalrate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/arrivalphase&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;arrivalphase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;phase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;30&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;minute&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;users&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxnumber=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;20000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;arrivalrate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/arrivalphase&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/load&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;sessions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;session&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;probability=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ts_http&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;for&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;from=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10000000&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;request&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;http&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/test.txt&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/request&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/for&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/session&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sessions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tsung&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刚开始的时候有很多东西要理解，但你一旦理解了它们后就会变得很简单。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;client&gt;: 只是简单地指定了运行 Tsung 的主机。你可以指定 Tsung 使用的 IP 和 CPU 的最大数。你可以使用 maxusers 设置节点能够模拟的用户数量上限。每一个用户都会执行我们之后定义的操作。&lt;/li&gt;
&lt;li&gt;&lt;servers&gt;: 指定了你要测试的 HTTP 服务器。我们可以使用这个选项去测试一个 IP 集群，或者一个单一的服务器。&lt;/li&gt;
&lt;li&gt;&lt;load&gt;: 定义了我们的模拟用户将会在什么时候“到达”我们的网站。以及它们达到的有多快。

&lt;ul&gt;
&lt;li&gt;&lt;arrivalphase&gt;: 在持续了 10 分钟的第一个阶段里，以 每秒 8 个用户的速率到达了 15,000 个用户。&lt;/li&gt;
&lt;li&gt;&lt;arrivalphase phase=”1″ duration=”10″ unit=”minute”&gt;&lt;/li&gt;
&lt;li&gt;&lt;users maxnumber=”15000″ arrivalrate=”8″ unit=”second”/&gt;&lt;/li&gt;
&lt;li&gt;这里还有两个 arrivalphases，它们的用户都以同样的方式达到。&lt;/li&gt;
&lt;li&gt;这些 arrivalphases 一起组成了一个 &lt;load&gt;，它控制了我们可以每秒产生多少个请求。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;session&gt; 这部分定义了一旦这些用户达到了你的网站，它们将会执行什么动作。&lt;/li&gt;
&lt;li&gt;probability 允许你定义用户可能会做的随机事件。有时他们可能点击这里，有时他们可能点击那里。所有的Probability 加起来一定要等于 100% 。&lt;/li&gt;
&lt;li&gt;在上面的配置里，用户只做一件事，所以它的 probability 等于 100% 。&lt;/li&gt;
&lt;li&gt;&lt;for from=”1″ to=”10000000″ var=”i”&gt; 这就是用户在 100% 的时间里做的事情。它们循环遍历 10,000,000 次并且 &lt;request&gt; 一个网页：/test.txt 。&lt;/li&gt;
&lt;li&gt;这个循环结构允许我们使用少量的用户连接去获取比较大的每秒请求数量。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一旦你已经很好地理解了它们，你就可以创建一个便利的别名，去快速观察 Tsung 报告。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vim ~/.bashrc
alias treport=&amp;quot;/usr/lib/tsung/bin/tsung_stats.pl; firefox report.html&amp;quot;

source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后启动 Tsung&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@loadnode1 ~] tsung start
Starting Tsung
&amp;quot;Log directory is: /root/.tsung/log/20120421-1004&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结束后观察报告&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd /root/.tsung/log/20120421-1004
treport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/6941baebgw1et0jxgkk5uj20po0nfjyv.jpg&quot; alt=&quot;imgae&quot;&gt;&lt;/p&gt;

&lt;p&gt;使用 Tsung 去规划你的集群构造&lt;/p&gt;

&lt;p&gt;现在我们拥有了一个足够强大的负载测试工具，我们可以规划余下的集群构造了：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用 Tsung 去测试一个单一的 HTTP 服务器。获取一个基本的基准。&lt;/li&gt;
&lt;li&gt;对 web 服务器进行调优，定期使用 Tsung 进行测试提高性能。&lt;/li&gt;
&lt;li&gt;对这些系统的 TCP 套接字进行调优，获取最佳的网络性能。再来一次，测试，测试，不停地测试。&lt;/li&gt;
&lt;li&gt;构造 LVS 集群，它包含了这些充分调优过的 web 服务器。&lt;/li&gt;
&lt;li&gt;使用 Tsung IP 集群对 LVS 进行压力测试。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在之后的两篇文章里，我将会向你展示如何使你的 web 服务器获取最高性能，以及怎样用 LVS 集群软件把它们整合起来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;文章选自：&lt;a href=&quot;http://blog.jobbole.com/87509/&quot;&gt;http://blog.jobbole.com/87509/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Mac下Postgres得安装和使用</title>
   <link href="http://fooyou.github.io/blog/Use-postgres-on-mac-ox-x"/>
   <updated>2015-07-19T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/Use-postgres-on-mac-ox-x</id>
   <content type="html">&lt;h2 id=&quot;安装与配置&quot;&gt;安装与配置&lt;/h2&gt;

&lt;p&gt;在 mac 下，可以利用 homebrew 直接安装 PostgreSQL：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;brew install postgresql -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;稍等片刻，PostgreSQL 就安装完成。接下来就是初始数据库，在终端执行一下命令，初始配置 PostgreSQL：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;initdb /usr/local/var/postgres -E utf8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面指定 &amp;quot;/usr/local/var/postgres&amp;quot; 为 PostgreSQL 的配置数据存放目录，并且设置数据库数据编码是 utf8，更多配置信息可以 &amp;quot;initdb --help&amp;quot; 查看。&lt;/p&gt;

&lt;p&gt;设成开机启动 PostgreSQL：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动 PostgreSQL：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关闭 PostgreSQL：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pg_ctl -D /usr/local/var/postgres stop -s -m fast
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;创建一个-postgresql-用户&quot;&gt;创建一个 PostgreSQL 用户&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;createuser username -P
#Enter password for new role:
#Enter it again:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的 username 是用户名，回车输入 2 次用户密码后即用户创建完成。更多用户创建信息可以 &amp;quot;createuser --help&amp;quot; 查看。&lt;/p&gt;

&lt;h2 id=&quot;创建数据库&quot;&gt;创建数据库&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;createdb dbname -O username -E UTF8 -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面创建了一个名为 dbname 的数据库，并指定 username 为改数据库的拥有者（owner），数据库的编码（encoding）是 UTF8，参数 &amp;quot;-e&amp;quot; 是指把数据库执行操作的命令显示出来。&lt;/p&gt;

&lt;p&gt;更多数据库创建信息可以 &amp;quot;createdb --help&amp;quot; 查看。&lt;/p&gt;

&lt;h2 id=&quot;连接数据库&quot;&gt;连接数据库&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;psql -U username -d dbname -h 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;postgresql-数据库操作&quot;&gt;PostgreSQL 数据库操作&lt;/h2&gt;

&lt;p&gt;显示已创建的数据库：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;\l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在不连接进 PostgreSQL 数据库的情况下，也可以在终端上查看显示已创建的列表：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;psql -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;连接数据库&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;\c dbname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示数据库表&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;\d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建一个名为 test 的表&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;CREATE TABLE test(id int, text VARCHAR(50));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;插入一条记录&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;INSERT INTO test(id, text) VALUES(1, &amp;#39;sdfsfsfsdfsdfdf&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询记录&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SELECT * FROM test WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新记录&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;UPDATE test SET text = &amp;#39;aaaaaaaaaaaaa&amp;#39; WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除指定的记录&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;DELETE FROM test WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除表&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;DROP TABLE test;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除数据库&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;DROP DATABASE dbname;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者利用 dropdb 指令，在终端上删除数据库&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dropdb -U user dbname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是自用的 PostgreSQL 的 php 操作类：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;HOST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;PORT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;DBNAME&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dbname&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;USER&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;PASSWORD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ext_Pgsql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//单例&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pg_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;host=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; port=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; dbname=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DBNAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; user=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; password=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Connect Failed : &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pg_last_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pg_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * 单例模式&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @param $name&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * 获取记录&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pg_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pg_fetch_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * 执行指令&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @param string $sql&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pg_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;SQL : &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pg_last_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * 获取一条记录&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pg_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pg_fetch_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;一些问题&quot;&gt;一些问题&lt;/h2&gt;

&lt;h3 id=&quot;postgresql-9-2-版本升级到-9-3-1-版本后的数据兼容问题&quot;&gt;PostgreSQL 9.2 版本升级到 9.3.1 版本后的数据兼容问题&lt;/h3&gt;

&lt;p&gt;连接 PostgreSQL 时报以下错误：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;psql: could not connect to server: Connection refused
Is the server running on host &amp;quot;127.0.0.1&amp;quot; and accepting
TCP/IP connections on port 5432?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开 PostgreSQL 的服务日志发现是 PostgreSQL 9.2 版本升级到 9.3.1 版本后的数据兼容问题：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;tail -f /usr/local/var/postgres/server.log
FATAL:  database files are incompatible with server
DETAIL:  The data directory was initialized by PostgreSQL version 9.2, which is not compatible with this version 9.3.1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于版本的数据升级问题，PostgreSQL 提供了 pg_upgrade 来做版本后的数据迁移，用法如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pg_upgrade -b 旧版本的bin目录 -B 新版本的bin目录 -d 旧版本的数据目录 -D 新版本的数据目录 [其他选项...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据迁移前，记得先关闭 PostgreSQL 的 postmaster 服务，不然会报以下错误：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;There seems to be a postmaster servicing the new cluster.
Please shutdown that postmaster and try again.
Failure, exiting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用 pg_ctl 关闭 postmaster：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pg_ctl -D /usr/local/var/postgres stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mac 下也可以这样关闭：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先备份就版本的数据（默认是在 /usr/local/var/postgres 目录）：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mv /usr/local/var/postgres /usr/local/var/postgres.old
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用 initdb 命令再初始一个数据库文件：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;initdb /usr/local/var/postgres -E utf8 --locale=zh_CN.UTF-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;NOTE：&lt;/em&gt;记得加 &amp;quot;--locale=zh_CN.UTF-8&amp;quot; 选项，不然会报以下错误：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;lc_collate cluster values do not match:  old &amp;quot;zh_CN.UTF-8&amp;quot;, new &amp;quot;en_US.UTF-8&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后运行 pg_upgrade 进行数据迁移：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pg_upgrade -b /usr/local/Cellar/postgresql/9.2.4/bin/ -B /usr/local/Cellar/postgresql/9.3.1/bin/ -d /usr/local/var/postgres.old -D /usr/local/var/postgres -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;参见：&lt;a href=&quot;http://dhq.me/mac-postgresql-install-usage&quot;&gt;http://dhq.me/mac-postgresql-install-usage&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>pip如何使用cache</title>
   <link href="http://fooyou.github.io/blog/pip-cahce-method"/>
   <updated>2015-07-09T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/pip-cahce-method</id>
   <content type="html">&lt;p&gt;maven默认状态下是把所有包都cache下来的，重复的包就不用多次下载，但是发现使用virtualenv下的pip不是，同样一个包不同环境会多次下载，极大的浪费了时间和带宽。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;https://web.archive.org/web/20081207054341/http://pip.openplans.org/news.html&quot;&gt;pip新闻&lt;/a&gt;里找到如下配置方法：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Added support for an environmental variable $PIP_DOWNLOAD_CACHE which will cache package downloads, so future installations won’t require large downloads. Network access is still required, but just some downloads will be avoided when using this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，在&lt;code&gt;~/.bash_profile&lt;/code&gt;里添加这个变量：&lt;/p&gt;

&lt;p&gt;linux下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export PIP_DOWNLOAD_CACHE=$HOME/.pip_packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MacOS下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export PIP_DOWNLOAD_CACHE=$HOME/Library/Caches/pip-packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，你的pip会像maven一样工作了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: pip7.0默认就有Cache了，不需要配置了。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>ACL-IJCNLP 2015议程术语指南</title>
   <link href="http://fooyou.github.io/blog/acl2015-prepare"/>
   <updated>2015-07-08T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/acl2015-prepare</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;7月27日&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Python3.4 使用 virtualenv</title>
   <link href="http://fooyou.github.io/blog/virtualenv-python3.4-issues"/>
   <updated>2015-07-02T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/virtualenv-python3.4-issues</id>
   <content type="html">&lt;p&gt;感觉 virtualenv 虚拟 python 环境很好用，很多同行前辈都推荐。所以刚入python的我也用了，python 2.7 装完了，用着挺酷，然后开始装 python3.4 的，装完了发现很多问题，后来又发现 python3.4 内带了这个功能，当时就一脑门黑线。真心的应该用pycharm 看一眼python3.4 都内置了神马东东。好吧，使用内置的最后终于可行了，但仍有一些待解决的问题，以后再说吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后 python3.4 是这么好用的:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir myproject
$ cd myproject
$ pyvenv venv
$ source ./venv/bin/activate
$ 
$ deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不知道 &lt;code&gt;pyvenv&lt;/code&gt; 和使用 &lt;code&gt;virtualenv&lt;/code&gt;有什么差别，至少生成的文件是不一样的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;virtualenv-3.4&lt;/code&gt; 总是不成功，不知道为什么。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python3 -m venv xxx&lt;/code&gt; 提示错误返回，不知道为什么。&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>倾诉</title>
   <link href="http://fooyou.github.io/blog/psalm-39"/>
   <updated>2015-06-15T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/psalm-39</id>
   <content type="html">&lt;p&gt;[加6:1~10] &lt;strong&gt;互相分担重担&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1弟兄们，一个人无论被任何过犯所胜，你们属灵的人都要以温柔的心灵把这样的人挽回过来；但是你自己要留心，免得你也受试探。2你们各人的重担要互相担当，如此，就将成全基督的律法。3人本来算不得什么；如果自以为是什么，就是在欺骗自己。4每个人都当省察自己的工作；这样，他就只在自我比较的时候，将有可夸耀的，而不与别人比较了，5因为每个人都要担当自己的担子。6在这话语上受教导的，就应该将一切美物与教导他的人分享。7你们不要被迷惑了！神是轻慢不得的。要知道，一个人种什么，就收什么。8因为顺着自己肉体撒种的，就会从肉体收衰朽；顺着圣灵撒种的，就会从圣灵收永恒的生命。9我们行美善的事不要丧胆；如果不放弃，到了所定的时候就会有收获。10由此可见，我们一有机会，就要向众人做美善的事，尤其要对信徒家里的人。&lt;/p&gt;

&lt;p&gt;[诗39] &lt;strong&gt;受苦者的呼求&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;大卫的诗，交给乐长耶杜顿。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1我说：“我要谨言慎行，
免犯口舌之罪。
只要身边有恶人，
我就用嚼环勒住自己的口。”&lt;/p&gt;

&lt;p&gt;2然而，我默不作声，连好话也不出口时，
内心就更加痛苦。&lt;/p&gt;

&lt;p&gt;3我心如火烧，
越沉思越烦躁，
便开口呼求：&lt;/p&gt;

&lt;p&gt;4“耶和华啊，求你让我知道
我人生的终点和寿数，
明白人生何其短暂。&lt;/p&gt;

&lt;p&gt;5你使我的生命转瞬即逝，
我的岁月在你眼中不到片刻。
人的生命不过是一丝气息，（细拉）&lt;/p&gt;

&lt;p&gt;6人生不过是幻影，
劳碌奔波却一场空，
积蓄财富却不知谁来享用。&lt;/p&gt;

&lt;p&gt;7“主啊，如今我盼望什么呢？
你是我的盼望。&lt;/p&gt;

&lt;p&gt;8求你救我脱离一切过犯，
不要让愚昧人嘲笑我。&lt;/p&gt;

&lt;p&gt;9我默然不语，一言不发，
因为我受的责罚是出于你。&lt;/p&gt;

&lt;p&gt;10求你不要再惩罚我，
你的责打使我几乎丧命。&lt;/p&gt;

&lt;p&gt;11因为人犯罪，你管教他们，
使他们所爱的被吞噬，像被虫蛀。
世人不过是一丝气息。（细拉）&lt;/p&gt;

&lt;p&gt;12“耶和华啊，求你垂听我的祷告，
倾听我的呼求，
别对我的眼泪视若无睹。
因为我在你面前只是客旅，是寄居的，
正如我的祖先。&lt;/p&gt;

&lt;p&gt;13求你宽恕我，好让我
在离世之前能重展笑容。”&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Flask系列教程之二：Template</title>
   <link href="http://fooyou.github.io/blog/flask-mega-tutorial-part-2-template"/>
   <updated>2015-06-12T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/flask-mega-tutorial-part-2-template</id>
   <content type="html">&lt;h2 id=&quot;为什么需要模板？&quot;&gt;为什么需要模板？&lt;/h2&gt;

&lt;p&gt;考虑以下需求：在我的主页上显示html的标题，可以这么做：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;/index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;nickname&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Joshua&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 占位对象，ugly!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    &amp;lt;title&amp;gt;Home Page&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    &amp;lt;h1&amp;gt;Hello, &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;nickname&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Refer: &lt;a href=&quot;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-ii-templates&quot;&gt;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-ii-templates&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>使用Flask做简单的视频播放</title>
   <link href="http://fooyou.github.io/blog/streaming-video-using-flask"/>
   <updated>2015-06-11T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/streaming-video-using-flask</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;Refer: &lt;a href=&quot;http://www.boxcontrol.net/simple-stream-your-media-with-flask-python-web-framework-tutorial.html&quot;&gt;http://www.boxcontrol.net/simple-stream-your-media-with-flask-python-web-framework-tutorial.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Flask系列教程之一：Hello World</title>
   <link href="http://fooyou.github.io/blog/flask-mega-tutorial-part-1-helloworld"/>
   <updated>2015-06-11T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/flask-mega-tutorial-part-1-helloworld</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Miguel Grinberg是个很牛的软件工程师，尤其网络工程师，用过很多的语言编写过web app，包括PHP、Ruby、Smalltalk，甚至是C++，他认为Python/Flask相接合是其中最灵活易用的组合（我也这么认为，至少现在），他还编写了一本书叫做《Flask Web Development》都是在开发中总结的技术经验，2014年出版（&lt;a href=&quot;http://cdn4.filepi.com/g/bDQKMSb/1434087411/4cdb09017d4e0bc7048aa7c0eb437cb4&quot;&gt;点我下载&lt;/a&gt;）。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;通过这系列教程，你可以使用Flask开发一个blog，然而学到的东西可远不止这些。既然有人(还是个大牛人)，分享了开发经验，那我们就站在他的肩膀上吧，开始～～&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;关于教程中使用的app——microblog&quot;&gt;关于教程中使用的App——&lt;em&gt;microblog&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;microblog将逐渐涵盖以下内容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用户管理，包括登录、会话、用户角色、profile和用户替身（user avatars）&lt;/li&gt;
&lt;li&gt;数据库管理，包括迁移处理(migration handling)&lt;/li&gt;
&lt;li&gt;网页form支持，包括值验证&lt;/li&gt;
&lt;li&gt;分页&lt;/li&gt;
&lt;li&gt;全文检索&lt;/li&gt;
&lt;li&gt;邮件提醒&lt;/li&gt;
&lt;li&gt;HTML模板&lt;/li&gt;
&lt;li&gt;多语言支持&lt;/li&gt;
&lt;li&gt;缓存以及其他性能优化&lt;/li&gt;
&lt;li&gt;开发以及产品服务器的调试技术&lt;/li&gt;
&lt;li&gt;产品服务器的安装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可见，这不仅是一个blog，而是涵盖了Web App开发的所有流程，然后你就可以用flask开发其他Web App了。&lt;/p&gt;

&lt;h2 id=&quot;系统需求&quot;&gt;系统需求&lt;/h2&gt;

&lt;p&gt;你有一台能运行Python的电脑，最好你习惯于命令行开发（terminal for linux and command prompt for Windows）和你的操作系统的基础的文件管理。&lt;/p&gt;

&lt;p&gt;还有，你得懂Python！^_^&lt;/p&gt;

&lt;h2 id=&quot;安装flask&quot;&gt;安装Flask&lt;/h2&gt;

&lt;p&gt;如果没安装Python，&lt;a href=&quot;http://python.org/download/&quot;&gt;安装&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;每个Python开发者都会强烈推荐你使用Python虚拟环境 &lt;a href=&quot;http://pypi.python.org/pypi/virtualenv&quot;&gt;Virtual environment&lt;/a&gt;来安装你的App环境，好处多多，我们也使用这个。&lt;/p&gt;

&lt;p&gt;选一个位置，创建一个microblog的文件夹，我们就在这里干活了。&lt;/p&gt;

&lt;p&gt;如果你使用Python3.4+，那么其已内置了vitual evn，直接在根目录下执行：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python -m venv flask
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他版本的Python的安装，如果在Mac上可以：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo easy_install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果在linux上，比如ubuntu，可以：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install python-virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Windows用户最让人头痛，所以最好安装Python3.4，否则最好安装pip，然后在命令行，这样安装：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等安装完毕后，在根目录下使用以下命令创建虚拟环境：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ virtualenv flask
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后到flask/bin目录下，激活虚拟环境：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ flask/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;注：关闭虚拟环境直接使用deactivate&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;开始安装：&lt;/p&gt;

&lt;p&gt;Linux, OS X, 或者Cygwin,通过以下命令安装flask和其扩展，一个一个安装：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ flask/bin/pip install flask
$ flask/bin/pip install flask-login
$ flask/bin/pip install flask-openid
$ flask/bin/pip install flask-mail
$ flask/bin/pip install flask-sqlalchemy
$ flask/bin/pip install sqlalchemy-migrate
$ flask/bin/pip install flask-whooshalchemy
$ flask/bin/pip install flask-wtf
$ flask/bin/pip install flask-babel
$ flask/bin/pip install guess_language
$ flask/bin/pip install flipflop
$ flask/bin/pip install coverage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Windows上，有点不同：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ flask\Scripts\pip install flask
$ flask\Scripts\pip install flask-login
$ flask\Scripts\pip install flask-openid
$ flask\Scripts\pip install flask-mail
$ flask\Scripts\pip install flask-sqlalchemy
$ flask\Scripts\pip install sqlalchemy-migrate
$ flask\Scripts\pip install flask-whooshalchemy
$ flask\Scripts\pip install flask-wtf
$ flask\Scripts\pip install flask-babel
$ flask\Scripts\pip install guess_language
$ flask\Scripts\pip install flipflop
$ flask\Scripts\pip install coverage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些包我们将在microblog中用到。&lt;/p&gt;

&lt;h2 id=&quot;quot-hello-world-quot&quot;&gt;&amp;quot;Hello, World&amp;quot;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Refer: &lt;a href=&quot;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&quot;&gt;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Flask网站视频直播</title>
   <link href="http://fooyou.github.io/blog/video-streaming-using-flask"/>
   <updated>2015-06-10T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/video-streaming-using-flask</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;Refer: &lt;a href=&quot;http://blog.miguelgrinberg.com/post/video-streaming-with-flask&quot;&gt;http://blog.miguelgrinberg.com/post/video-streaming-with-flask&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>使用脚本修改git提交后的user-email信息</title>
   <link href="http://fooyou.github.io/blog/git-changing-author-info"/>
   <updated>2015-06-10T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/git-changing-author-info</id>
   <content type="html">&lt;h2 id=&quot;修改用户信息&quot;&gt;修改用户信息&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://help.github.com/articles/changing-author-info/&quot;&gt;https://help.github.com/articles/changing-author-info/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>沈阳市城镇居民基本医疗保险参保就医指南</title>
   <link href="http://fooyou.github.io/blog/ShenYang-Social-Insurance"/>
   <updated>2015-06-10T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/ShenYang-Social-Insurance</id>
   <content type="html">&lt;h2 id=&quot;参保缴费&quot;&gt;参保缴费&lt;/h2&gt;

&lt;h3 id=&quot;一、参保范围&quot;&gt;一、参保范围&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;本市城镇户籍的学龄前儿童、出生三个月之内的婴儿、母体妊娠28周以上未出生的“准新生儿”及未满18周岁的非在校城镇居民；&lt;/li&gt;
&lt;li&gt;本市城镇户籍符合我市灵活就业人员身份的居民；&lt;/li&gt;
&lt;li&gt;本市范围内的全日制中等专业学校、技工学校、职业高中、普通高中、初中、小学在校学生；&lt;/li&gt;
&lt;li&gt;驻沈各类全日制高校的全日制本专科生、研究生；&lt;/li&gt;
&lt;li&gt;2008年年底前，已经认定的国有和集体破产、困难企业的在职职工；&lt;/li&gt;
&lt;li&gt;本市城镇户籍已超过退休年龄，无社会保险的非从业老年居民；&lt;/li&gt;
&lt;li&gt;外地户籍来沈务工的灵活就业人员和打零工的农民工；&lt;/li&gt;
&lt;li&gt;已参加我市城镇基本医疗保险的进城务工农民工的非在校未成年子女。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：&lt;/strong&gt;外地户籍老年人及在异地享受养老金或退休金待遇的本市户籍老年居民，不在我市居民基本医疗保险参保范围之内。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;二、办理流程&quot;&gt;二、办理流程&lt;/h3&gt;

&lt;p&gt;（一）在校学生由学校统一组织办理，可选择按年申报缴费；也可自愿选择按照参保（或续保）当年的缴费标准一次性缴纳在校学习期间个人应缴纳的基本医疗保险费。&lt;/p&gt;

&lt;p&gt;新参保学生向所在学校申请参保,提供《户口簿》原件及复印件和一寸免冠彩色照片1张；困难家庭学生还须提供《沈阳市城市居民最低生活保障金领取证》《沈阳市城市低保边缘户救助证》原件及复印件。&lt;/p&gt;

&lt;p&gt;（二）具有本市城镇户籍、符合城镇居民参保条件的新生儿及准新生儿，在我市生育定点医疗机构、户籍所在地或常年居住地社区办理参保手续。&lt;/p&gt;

&lt;p&gt;母亲怀孕28周后持《孕妇保健手册》、母亲的《户口簿》、身份证原件和复印件，到生育定点医疗机构或社区为准新生儿办理参保手续。&lt;/p&gt;

&lt;p&gt;出生三个月内的新生儿持新生儿户口簿原件及复印件，到社区办理参保手续。&lt;/p&gt;

&lt;p&gt;（三）其他城镇居民可在每年1-8月份期间到所在社区或区、县（市）民政部门按月办理当年参保业务；每年9-11月份办理当年及下一年度参保业务，如办理当年参保业务须同时办理下一年度参保业务。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;新参保
符合参保条件的居民（低保户、低保边缘户除外），直接到社区申请办理参保，提供《户口簿》、居民身份证、《中华人民共和国残疾人证》原件和复印件。低保户、低保边缘户人员，到所在区、县（市）民政部门申请办理参保。
2.续保
续保居民应向所在区、县（市）街道社区或民政部门申请办理参保，将姓名、医保卡号、身份证号码等信息及所需保费交至区、县（市）街道社区或民政部门即可。
以准新生儿身份办理参保的未成年人，在下一年度办理续保手续时，必须提供孩子的出生证明及《户口簿》的原件及复印件办理个人信息变更业务。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：&lt;/strong&gt;非本市户籍的成年人及外市后迁入本市的成年人老年人在办理参保手续时需进行二代身份证信息采集。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;三、缴费标准&quot;&gt;三、缴费标准&lt;/h3&gt;

&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg .tg-wvtg{background-color:#222222}
.tg .tg-lcoa{background-color:#222222;text-align:center}
&lt;/style&gt;

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-lcoa&quot; rowspan=&quot;3&quot;&gt;参保对象&lt;/th&gt;
    &lt;th class=&quot;tg-lcoa&quot; rowspan=&quot;3&quot;&gt;参保类别&lt;/th&gt;
    &lt;th class=&quot;tg-lcoa&quot; colspan=&quot;3&quot;&gt;基本医疗保险&lt;/th&gt;
    &lt;th class=&quot;tg-wvtg&quot; rowspan=&quot;3&quot;&gt;居民大病补充保险&lt;/th&gt;
    &lt;th class=&quot;tg-wvtg&quot; rowspan=&quot;3&quot;&gt;个人应缴合计&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-lcoa&quot; rowspan=&quot;2&quot;&gt;合计&lt;/td&gt;
    &lt;td class=&quot;tg-lcoa&quot; colspan=&quot;2&quot;&gt;其中&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-wvtg&quot;&gt;个人&lt;/td&gt;
    &lt;td class=&quot;tg-wvtg&quot;&gt;政府&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;享有本市城镇户籍的老年人&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;男60周岁、女50周岁以上,无参保单位的老年人&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;830&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;510&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;320&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;38&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;548&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;低保户及重度残疾人（二级及以上）&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;0&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;830&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;38&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;低保边缘户&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;320&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;510&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;358&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;享有本市城镇户籍的成年人&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;18周岁以上（含18周岁）及男60周岁、女50周岁以下的非从业人员&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;830&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;510&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;320&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;38&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;548&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;低保户及重度残疾人（二级及以上）&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;0&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;830&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;38&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;低保边缘户&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;320&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;510&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;358&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;在校学生及未满18周岁非在校居民&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;普通学生、非在校居民&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;400&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;80&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;320&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;10&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;低保户及重度残疾人（二级及以上）&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;0&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;400&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;10&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;低保边缘户&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;80&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;320&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;学龄前儿童&lt;br&gt;新生儿&lt;br&gt;准新生儿&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;普通学龄前儿童、新生儿、准新生儿,450&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;450&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;130&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;320&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot; rowspan=&quot;3&quot;&gt;10&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;140&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;低保户及重度残疾人（二级及以上）&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;0&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;450&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;10&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;低保边缘户&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;130&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;320&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;140&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：&lt;/strong&gt;当年9月至12月办理参保的新生儿及准新生儿，可以一次性缴纳当年及下一年度或下一年度的医疗保险费。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;四、待遇起始时间&quot;&gt;四、待遇起始时间&lt;/h3&gt;

&lt;p&gt;（一）新参保人员（民政部门新认定特困人员、二级及以上重度残疾人、未成年人除外）设立三个月待遇等待期：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每年1-8月期间办理本年度参保业务的居民，自参保缴费（缴纳一年保费）到账次月起三个月后享受医疗保险待遇，待遇享受到当年12月31日。&lt;/li&gt;
&lt;li&gt;每年9-11月份办理本年度参保业务并同时缴纳下一年度的医疗保险费的居民，待遇期为次年1月1日至12月31日。当年未缴费且只缴纳下一年度医疗保险费的待遇期为次年的4月1日至12月31日。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（二）新参保的在校学生按年度缴费，不设立待遇等待期。待遇期为当年9月1日至次年12月31日。&lt;/p&gt;

&lt;p&gt;（三）民政部门认定的特困人员自参保缴费到账次月起，享受当年城镇居民基本医疗保险待遇，至缴费年度12月31日止。&lt;/p&gt;

&lt;p&gt;（四）新生儿及准新生儿，自参保缴费到账起享受医疗保险待遇，至缴费年度12月31日止。&lt;/p&gt;

&lt;p&gt;（五）重度残疾人（二级及以上）自参保缴费到账次月起，享受城镇居民基本医疗保险待遇。&lt;/p&gt;

&lt;h3 id=&quot;五、户籍新迁入本市且超过法定退休年龄的人员&quot;&gt;五、户籍新迁入本市且超过法定退休年龄的人员&lt;/h3&gt;

&lt;p&gt;户籍从外地迁入本市并符合参保条件且超过法定退休年龄的人员，除持《户口簿》、居民身份证原件及复印件外，还应同时提供原户籍地社会保险部门开具的不享受基本医疗保险待遇及养老金或退休金待遇的证明。&lt;/p&gt;

&lt;h3 id=&quot;六、视同缴费年限&quot;&gt;六、视同缴费年限&lt;/h3&gt;

&lt;p&gt;大学生在校期间参加城镇居民基本医疗保险的缴费年限视同我市城镇职工基本医疗保险的缴费年限，与大学生就业后参加我市城镇职工基本医疗保险的缴费年限连续计算。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;医疗保险待遇&quot;&gt;医疗保险待遇&lt;/h2&gt;

&lt;p&gt;参保居民持本人医疗保险卡和《就医手册》可自主选择到定点医疗机构就医。在办理住院手续时，需将医疗保险卡、《就医手册》交定点医疗机构留存，并按规定交纳住院预交金，预交金主要用于支付统筹基金起付标准及个人自付比例部分。出院结算时，只需缴纳个人负担费用；应由统筹基金支付的费用，由沈阳市社会医疗保险管理局与定点医院直接结算。&lt;/p&gt;

&lt;h3 id=&quot;七、门、急诊待遇&quot;&gt;七、门、急诊待遇&lt;/h3&gt;

&lt;p&gt;（一）急诊：因急危重症在门（急）诊抢救或在120急救车上实施紧急救治者，抢救期间符合基本医疗保险政策支付范围的医疗费由统筹基金按60％比例报销。&lt;/p&gt;

&lt;p&gt;（二）门诊规定病种：患有门诊规定病种疾病的参保人员可持本人近2年病历资料、医疗保险卡、《就医手册》、近期免冠一寸彩照2张、身份证原件及复印件2张，到指定医院进行申报，经医疗专家组审核鉴定合格后，由市医保局核发《沈阳市城镇居民基本医疗保险门诊规定病种医疗证》。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在校学生及未成年人门诊规定病种范围：恶性肿瘤放疗、化疗（仅限膀胱灌注）、尿毒症透析、器官移植抗排斥反应治疗、慢性病毒性丙型肝炎抗病毒治疗、I型糖尿病和伴有并发症的II型糖尿病、恶性肿瘤抗肿瘤药物治疗、慢性病毒性乙型肝炎及其引起的代偿期肝硬化抗病毒治疗、系统性红斑狼疮、银屑病（脓疱型银屑病、关节病型银屑病、红皮病型银屑病）、再生障碍性贫血、血友病、乳腺癌和前列腺癌内分泌治疗、重症肌无力、肺源性心脏病（心功能3级）、风湿性心脏病（心功能3级）、类风湿性关节炎、偏执型精神病、血管支架术后抗凝治疗（限术后一年）、冠状动脉旁路移植术后（限术后一年）、慢性肾功能不全（失代偿期）药物治疗、脑垂体泌乳素瘤、白塞氏病、多发性肌炎和皮肌炎、真性红细胞增多症、脑垂体前叶功能减退、进行性核上性麻痹、癫痫。&lt;/li&gt;
&lt;li&gt;成年和老年居民门诊规定病种范围：恶性肿瘤放疗、化疗（仅限膀胱灌注）、尿毒症透析、器官移植抗排斥反应治疗、慢性病毒性丙型肝炎抗病毒治疗、陈旧性心肌梗塞、伴有并发症的糖尿病、3期高血压、恶性肿瘤抗肿瘤药物治疗、慢性病毒性乙型肝炎及其引起的代偿期肝硬化抗病毒治疗、系统性红斑狼疮、银屑病（脓疱型银屑病、关节病型银屑病、红皮病型银屑病）、骨髓增生异常综合症、血友病、乳腺癌和前列腺癌内分泌治疗、重症肌无力、肺源性心脏病（心功能3级）、风湿性心脏病（心功能3级）、类风湿性关节炎、偏执型精神病、血管支架术后抗凝治疗（限术后一年）、冠状动脉旁路移植术后（限术后一年）、慢性肾功能不全（失代偿期）药物治疗、脑垂体泌乳素瘤、白塞氏病、多发性肌炎和皮肌炎、真性红细胞增多症、脑垂体前叶功能减退、进行性核上性麻痹、癫痫。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;门诊规定病种统筹基金报销比例&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center&quot;&gt;定点医疗机构等级&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;统筹基金报销比例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;社区卫生服务站&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;85％&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;一级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;80％&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;二级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;70％&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;三级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;60％&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;特大型三级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;55％&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（三）门诊统筹待遇&lt;/p&gt;

&lt;p&gt;参加我市城镇居民基本医疗保险的在校学生及其他未成年人、成年居民、老年居民均可享受门诊统筹待遇。参保居民（大学生由所在学校统一办理）于每年10月份，由所在街道和社区或区、县（市）民政部门统一组织办理下一年参保、续保手续时，本着就近的原则，可将户籍所在地或居住地的社区卫生服务中心（站）或乡镇卫生院作为本人门诊统筹就医的定点医疗机构。一个自然年度内，发生的符合基本医疗保险支付范围的普通门（急）诊医疗费用和意外伤害门诊医疗费用统筹基金按规定予以支付。&lt;/p&gt;

&lt;p&gt;统筹基金起付标准为每月20元（在校大学生不设起付标准），起付标准以上符合规定的门诊医疗费用统筹基金支付比例为55％，月最高支付限额为80元。&lt;/p&gt;

&lt;p&gt;居民门诊统筹实行定点就医管理。居民门诊统筹定点医疗机构一经选定，原则上一个自然年度内不得变更，下一自然年度可重新选择门诊统筹定点医院。在非选定的门诊统筹定点医疗机构门诊就医，不享受门诊统筹待遇。&lt;/p&gt;

&lt;h3 id=&quot;八、住院待遇&quot;&gt;八、住院待遇&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;定点医疗机构住院治疗；&lt;/li&gt;
&lt;li&gt;因急诊抢救在非定点医疗机构住院治疗；&lt;/li&gt;
&lt;li&gt;经审批后转往外地就医治疗；&lt;/li&gt;
&lt;li&gt;本市户籍的在校学生及其他未成年外出探亲期间住院治疗；&lt;/li&gt;
&lt;li&gt;非本市户籍的在校学生寒暑假及法定假日回家探亲、在校学生在外地实习期间在当地住院治疗；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;成年及老年居民外出探亲期间因急诊急救住院治疗。&lt;/p&gt;

&lt;p&gt;沈阳市城镇居民基本医疗保险住院医疗费用报销比例一览表&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;费用发生地&lt;/th&gt;
&lt;th&gt;定点医疗机构等级或发生情况&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;起付标准（元/次）&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;-&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;报销比例&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;-&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;在校学生及未满18周岁非在校居民&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;年满18周岁的成年及老年居民&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;在校学生及未满18周岁非在校居民&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;年满18周岁的成年及老年居民&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;市级统筹范围内&lt;/td&gt;
&lt;td&gt;一级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;90%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;90%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;区属二级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;150&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;300&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;88%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;85%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;市属二级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;400&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;85%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;80%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;三级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;300&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;600&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;78%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;75%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;特大型三级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;500&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;900&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;73%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;70%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;外省市&lt;/td&gt;
&lt;td&gt;本市户籍的在校学生及其他未成年人外出探亲期间&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;500&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;73%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;非本市户籍的在校学生寒暑假和法定假回家探亲、在校学生在外地实习期间&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;500&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;73%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;成年及老年居民外出探亲期间急诊住院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;900&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;70%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;转外就医&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;1000&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;1000&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;60%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;60%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;*&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;统筹基金报销比例不包括乙类药品、乙类诊疗项目和医疗服务设施项目先行自付部分及丙类药品、丙类诊疗项目和医疗服务设施项目自费部分。*&lt;/li&gt;
&lt;li&gt;统筹基金起付标准指住院时在启动统筹基金前，必须由个人支付的住院医疗费用金额（不含自费和乙类药品及特殊检查、特殊治疗的个人先行支付比例的费用）。精神病、急慢性传染性肝炎、浸润型肺结核、慢性纤维空洞型肺结核4种疾病不设立统筹基金起付标准；恶性肿瘤患者在一个自然年度内多次住院，每年只需交纳首次住院的统筹基金起付标准。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;九、家庭病床待遇&quot;&gt;九、家庭病床待遇&lt;/h3&gt;

&lt;p&gt;患有家庭病床病种疾病的参保人员，符合住院条件、本人生活不能完全自理、到定点医院住院确有困难确需系统治疗的可申请办理家庭病床。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;病种范围：&lt;/strong&gt;癌症（晚期）;糖尿病并发症;心脑血管疾病及并发症;慢性肺心病;精神类疾病。&lt;/p&gt;

&lt;p&gt;沈阳市城镇居民家庭病床医疗费用报销比例一览表&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;定点医疗机构等级&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;起付标准（元/次）&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;报销比例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;一级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;85%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;区属二级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;150&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;80%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;市属二级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;75%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;三级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;300&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;70%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;特大型三级医院&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;450&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;65%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;十、统筹基金最高支付限额&quot;&gt;十、统筹基金最高支付限额&lt;/h3&gt;

&lt;p&gt;成年居民及老年居民基本医疗保险统筹基金年最高支付限额为8万元。&lt;/p&gt;

&lt;p&gt;在校学生和未成年人居民基本医疗保险统筹基金年最高支付限额12.5万元。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：&lt;/strong&gt;上述内容如遇政策调整，以新政策为准。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;温馨提示:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果您想进一步了解我市基本医疗保险的政策规定及经办流程，可登陆沈阳市社会医疗保险管理局网站（&lt;a href=&quot;http://www.syyb.gov.cn%EF%BC%89&quot;&gt;http://www.syyb.gov.cn）&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;沈阳市社会医疗保险管理局城镇居民参保管理处电话：62161112&lt;/p&gt;

&lt;p&gt;社会保障卡挂失及查询电话：96856&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;沈阳市社会医疗保险管理局&lt;/p&gt;

&lt;p&gt;二〇一四年十二月&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>为git仓库添加多个远程url地址</title>
   <link href="http://fooyou.github.io/blog/add-multiple-url-to-git-remote"/>
   <updated>2015-06-09T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/add-multiple-url-to-git-remote</id>
   <content type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;一般来说，我们为git增加远程库，一般都是:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote add origin &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是你可能想要把你的本地的git库，既push到github上，又push到开源中国的Git@OSC上，怎么解决呢。&lt;/p&gt;

&lt;p&gt;有人可能会用两个甚至多个远程库，即再添加一个远程库&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote add origin2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这个方法很低效，因为你要git push 两次才能完成push到两个库。&lt;/p&gt;

&lt;p&gt;其实还有一个方法，git的一个远程库 可以对应多个地址，即我能让远程库origin拥有多个url地址。&lt;/p&gt;

&lt;p&gt;方法如下：&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;使用流程&quot;&gt;使用流程&lt;/h2&gt;

&lt;p&gt;首先，我们从零开始， 
假设你现在想要增加3个远程库地址，分别为 :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git.oschina.net/shede333/swioslibary.git&quot;&gt;https://git.oschina.net/shede333/swioslibary.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git.oschina.net/shede333/swscrollbar.git&quot;&gt;https://git.oschina.net/shede333/swscrollbar.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shede333/CoreAnimationTestSW.git&quot;&gt;https://github.com/shede333/CoreAnimationTestSW.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先，先增加第一个地址:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote add origin &amp;lt;url1&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后增加第二个地址:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote set-url --add origin &amp;lt;url2&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加第三个地址:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote set-url --add origin &amp;lt;url3&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… 依次类推&lt;/p&gt;

&lt;p&gt;这样就完成了添加多个地址到origin库中了， 
以后只要使用git push origin master 就可以一次性push到3各库里面了(使用git push也可)&lt;/p&gt;

&lt;h2 id=&quot;原理解析&quot;&gt;原理解析&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote set-url --add origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是往当前git项目的config文件里增加一行记录 
config文件打开方式有两种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用命令git config -e&lt;/li&gt;
&lt;li&gt;在当前git项目的根目录下，文件位于 .git/config (.git目录为隐藏文件)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;你每执行一次 &lt;code&gt;git remote set-url --add origin&lt;/code&gt; 就会增加一行。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;: 显示当前所有远程库的详细信息，显示格式为 远程库名字 url连接(类型)&lt;/p&gt;

&lt;p&gt;你直接在config里面直接添加url来修改也是可以的，不必去执行git命令。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;注意&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用git push origin master时，你可以push到origin的多个url地址， &lt;/p&gt;

&lt;p&gt;但是使用 git pull时，只能拉取origin里的一个url地址(即fetch-url，如上图)，这个fetch-url默认为 ** 你添加的到origin的第一个地址**， &lt;/p&gt;

&lt;p&gt;如果你想更改，只需要更改config文件里，那三个url的顺序即可，fetch-url会直接对应排行第一的那个utl连接。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://my.oschina.net/shede333/blog/299032&quot;&gt;http://my.oschina.net/shede333/blog/299032&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>在Ubuntu或Debian上安装OpenCV</title>
   <link href="http://fooyou.github.io/blog/Install-OpenCV-on-ubuntu-or-debian"/>
   <updated>2015-06-08T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/Install-OpenCV-on-ubuntu-or-debian</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 本文档记录的内容只在Ubuntu 14.04 LTS上测试过, OpenCV版本为3.0.0.&lt;/p&gt;

&lt;p&gt;安装OpenCV的过程很长，但是相对简单，可以源安装或者手动安装，因为要使用最新版且使用python，所以我选择的是手动安装。&lt;/p&gt;

&lt;h2 id=&quot;从软件源安装opencv&quot;&gt;从软件源安装OpenCV&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get install libopencv-dev python-opencv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样安装通常不能安装最新版本，而是最稳定的版本。&lt;/p&gt;

&lt;h2 id=&quot;手动安装opencv&quot;&gt;手动安装OpenCV&lt;/h2&gt;

&lt;p&gt;安装最新的OpenCV前，要确保卸载已存在的包，使用命令&lt;code&gt;sudo apt-get autoremove libopencv-dev python-opencv&lt;/code&gt;，然后按如下步骤：&lt;/p&gt;

&lt;h3 id=&quot;1-确保ubuntu或者debian已更新&quot;&gt;1.确保Ubuntu或者Debian已更新&lt;/h3&gt;

&lt;p&gt;打开终端，执行如下命令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade &amp;amp;&amp;amp; sudo apt-get dist-upgrade &amp;amp;&amp;amp; sudo apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-安装依赖包&quot;&gt;2.安装依赖包&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Build工具：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get install build-essential cmake
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;GUI：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get install qt5-default libvtk6-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;媒体 I/O：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get install zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;视频 I/O：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get install libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;并行和线性代数库：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get install libtbb-dev libeigen3-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get install python-dev python-tk python-numpy python3-dev python3-tk python3-numpy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Java：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get install ant default-jdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;文档：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo apt-get install doxygen sphinx-common texlive-latex-extra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;3-下载并解压源码：&quot;&gt;3.下载并解压源码：&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Itseez/opencv/archive/3.0.0.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-编译和安装opencv：&quot;&gt;4.编译和安装OpenCV：&lt;/h3&gt;

&lt;p&gt;在源码根目录下，创建build文件夹，如下步骤：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ mkdir build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ cd build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DWITH_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ make -j4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;恭喜！安装完成。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jinja2学习记录</title>
   <link href="http://fooyou.github.io/blog/jinja2"/>
   <updated>2015-06-04T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/jinja2</id>
   <content type="html">&lt;p&gt;&lt;em&gt;TODO: 增加Jinja2的介绍和预备知识&lt;/em&gt;
官网：&lt;a href=&quot;http://github.com/mitsuhiko/jinja2/&quot;&gt;http://github.com/mitsuhiko/jinja2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TODO: 增加安装过程&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基本API使用&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>linux压缩/解压缩命令</title>
   <link href="http://fooyou.github.io/blog/GNU-tar-command"/>
   <updated>2015-05-27T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/GNU-tar-command</id>
   <content type="html">&lt;p&gt;&lt;em&gt;linux 常用解压命令：&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;压缩包&lt;/th&gt;
&lt;th&gt;解压命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*.tar&lt;/td&gt;
&lt;td&gt;tar -xvf *.tar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.tar.gz&lt;/td&gt;
&lt;td&gt;tar -xzvf *.tar.gz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.tar.bz2&lt;/td&gt;
&lt;td&gt;tar -xjvf *.tar.bz2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.tar.Z&lt;/td&gt;
&lt;td&gt;tar -xZvf *.tar.Z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.gz&lt;/td&gt;
&lt;td&gt;gunzip *.gz / gzip -d *.gz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.bz2&lt;/td&gt;
&lt;td&gt;bzip2 -d *.bz2 / bunzip2 *.bz2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.Z&lt;/td&gt;
&lt;td&gt;uncompress *.Z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.rar&lt;/td&gt;
&lt;td&gt;unrar e *.rar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.zip&lt;/td&gt;
&lt;td&gt;unzip *.zip&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;tar命令&quot;&gt;tar命令&lt;/h2&gt;

&lt;p&gt;主操作模式：&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;全称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-A&lt;/td&gt;
&lt;td&gt;--catenate, --concatenate&lt;/td&gt;
&lt;td&gt;追加 tar 文件至归档&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>ImportError: bad magic number in 'time': b'\x03\xf3\r\n'</title>
   <link href="http://fooyou.github.io/blog/importerror-bad-magic-number-in-time-bx03xf3rn"/>
   <updated>2015-05-13T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/importerror-bad-magic-number-in-time-bx03xf3rn</id>
   <content type="html">&lt;p&gt;编写的Python脚本，用Python3一直好用，有时用Python2.7调用也好用，但今天竟然发生了这个错误：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    ImportError: bad magic number in &amp;#39;time&amp;#39;: b&amp;#39;\x03\xf3\r\n&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不知道这是神马错误。Google之，如下解决：&lt;/p&gt;

&lt;p&gt;把运行脚本产生的.pyc删掉，再运行就OK了。&lt;/p&gt;

&lt;p&gt;据说这是Python升级到3.4.2，切用之前版本运行过包含&lt;code&gt;import datatime&lt;/code&gt;模块所导致的。&lt;/p&gt;

&lt;p&gt;Anyway, the problem is solved!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>油盐酱醋谈生活</title>
   <link href="http://fooyou.github.io/blog/mind-through"/>
   <updated>2015-05-04T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/mind-through</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;生活本无事，庸人自扰之&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人活着很简单，睁开眼睛看世界，闭上眼睛观内心。&lt;/p&gt;

&lt;p&gt;每个人都封闭的活在自己的世界里，通过五官我们可以接收到外面世界的信息。然后大脑和内心不断的学习这些信息，再加上人先天拥有的思维、道德、伦理等能力，这样人自我的意识体就不断增长，直到形成理性体系（三观）&lt;/p&gt;

&lt;p&gt;先天遗传是个玄妙之极的东西，人类现在可以制造很多东西，但是若说人能创造出什么东西，没有。因为创造是从无到有的。&lt;/p&gt;

&lt;p&gt;造物主创造世界，制订了各样的规则，小到分子原子，大到星系宇宙，智到各样的动物于人。其中各样的奇妙，连造物主都觉得很满意，甚好。[创1:31]“神看着一切所造的都甚好。”&lt;/p&gt;

&lt;p&gt;理性体系的成长会筑起保护自己的防护网，外边的信息必须经过防护网才能达到内心，这样人才有能力决断是非曲直，才有能力决策。&lt;/p&gt;

&lt;p&gt;我们需要去判断是非曲直吗？废话，活在这个世界没有基本的是非曲直和道德的判断，岂不成了傻子，看看&lt;a href=&quot;http://www.monticello.org/site/visit/50-years-naturalization-ceremonies-monticello&quot;&gt;赛根&lt;/a&gt;美国一小学在入学典礼上的讲话：“……我保证使用我的批评才能，我保证发展我的独立思想，我保证接受教育，从而使自己能够判断……”&lt;/p&gt;

&lt;p&gt;总之教育的目的就是建立人的理性思维体系，去完成内心和外界的沟通。&lt;/p&gt;

&lt;p&gt;然而我理解的基督教义是如何看待这些的呢？&lt;/p&gt;

&lt;p&gt;创世纪，神对亚当说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[创2:16]“园中各样树上的果子，你可以随意吃，只是分别善恶树上的果子，你不可吃，因为你吃的日子必定死！”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意这个时候，上帝还没有取亚当的肋骨造女人，亚当就像一个被父亲十分珍视的小孩子，上帝会时不时去看亚当的状况，亚当正和狮子老虎一起玩耍，亚当正在为空中的飞鸟起名字，亚当正在河里游泳，亚当在吃果树上的果子。亚当也记住了神的话，那棵树上的果子不能吃，所以从来不去思想为什么不能吃，不去想吃了怎么就分别善恶了。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;不可言说的纠结：禁不住让我想起阴阳图，物极必反的道理，正是上帝对亚当极致的爱，上帝为亚当创造了夏娃，然后神和人因为人的罪产生了隔阂；而也正是亚当对夏娃极致的爱，导致亚当容许夏娃吃了禁果，当夏娃把果子给亚当时，亚当不顾神的话也吃了&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;至今的困惑：一边是父母，一边是妻子都是男人深爱的人，当他们在男人身上有冲突时怎么平衡？救娘还是救媳妇？如果世界是纯理性的很容易选择，怎么计算媳妇都比娘重要，可世界是纯理性的吗？明显不是&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;正像我们做父母的教育两三岁的孩子，他们的一切我们都那么喜欢，但我们必须告诉他们怎么远离危险，多么想我们说什么他们就能听什么，可这又怎么可能？&lt;/p&gt;

&lt;p&gt;我所理解的基督教义里关于神和人的关系里有一条就是人要顺服神的一切话，顺服即蒙福。这时的亚当就是这么一个得神喜悦的人，完全的顺服神的一切话。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“神的仆人是神所使用的器皿，是神和人沟通中所使用的工具”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这在世人看来尤其的愚拙，那么长时间教育学习养成的理性价值体系，全要倒空，要完全的顺服神的话，这岂不比传销洗脑还要厉害吗？要知道灵性的缺失使人根本没有办法想象与神同在是何等的奇妙，神的意念是何等的高过人的意念。&lt;/p&gt;

&lt;p&gt;人始祖犯罪后，罪和死便临到人间，人的灵性随着罪的缠累和对死的恐惧逐渐减少，以致到了不能和神沟通的地步，罪使人和神彻底的隔绝。人的灵性也逐渐的泯灭，失去神同在的人随后开始了在罪性和灵性间寻找自我救赎的苦难史。然而人是无法自我救赎的神即赐下祂的独生子作为全人类的拯救，并且这事已经成了，但进天国的路是窄的，许多自以为得了救赎的基督徒结果都会被神拒绝。&lt;/p&gt;

&lt;p&gt;首先[罗3:23]“人人都犯了罪，亏缺了神的荣耀”、[罗3:10]“没有义人，连一个都没有”所以“人不可论断人，凡论断别人的必被论断”。圣经是拿来律己的，而不是要求别人的。&lt;/p&gt;

&lt;p&gt;写的有点乱，谁又规定写东西一定要说出个主题呢？天马行空就是我风格。&lt;/p&gt;

&lt;p&gt;静下心来，静下来吧，安静下来吧，细细的听主的声音：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“论到那些已经蒙了光照、尝过天恩的滋味、又于圣灵有分，并尝过神善道的滋味、觉悟来世权能的人，若是离弃道理，就不能叫他们从新懊悔了。因为他们把神的儿子重订十字架，明明地羞辱他。就如一块田地，吃过屡次下的雨水，生长菜蔬，合乎耕种的人用，就从神得福；若长荆棘和蒺藜，必被废弃，近于咒诅，结局就是焚烧。”&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Scrapy 学习笔记（一）</title>
   <link href="http://fooyou.github.io/blog/scrapy-simple-learning-01"/>
   <updated>2015-04-24T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/scrapy-simple-learning-01</id>
   <content type="html">&lt;p&gt;本文以dmoz.org网站为例，介绍简单的scrapy爬虫的创建。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;创建项目&quot;&gt;创建项目&lt;/h2&gt;

&lt;p&gt;Scrapy必须要创建项目先，然后在项目目录下方能工作。如下命令创建：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ scrapy startproject tutorial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后，你能看到新建的scrapy工程目录：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;└── tutorial
    ├── scrapy.cfg            ：项目的配置文件
    └── tutorial          ：该项目的Python模块。之后将在此加入代码。
        ├── __init__.py
        ├── items.py      ：项目中的item文件。
        ├── pipelines.py  ：项目中的piplines文件。
        ├── settings.py       ：项目的设置文件。
        └── spiders           ：放置spider代码的目录
            └── __init__.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;定义item&quot;&gt;定义Item&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Item&lt;/em&gt; 是保存爬取到的数据的容器；其使用方法和python字典类似， 并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。&lt;/p&gt;

&lt;p&gt;首先根据需要从dmoz.org获取到的数据对item进行建模。 我们需要从dmoz中获取名字，url，以及网站的描述。 对此，在item中定义相应的字段。编辑 tutorial 目录中的 items.py 文件:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DmozItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;编写第一个爬虫（spider）&quot;&gt;编写第一个爬虫（Spider）&lt;/h2&gt;

&lt;p&gt;Spider是用户编写用于从单个网站(或者一些网站)爬取数据的类。&lt;/p&gt;

&lt;p&gt;其包含了一个用于下载的初始URL，如何跟进网页中的链接以及如何分析页面中的内容， 提取生成 &lt;code&gt;item&lt;/code&gt; 的方法。&lt;/p&gt;

&lt;p&gt;为了创建一个Spider，您必须继承 &lt;code&gt;scrapy.Spider&lt;/code&gt; 类， 且定义以下三个属性:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_urls&lt;/code&gt;：包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse()&lt;/code&gt;：是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 &lt;code&gt;Response&lt;/code&gt;对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 &lt;code&gt;Request&lt;/code&gt; 对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下为我们的第一个Spider代码，保存在 &lt;code&gt;tutorial/spiders&lt;/code&gt; 目录下的 &lt;code&gt;dmoz_spider.py&lt;/code&gt; 文件中:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DmozSpider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dmoz&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allowed_domains&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dmoz.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;爬取&quot;&gt;爬取&lt;/h2&gt;

&lt;p&gt;进入项目的根目录，执行下列命令启动spider:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;scrapy crawl dmoz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;crawl dmoz&lt;/code&gt; 启动用于爬取 &lt;code&gt;dmoz.org&lt;/code&gt; 的spider，您将得到类似的输出:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;2015-04-24 15:45:12+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: tutorial)
2015-04-24 15:45:12+0800 [scrapy] INFO: Optional features available: ssl, http11, django
2015-04-24 15:45:12+0800 [scrapy] INFO: Overridden settings: {&amp;#39;NEWSPIDER_MODULE&amp;#39;: &amp;#39;tutorial.spiders&amp;#39;, &amp;#39;SPIDER_MODULES&amp;#39;: [&amp;#39;tutorial.spiders&amp;#39;], &amp;#39;BOT_NAME&amp;#39;: &amp;#39;tutorial&amp;#39;}
2015-04-24 15:45:12+0800 [scrapy] INFO: Enabled extensions: LogStats, TelnetConsole, CloseSpider, WebService, CoreStats, SpiderState
2015-04-24 15:45:12+0800 [scrapy] INFO: Enabled downloader middlewares: HttpAuthMiddleware, DownloadTimeoutMiddleware, UserAgentMiddleware, RetryMiddleware, DefaultHeadersMiddleware, MetaRefreshMiddleware, HttpCompressionMiddleware, RedirectMiddleware, CookiesMiddleware, HttpProxyMiddleware, ChunkedTransferMiddleware, DownloaderStats
2015-04-24 15:45:12+0800 [scrapy] INFO: Enabled spider middlewares: HttpErrorMiddleware, OffsiteMiddleware, RefererMiddleware, UrlLengthMiddleware, DepthMiddleware
2015-04-24 15:45:12+0800 [scrapy] INFO: Enabled item pipelines: 
2015-04-24 15:45:12+0800 [dmoz] INFO: Spider opened
2015-04-24 15:45:12+0800 [dmoz] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)
2015-04-24 15:45:12+0800 [scrapy] DEBUG: Telnet console listening on 127.0.0.1:6023
2015-04-24 15:45:12+0800 [scrapy] DEBUG: Web service listening on 127.0.0.1:6080
2015-04-24 15:45:13+0800 [dmoz] DEBUG: Crawled (200) &amp;lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&amp;gt; (referer: None)
2015-04-24 15:45:14+0800 [dmoz] DEBUG: Crawled (200) &amp;lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&amp;gt; (referer: None)
2015-04-24 15:45:14+0800 [dmoz] INFO: Closing spider (finished)
2015-04-24 15:45:14+0800 [dmoz] INFO: Dumping Scrapy stats:
    {&amp;#39;downloader/request_bytes&amp;#39;: 516,
     &amp;#39;downloader/request_count&amp;#39;: 2,
     &amp;#39;downloader/request_method_count/GET&amp;#39;: 2,
     &amp;#39;downloader/response_bytes&amp;#39;: 16670,
     &amp;#39;downloader/response_count&amp;#39;: 2,
     &amp;#39;downloader/response_status_count/200&amp;#39;: 2,
     &amp;#39;finish_reason&amp;#39;: &amp;#39;finished&amp;#39;,
     &amp;#39;finish_time&amp;#39;: datetime.datetime(2015, 4, 24, 7, 45, 14, 17440),
     &amp;#39;log_count/DEBUG&amp;#39;: 4,
     &amp;#39;log_count/INFO&amp;#39;: 7,
     &amp;#39;response_received_count&amp;#39;: 2,
     &amp;#39;scheduler/dequeued&amp;#39;: 2,
     &amp;#39;scheduler/dequeued/memory&amp;#39;: 2,
     &amp;#39;scheduler/enqueued&amp;#39;: 2,
     &amp;#39;scheduler/enqueued/memory&amp;#39;: 2,
     &amp;#39;start_time&amp;#39;: datetime.datetime(2015, 4, 24, 7, 45, 12, 133706)}
2015-04-24 15:45:14+0800 [dmoz] INFO: Spider closed (finished)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看包含 [dmoz] 的输出，可以看到输出的log中包含定义在 start_urls 的初始URL，并且与spider中是一一对应的。在log中可以看到其没有指向其他页面( (referer:None) )。&lt;/p&gt;

&lt;p&gt;除此之外，更有趣的事情发生了。就像我们 parse 方法指定的那样，有两个包含url所对应的内容的文件被创建了: Book , Resources 。&lt;/p&gt;

&lt;p&gt;** 刚才发生了什么 **&lt;/p&gt;

&lt;p&gt;Scrapy为Spider的 &lt;code&gt;start_urls&lt;/code&gt; 属性中的每个URL创建了 &lt;code&gt;scrapy.Request&lt;/code&gt; 对象，并将 &lt;code&gt;parse&lt;/code&gt; 方法作为回调函数(callback)赋值给了Request。&lt;/p&gt;

&lt;p&gt;Request对象经过调度，执行生成 &lt;code&gt;scrapy.http.Response&lt;/code&gt; 对象并送回给spider parse() 方法。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;提取item&quot;&gt;提取Item&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Selectors选择器简介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从网页中提取数据有很多方法。Scrapy使用了一种基于 &lt;code&gt;XPath&lt;/code&gt; 和 &lt;code&gt;CSS&lt;/code&gt; 表达式机制: &lt;code&gt;Scrapy Selectors&lt;/code&gt; 。 关于selector和其他提取机制的信息请参考 Selector文档 。&lt;/p&gt;

&lt;p&gt;这里给出XPath表达式的例子及对应的含义:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/html/head/title:&lt;/code&gt; 选择HTML文档中 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 标签内的 &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/html/head/title/text():&lt;/code&gt; 选择上面提到的 &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 元素的文字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//td:&lt;/code&gt; 选择所有的 &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//div[@class=&amp;quot;mine&amp;quot;]:&lt;/code&gt; 选择所有具有 &lt;code&gt;class=&amp;quot;mine&amp;quot;&lt;/code&gt; 属性的 &lt;code&gt;div&lt;/code&gt; 元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上边仅仅是几个简单的XPath例子，XPath实际上要比这远远强大的多。 如果您想了解的更多，我们推荐 这篇&lt;a href=&quot;http://www.w3schools.com/XPath/default.asp&quot;&gt;XPath教程&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;为了配合XPath，Scrapy除了提供了 Selector 之外，还提供了方法来避免每次从response中提取数据时生成selector的麻烦。&lt;/p&gt;

&lt;p&gt;Selector有四个基本的方法(点击相应的方法可以看到详细的API文档):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xpath()&lt;/code&gt;: 传入xpath表达式，返回该表达式所对应的所有节点的selector list列表 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;css()&lt;/code&gt;: 传入CSS表达式，返回该表达式所对应的所有节点的selector list列表.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extract()&lt;/code&gt;: 序列化该节点为unicode字符串并返回list。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re()&lt;/code&gt;: 根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在查看了网页的源码后，您会发现网站的信息是被包含在 第二个 &lt;ul&gt; 元素中。&lt;/p&gt;

&lt;p&gt;我们可以通过这段代码选择该页面中网站列表里所有 &lt;li&gt; 元素:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sel.xpath(&amp;#39;//ul/li&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;网站的描述:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sel.xpath(&amp;#39;//ul/li/text()&amp;#39;).extract()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;网站的标题:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sel.xpath(&amp;#39;//ul/li/a/text()&amp;#39;).extract()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以及网站的链接:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sel.xpath(&amp;#39;//ul/li/a/@href&amp;#39;).extract()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之前提到过，每个 .xpath() 调用返回selector组成的list，因此我们可以拼接更多的 .xpath() 来进一步获取某个节点。我们将在下边使用这样的特性:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;//ul/li&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a/text()&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a/@href&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;text()&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在我们的spider中加入这段代码:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import scrapy

class DmozSpider(scrapy.Spider):
    name = &amp;quot;dmoz&amp;quot;
    allowed_domains = [&amp;quot;dmoz.org&amp;quot;]
    start_urls = [
        &amp;quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&amp;quot;,
        &amp;quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&amp;quot;
    ]

    def parse(self, response):
        for sel in response.xpath(&amp;#39;//ul/li&amp;#39;):
            title = sel.xpath(&amp;#39;a/text()&amp;#39;).extract()
            link = sel.xpath(&amp;#39;a/@href&amp;#39;).extract()
            desc = sel.xpath(&amp;#39;text()&amp;#39;).extract()
            print title, link, desc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在尝试再次爬取dmoz.org，您将看到爬取到的网站信息被成功输出:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;scrapy crawl dmoz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;使用item&quot;&gt;使用Item&lt;/h2&gt;
</content>
 </entry>
 
 <entry>
   <title>virtualenv解决Python开发环境问题的神器</title>
   <link href="http://fooyou.github.io/blog/virtualenv-you-want-it"/>
   <updated>2015-04-23T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/virtualenv-you-want-it</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;virtualenv&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;使用Python做一些简单的事已成了我现在的习惯，越来越喜欢Python这门语言和其强大到让人生畏的社区，正是有了活跃的社区我们在开发中可以方便的使用各种包以完成我们的项目，然而安装那么多的包到我们的服务器会带来很多管理上的麻烦，什么版本依赖啦，向后不兼容啦，有时让人烦不胜烦。然后神器来了，欢迎virtualenv。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;virtualenv是能创建各自孤立的Python环境的工具，它能为每个不同项目提供一份“独立”的Python环境。当然它并没有真正安装多个Python副本，却是以一种“巧妙”的方式来让各个项目保持独立。&lt;/p&gt;

&lt;p&gt;virtualenv可为部署应用提供方便，把开发环境的虚拟环境打包生产环境即可，不需要在服务器上在搭建一遍。&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

&lt;p&gt;在Mac OS X或linux下，使用以下命令&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo easy_install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或更好的使用pip：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;使用 &lt;code&gt;-E&lt;/code&gt;参数可以使用系统环境变量中的http-proxy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ubuntu下也可以直接使用apt-get：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install python-virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果以前没有安装，那么默认会安装在/usr/local/bin下，使用pip3安装python3版本的virtualenv会加上版本号后缀，比如我现在用的是python3.4，所以我现在的有两个版本的virtualenv：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ls /usr/local/bin/ | grep virtualenv
virtualenv
virtualenv-3.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要创建python3的虚拟环境，就要使用&lt;code&gt;vitualenv-3.4 [PRJ]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建环境&quot;&gt;创建环境&lt;/h3&gt;

&lt;p&gt;安装完毕后，打开terminal就可以创建自己的环境。通常先创建一个项目文件夹，然后使用virtualenv创建虚拟环境 ENV（当然名字自己选）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir myproject
$ cd myproject
$ virutlaenv ENV
Using base prefix &amp;#39;/usr&amp;#39;
New python executable in project/bin/python3
Also creating executable in project/bin/python
Installing setuptools, pip...done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我的是12.1.1版本，默认生成的环境是不带系统级 site-packages 的，但以前的什么版本默认是带的，不带比较好。可通过命令查看其他参数 &lt;code&gt;virtualenv --help&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看ENV目录可发现：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;├── bin
│   ├── activate
│   ├── activate.csh
│   ├── activate.fish
│   ├── activate_this.py
│   ├── easy_install
│   ├── easy_install-3.4
│   ├── pip
│   ├── pip3
│   ├── pip3.4
│   ├── python -&amp;gt; python3
│   ├── python3
│   └── python3.4 -&amp;gt; python3
├── include
│   └── python3.4m -&amp;gt; /usr/include/python3.4m
└── lib
    └── python3.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;启动虚拟环境&quot;&gt;启动虚拟环境&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ENV
$ ./bin/activate 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK，现在就已经激活了virtualenv，然后使用pip或者easy_install，或者直接代码安装第三方包了&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pip install Flask
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有启动虚拟环境，系统也安装了pip，那么第三方包将被装在系统环境中，为避免此类事情发生，可以在环境变量中（~/.bashrc, etc）添加变量：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export PIP_REQUIRE_VIRTUALENV=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;退出虚拟环境&quot;&gt;退出虚拟环境&lt;/h3&gt;

&lt;p&gt;退出virtualenv：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./bin/deactive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;virtualenvwrapper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Virtualenvwrapper是virtualenv的扩展包，用于更方便的管理虚拟环境。&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo pip install virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时尚不能使用，实际上需要运行&lt;code&gt;/usr/local/bin/virtualenvwrapper.sh&lt;/code&gt;也能使其正常工作，打开这个文件里面有安装说明：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Setup:
#
#  1. Create a directory to hold the virtual environments.
#     (mkdir $HOME/.virtualenvs).
#  2. Add a line like &amp;quot;export WORKON_HOME=$HOME/.virtualenvs&amp;quot;
#     to your .bashrc.
#  3. Add a line like &amp;quot;source /path/to/this/file/virtualenvwrapper.sh&amp;quot;
#     to your .bashrc.
#  4. Run: source ~/.bashrc
#  5. Run: workon
#  6. A list of environments, empty, is printed.
#  7. Run: mkvirtualenv temp
#  8. Run: workon
#  9. This time, the &amp;quot;temp&amp;quot; environment is included.
# 10. Run: workon temp
# 11. The virtual environment is activated.
#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用方法命令：&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;workon&lt;/td&gt;
&lt;td&gt;列出虚拟环境列表。workon [name] 启动/切换虚拟环境&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lsvirtualenv&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkvirtualenv&lt;/td&gt;
&lt;td&gt;新建虚拟环境。mkvirtualenv [name]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rmvirtualenv&lt;/td&gt;
&lt;td&gt;删除虚拟环境&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deactive&lt;/td&gt;
&lt;td&gt;关闭虚拟环境&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;参考：&quot;&gt;参考：&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;https://virtualenv.pypa.io/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Python Web开发初探</title>
   <link href="http://fooyou.github.io/blog/python-web-dev-overview"/>
   <updated>2015-04-22T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/python-web-dev-overview</id>
   <content type="html">&lt;h2 id=&quot;scrapy-网络爬虫&quot;&gt;Scrapy 网络爬虫&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Python开发的一个快速,高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scrapy.org&quot;&gt;&lt;img src=&quot;http://scrapy.org/img/scrapy-big-logo.png&quot; alt=&quot;Scrapy官网&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;django&quot;&gt;Django&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Django是Python的Web框架中的重要一员，是使用最广泛的Python web框架之一。Django的主要目的是简便、快速的开发数据库驱动的网站。使用Django可以非常快速的开发出完整的网站。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.djangoproject.com&quot;&gt;&lt;img src=&quot;https://www.djangoproject.com/s/img/logo-django.42234b631760.svg&quot; alt=&quot;Django官网&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;tornado&quot;&gt;Tornado&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Tornado是使用Python编写的一个强大的、可扩展的Web服务框架，是非阻塞式web服务器。Tornado有出色的抗负载能力，速度相当快。FriendFeed和Facebook等多个大型网站在使用Tornado。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tornadoweb.org&quot;&gt;&lt;img src=&quot;http://www.tornadoweb.org/en/stable/_images/tornado.png&quot; alt=&quot;Tornado官网&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;flask&quot;&gt;Flask&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Flask是一个轻量级的Web应用框架, 使用Python编写。基于 WerkzeugWSGI工具箱和 Jinja2模板引擎。Flask保留了扩增的弹性，可以用Flask-extension加入这些功能：ORM、窗体验证工具...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;&lt;img src=&quot;http://flask.pocoo.org/static/logo/flask.svg&quot; alt=&quot;Flask官网&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;Nginx&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Nginx是一个高性能的轻量级的HTTP和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。其特点是占有内存少，并发能力强，在高连接并发的情况下，Nginx是Apache服务器不错的替代品...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nginx.org/&quot;&gt;&lt;img src=&quot;http://nginx.org/nginx.png&quot; alt=&quot;nginx官网&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;redis&quot;&gt;redis&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Redis是一个高性能的key-value数据库。redis的出现，很大程度补偿了memcached的不足，可以对关系数据库起到很好的补充作用。Redis在国内互联网公司使用非常广泛，新浪微博就是一个典型案例...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redis.io&quot;&gt;&lt;img src=&quot;http://redis.io/images/redis-white.png&quot; alt=&quot;redis官网&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;jinja2&quot;&gt;jinja2&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Jinja2是Python下一个被广泛应用的模版引擎，他的设计思想来源于Django的模板引擎，并扩展了其语法和一系列强大的功能。增加了沙箱执行功能和自动转义功能，这对应用的安全性来说是非常重要的&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jinja.org&quot;&gt;&lt;img src=&quot;http://jinja.pocoo.org/docs/dev/_static/jinja-small.png&quot; alt=&quot;jinja官网&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.pythontab.com/&quot;&gt;http://docs.pythontab.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>pickle和cPickle：Python对象的序列化</title>
   <link href="http://fooyou.github.io/blog/pickle-and-cpickle"/>
   <updated>2015-04-09T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/pickle-and-cpickle</id>
   <content type="html">&lt;p&gt;&lt;em&gt;目的：Python对象序列化&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;可用性：pickle至少1.4版本，cPickle 1.5版本以上&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;code&gt;pickle&lt;/code&gt;模块实现了一种算法，将任意一个Python对象转化成一系列字节（byets）。此过程也调用了&lt;code&gt;serializing&lt;/code&gt;对象。代表对象的字节流之后可以被传输或存储，再重构后创建一个拥有相同特征（the same characteristics）的新的对象。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cPickle&lt;/code&gt;使用C而不是Python，实现了相同的算法。这比Python实现要快好几倍，但是它不允许用户从Pickle派生子类。如果子类对你的使用来说无关紧要，那么cPickle是个更好的选择。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;警告:&lt;/strong&gt; 本文档直接说明，pickle不提供安全保证。如果你在多线程通信（inter-process communication）或者数据存储或存储数据中使用pickle，一定要小心。请勿信任你不能确定为安全的数据。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;导入&quot;&gt;导入&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;如平常一样，尝试导入cPickle，给它赋予一个别名“pickle”。如果因为某些原因导入失败，退而求其次到Python的原生（native）实现pickle模块。如果cPickle可用，能给你提供一个更快速的执行，否则只能是轻便的执行（the portable implementation）。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cPickle&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;编码和解码&quot;&gt;编码和解码&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;第一个例子将一种数据结构编码成一个字符串，然后把该字符串打印至控制台。使用一种包含所有原生类型（native types）的数据结构。任何类型的实例都可被腌渍（pickled，译者注：模块名称pickle的中文含义为腌菜），在稍后的例子中会演示。使用pickle.dumps()来创建一个表示该对象值的字符串。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cPickle&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pprint&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;DATA:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;PICKLE:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pickle默认仅由ASCII字符组成。也可以使用更高效的二进制格式（binary format），只是因为在打印的时候更易于理解，本页的所有例子都使用ASCII输出。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python pickle_string.py

DATA:[{&amp;#39;a&amp;#39;: &amp;#39;A&amp;#39;, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3.0}]
PICKLE: (lp1
(dp2
S&amp;#39;a&amp;#39;
S&amp;#39;A&amp;#39;
sS&amp;#39;c&amp;#39;
F3
sS&amp;#39;b&amp;#39;
I2
sa.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;重构对象的问题&quot;&gt;重构对象的问题&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;当与你自己的类一起工作时，你必须保证类被腌渍出现在读取pickle的进程的命名空间中。只有该实例的数据而不是类定义被腌渍。类名被用于在反腌渍时，找到构造器（constructor）以创建新对象。以此——往一个文件写入一个类的实例为例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cPickle&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_backwards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;pickle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;cPickle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;IndexError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Please specify a filename as an argument to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;out_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 写入流中&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;WRITING: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_backwards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在运行时，该脚本创建一个以在命令行指定的参数为名的文件：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python pickle_dump_to_file_1.py test.dat

WRITING: pickle (elkcip)
WRITING: cPickle (elkciPc)
WRITING: last (tsal)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个在读取结果腌渍对象失败的简化尝试：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cPickle&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pprint&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;IndexError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Please specify a filename as an argument to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;in_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 读取数据&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;EOFError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;READ: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_backwards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;in_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该版本失败的原因在于没有 SimpleObject 类可用：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python pickle_load_from_file_1.py test.dat

Traceback (most recent call last):
  File &amp;quot;pickle_load_from_file_1.py&amp;quot;, line 52, in &amp;lt;module&amp;gt;
    o = pickle.load(in_s)
AttributeError: &amp;#39;module&amp;#39; object has no attribute &amp;#39;SimpleObject&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正确的版本从原脚本中导入 SimpleObject ，可成功运行。&lt;/p&gt;

&lt;p&gt;添加：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle_dump_to_file_1&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleObject&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至导入列表的尾部，接着重新运行该脚本：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python pickle_load_from_file_2.py test.dat

READ: pickle (elkcip)
READ: cPickle (elkciPc)
READ: last (tsal)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当腌渍有值的数据类型不能被腌渍时（套接字、文件句柄（file handles）、数据库连接等之类的），有一些特别的考虑。因为使用值而不能被腌渍的类，可以定义 __getstate__() 和 __setstate__() 来返回状态（state）的一个子集，才能被腌渍。新式类（New-style classes）也可以定义__getnewargs__()，该函数应当返回被传递至类内存分配器（the class memory allocator）（C.__new__()）的参数。使用这些新特性的更多细节，包含在标准库文档中。&lt;/p&gt;

&lt;h2 id=&quot;环形引用（circular-references）&quot;&gt;环形引用（Circular References）&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;pickle协议（pickle protocol）自动处理对象间的环形引用，因此，即使是很复杂的对象，你也不用特别为此做什么。考虑下面这个图：&lt;/p&gt;

&lt;!-- Title: complex Pages: 1 --&gt;

&lt;p&gt;&lt;svg width=&quot;98pt&quot; height=&quot;260pt&quot;
viewBox=&quot;0.00 0.00 98.00 260.00&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 256)&quot;&gt;
&lt;title&gt;complex&lt;/title&gt;
&amp;lt;!-- root --&amp;gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;&lt;title&gt;root&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;#dddddd&quot; cx=&quot;63&quot; cy=&quot;-234&quot; rx=&quot;27&quot; ry=&quot;18&quot;/&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;63&quot; y=&quot;-230.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot; fill=&quot;#dddddd&quot;&gt;root&lt;/text&gt;
&lt;/g&gt;
&amp;lt;!-- a --&amp;gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;&lt;title&gt;a&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;#dddddd&quot; cx=&quot;27&quot; cy=&quot;-162&quot; rx=&quot;27&quot; ry=&quot;18&quot;/&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot; fill=&quot;#dddddd&quot;&gt;a&lt;/text&gt;
&lt;/g&gt;
&amp;lt;!-- root&amp;#45;&amp;gt;a --&amp;gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;&lt;title&gt;root&amp;#45;&amp;gt;a&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#dddddd&quot; d=&quot;M54.6504,-216.765C50.2885,-208.283 44.8531,-197.714 39.9587,-188.197&quot;/&gt;
&lt;polygon fill=&quot;#dddddd&quot; stroke=&quot;#dddddd&quot; points=&quot;42.9904,-186.439 35.3043,-179.147 36.7654,-189.641 42.9904,-186.439&quot;/&gt;
&lt;/g&gt;
&amp;lt;!-- b --&amp;gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;&lt;title&gt;b&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;#dddddd&quot; cx=&quot;27&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot;/&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot; fill=&quot;#dddddd&quot;&gt;b&lt;/text&gt;
&lt;/g&gt;
&amp;lt;!-- root&amp;#45;&amp;gt;b --&amp;gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;&lt;title&gt;root&amp;#45;&amp;gt;b&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#dddddd&quot; d=&quot;M71.865,-216.681C80.5522,-198.388 91.1272,-168.13 81,-144 75.2881,-130.39 64.1878,-118.518 53.5293,-109.479&quot;/&gt;
&lt;polygon fill=&quot;#dddddd&quot; stroke=&quot;#dddddd&quot; points=&quot;55.5654,-106.626 45.5615,-103.137 51.2063,-112.103 55.5654,-106.626&quot;/&gt;
&lt;/g&gt;
&amp;lt;!-- a&amp;#45;&amp;gt;a --&amp;gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;&lt;title&gt;a&amp;#45;&amp;gt;a&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#dddddd&quot; d=&quot;M46.895,-174.432C59.688,-177.675 72,-173.531 72,-162 72,-153.622 65.5006,-149.143 57.0395,-148.564&quot;/&gt;
&lt;polygon fill=&quot;#dddddd&quot; stroke=&quot;#dddddd&quot; points=&quot;56.5019,-145.1 46.895,-149.568 57.191,-152.066 56.5019,-145.1&quot;/&gt;
&lt;/g&gt;
&amp;lt;!-- a&amp;#45;&amp;gt;b --&amp;gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;&lt;title&gt;a&amp;#45;&amp;gt;b&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#dddddd&quot; d=&quot;M21.1601,-144.411C20.2975,-136.507 20.0481,-126.852 20.4119,-117.935&quot;/&gt;
&lt;polygon fill=&quot;#dddddd&quot; stroke=&quot;#dddddd&quot; points=&quot;23.9033,-118.179 21.1206,-107.956 16.9209,-117.683 23.9033,-118.179&quot;/&gt;
&lt;/g&gt;
&amp;lt;!-- b&amp;#45;&amp;gt;a --&amp;gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;&lt;title&gt;b&amp;#45;&amp;gt;a&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#dddddd&quot; d=&quot;M32.8794,-107.956C33.7139,-115.827 33.9485,-125.374 33.5831,-134.187&quot;/&gt;
&lt;polygon fill=&quot;#dddddd&quot; stroke=&quot;#dddddd&quot; points=&quot;30.0742,-134.184 32.8399,-144.411 37.0558,-134.691 30.0742,-134.184&quot;/&gt;
&lt;/g&gt;
&amp;lt;!-- c --&amp;gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;&lt;title&gt;c&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;#dddddd&quot; cx=&quot;27&quot; cy=&quot;-18&quot; rx=&quot;27&quot; ry=&quot;18&quot;/&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot; fill=&quot;#dddddd&quot;&gt;c&lt;/text&gt;
&lt;/g&gt;
&amp;lt;!-- b&amp;#45;&amp;gt;c --&amp;gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;&lt;title&gt;b&amp;#45;&amp;gt;c&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#dddddd&quot; d=&quot;M27,-71.6966C27,-63.9827 27,-54.7125 27,-46.1124&quot;/&gt;
&lt;polygon fill=&quot;#dddddd&quot; stroke=&quot;#dddddd&quot; points=&quot;30.5001,-46.1043 27,-36.1043 23.5001,-46.1044 30.5001,-46.1043&quot;/&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;&lt;/p&gt;

&lt;p&gt;上图虽然包括几个环形引用，但也能以正确的结构腌渍和重新读取（reloaded）。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    一个所有结点都可知它所连通的其它结点的简单有向图。&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;创建两个结点之间的一条边。&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preorder_traversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;产生器（Generator ）函数通过一个先根遍历（preorder traversal）生成（yield）边。&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder_traversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;打印图中的所有边。&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder_traversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%5s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; -&amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%2s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 创建结点。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 添加边。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ORIGINAL GRAPH:&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;show_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 腌渍和反腌渍该图来创建&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 一个结点集合。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dumped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reloaded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;RELOADED GRAPH:&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;show_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reloaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新读取的诸多节点（译者注：对应图中的圆圈）不再是同一个对象，但是节点间的关系保持住了，而且读取的仅仅是带有多个引用的对象的一个拷贝。上面所说的可以通过测试各节点在pickle处理前和之后的id()值来验证。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python pickle_cycle.py

ORIGINAL GRAPH:
 root -&amp;gt;  a (4299721744)
    a -&amp;gt;  b (4299721808)
    b -&amp;gt;  a (4299721744)
    b -&amp;gt;  c (4299721872)
    a -&amp;gt;  a (4299721744)
 root -&amp;gt;  b (4299721808)

RELOADED GRAPH:
 root -&amp;gt;  a (4299722000)
    a -&amp;gt;  b (4299722064)
    b -&amp;gt;  a (4299722000)
    b -&amp;gt;  c (4299722128)
    a -&amp;gt;  a (4299722000)
 root -&amp;gt;  b (4299722064)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;本文参见：&lt;a href=&quot;http://segmentfault.com/a/1190000002493548&quot;&gt;http://segmentfault.com/a/1190000002493548&lt;/a&gt; 和英文原文:&lt;a href=&quot;http://pymotw.com/2/pickle/&quot;&gt;http://pymotw.com/2/pickle/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Ubuntu上编译ffmpeg的动态链接库（.so）</title>
   <link href="http://fooyou.github.io/blog/Build-ffmpeg-as-dynamic-library"/>
   <updated>2015-04-08T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/Build-ffmpeg-as-dynamic-library</id>
   <content type="html">&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;从&lt;a href=&quot;https://ffmpeg.org/&quot;&gt;ffmpeg官网&lt;/a&gt;上下载了源码，然后按照其&lt;a href=&quot;https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu&quot;&gt;编译文档&lt;/a&gt;在ubuntu(12.04~14.04)上进行编译，然后发现生成的链接库里没有动态库.so文件。如何生成动态链接库呢？&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;解决步骤&quot;&gt;解决步骤&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;configure时选项要使用 &lt;code&gt;--enable-shared&lt;/code&gt; 来打开动态链接库选项。但是这样编译出来的文件里可能没有动态库。有可能是第2步的原因导致。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;configure时，prefix默认为/usr/local，然而该目录默认情况下是不在ldconfig下的，所以要添加一下方法如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo vi /etc/ld.so.conf.d/libc.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后添加如下路径就可以了（PS：14.04上在创建该文件时就自动写好了）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/usr/local/lib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后应用该配置，生成详细信息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo ldconfig -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在源码目录下，就可以build了：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;./configure --enable-shared &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Eclipse通过proxy无法联网的原因</title>
   <link href="http://fooyou.github.io/blog/Why-Eclipse-internet-through-proxy"/>
   <updated>2014-12-11T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/Why-Eclipse-internet-through-proxy</id>
   <content type="html">&lt;p&gt;google一番之后，原来这是Eclispe的bug，好在找到了一个回避方法，就是不要对SOCKS设置proxy，如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打开&lt;em&gt;Network Connection Settings&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;选择&lt;em&gt;Active Provider&lt;/em&gt;&lt;em&gt;为*Manual&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;设置&lt;em&gt;HTTP/HTTPS&lt;/em&gt;代理&lt;/li&gt;
&lt;li&gt;清除&lt;em&gt;SOCKS&lt;/em&gt;代理（选中SOCKS并点击&lt;em&gt;Clear&lt;/em&gt;按钮）&lt;/li&gt;
&lt;li&gt;重启Eclipse&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Eclipse可以更新了&lt;/p&gt;

&lt;p&gt;&lt;em&gt;本文参考：&lt;a href=&quot;http://stackoverflow.com/questions/17338212/eclipse-kepler-not-connecting-to-internet-via-proxy&quot;&gt;http://stackoverflow.com/questions/17338212/eclipse-kepler-not-connecting-to-internet-via-proxy&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ubuntu VirtualBox Windows 共享文件夹</title>
   <link href="http://fooyou.github.io/blog/Ubuntu-VirtualBox-Windows-share-folder"/>
   <updated>2014-11-28T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/Ubuntu-VirtualBox-Windows-share-folder</id>
   <content type="html">&lt;p&gt;有些时候，我们可能需要在Ubuntu中虚拟一个Windows操作系统，如下是我的环境配置： &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;母操作系统：Ubuntu 14.04 + VirtualBox 4.2 &lt;/li&gt;
&lt;li&gt;子操作系统：Window XP &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至于如何安装VirtualBox及虚拟Windows XP，这里不再做详细的说明，只是简要写一下步骤： &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在终端中运行：sudo apt-get install virtualbox &lt;/li&gt;
&lt;li&gt;输入您的登录口令，然后就是一步步的确认安装； &lt;/li&gt;
&lt;li&gt;创建一个Windows XP虚拟系统，插入光盘，然后就是一步步安装XP的过程。 &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面着重要讲的是母操作系统Ubuntu如何与子操作系统Windows XP进行文件共享的问题。 &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;安装VirtualBox的&lt;strong&gt;增强功能包&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在子操作系统Windows XP 中出现安装提示，一路确认安装下去即可。 &lt;/li&gt;
&lt;li&gt;重新启动Windows XP后，打开VirtualBox的菜单：设备(D)--&amp;gt;分配数据空间(S)... &lt;/li&gt;
&lt;li&gt;点击新增按钮，添加一个共享目录，您可以根据需要确定共享的目录是否只读，及是否仅共享于当前传话。 &lt;/li&gt;
&lt;li&gt;确定之后，回到子操作系统Windows XP，此时Windows XP操作系统内并没有任何变更（不会出现发现新硬件或者多出一个共享空间等），下面还需要您的手动配置才行。 &lt;/li&gt;
&lt;li&gt;打Windows XP中&amp;quot;我的电脑&amp;quot;，然后可以查看您的操作系统中各磁盘的盘符信息，VirtualBox中文件共享的机制是将共享文件夹作为一个单独的硬件，因此我们可以将它视作一个网络共享硬件或者是移动设施。在Windows XP中，我们需要为刚才的共享文件分配一个盘符才行，在命令提示符中运行如下命令：（命令是windos下的cmd） &lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;net use x: \\vboxsvr\share 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;说明：x:为Windows XP操作系统中可分配的盘符信息，不能与已有的盘符重复；//vboxsvr 为 VirtualBox 标识； share即为刚才您为共享文件夹取的共享名称。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;如我要在我的Windows XP中创建盘符为e:的网络驱动，则需要执行如下的语句： &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;net use e: \\vboxsvr\Data 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后您就可以像本地文件一样存取共享文件夹中的内容，实现母子操作系统中的数据共享了。 &lt;/p&gt;

&lt;p&gt;&lt;em&gt;附：如果您的子操作系统是Linux操作系统，您可以通过如下方式实现共享：&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mount -t vboxsf share mount_point 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;说明：share为您的共享文件夹别名，与上面相同；mount_point为您想加载到文件夹路径，可以设置到您的当前文件夹下，如/home/amon/share/。&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>/etc/fstab文件</title>
   <link href="http://fooyou.github.io/blog/fstab"/>
   <updated>2014-11-25T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/fstab</id>
   <content type="html">&lt;h3 id=&quot;文件系统&quot;&gt;文件系统&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;一个简单的 /etc/fstab文件，使用内核名称描述磁盘：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# &amp;lt;file system&amp;gt;        &amp;lt;dir&amp;gt;         &amp;lt;type&amp;gt;    &amp;lt;options&amp;gt;             &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt;
/dev/sda1              /             ext4      defaults,noatime      0      1
/dev/sda2              none          swap      defaults              0      0
/dev/sda3              /home         ext4      defaults,noatime      0      2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;字段定义&quot;&gt;字段定义&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;/etc/fstab文件中的每一行包含了用tab或者空格隔开的如下字段：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;file_system     dir     type    options     dump    pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;file system&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要挂载的分区或存储设备。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;dir&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;file system 的挂载位置。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;type&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要挂载设备或是分区的文件系统类型，支持许多种不同的文件系统：ext2, ext3, ext4, reiserfs, xfs, jfs, smbfs, iso9660, vfat, ntfs, swap 及 auto。 设置成auto类型，mount 命令会猜测使用的文件系统类型，对 CDROM 和 DVD 等移动设备是非常有用的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;options&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;挂载时使用的参数，注意有些mount 参数是特定文件系统才有的。一些比较常用的参数有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;： 在启动时或键入了 mount -a 命令时自动挂载。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noauto&lt;/code&gt;： 只在你的命令下被挂载。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt;： 允许执行此分区的二进制文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexec&lt;/code&gt;： 不允许执行此文件系统上的二进制文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ro&lt;/code&gt;： 以只读模式挂载文件系统。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rw&lt;/code&gt;： 以读写模式挂载文件系统。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;： 允许所有 users 组中的用户挂载文件系统。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nouser&lt;/code&gt;： 只能被 root 挂载。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;owner&lt;/code&gt;： 允许设备所有者挂载。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sync&lt;/code&gt;： I/O 同步进行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt;：  I/O 异步进行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dev&lt;/code&gt;： 解析文件系统上的块特殊设备。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodev&lt;/code&gt;： 不解析文件系统上的块特殊设备。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;suid&lt;/code&gt;： 允许 suid 操作和设定 sgid 位。这一参数通常用于一些特殊任务，使一般用户运行程序时临时提升权限。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nosuid&lt;/code&gt;： 禁止 suid 操作和设定 sgid 位。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noatime&lt;/code&gt;： 不更新文件系统上 inode 访问记录，可以提升性能(参见 atime 参数)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodiratime&lt;/code&gt;： 不更新文件系统上的目录 inode 访问记录，可以提升性能(参见 atime 参数)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;relatime&lt;/code&gt;： 实时更新 inode access 记录。只有在记录中的访问时间早于当前访问才会被更新。（与 noatime 相似，但不会打断如 mutt 或其它程序探测文件在上次访问后是否被修改的进程。），可以提升性能(参见 atime 参数)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush&lt;/code&gt;： &lt;code&gt;vfat&lt;/code&gt;的选项更频繁的刷新数据，复制对话框或进度条在全部数据都写入后才消失。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaults&lt;/code&gt;： 使用文件系统的默认挂载参数，例如 ext4 的默认参数为:rw, suid, dev, exec, auto, nouser, async。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;dump&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dump 工具通过它决定何时作备份. dump 会检查其内容，并用数字来决定是否对这个文件系统进行备份。 允许的数字是 0 和 1 。0 表示忽略， 1 则进行备份。大部分的用户是没有安装 dump 的 ，对他们而言 &lt;dump&gt; 应设为 0。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;pass&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fsck 读取 &lt;pass&gt; 的数值来决定需要检查的文件系统的检查顺序。允许的数字是0, 1, 和2。 根目录应当获得最高的优先权 1, 其它所有需要被检查的设备设置为 2. 0 表示设备不会被 fsck 所检查。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;文件系统标识&quot;&gt;文件系统标识&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;在 &lt;code&gt;/etc/fstab&lt;/code&gt;配置文件中你可以以三种不同的方法表示文件系统：内核名称、UUID 或者 label。使用 UUID 或是 label 的好处在于它们与磁盘顺序无关。如果你在 BIOS 中改变了你的存储设备顺序，或是重新拔插了存储设备，或是因为一些 BIOS 可能会随机地改变存储设备的顺序，那么用 UUID 或是 label 来表示将更有效。参见 持久化块设备名称 。&lt;/p&gt;

&lt;p&gt;要显示分区的基本信息请运行：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ lsblk -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到如下内容：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;NAME   FSTYPE LABEL      UUID                                 MOUNTPOINT
sda
├─sda1 ext4   Arch_Linux 978e3e81-8048-4ae1-8a06-aa727458e8ff /
├─sda2 ntfs   Windows    6C1093E61093B594
└─sda3 ext4   Storage    f838b24e-3a66-4d02-86f4-a2e73e454336 /media/Storage
sdb
├─sdb1 ntfs   Games      9E68F00568EFD9D3
└─sdb2 ext4   Backup     14d50a6c-e083-42f2-b9c4-bc8bae38d274 /media/Backup
sdc
└─sdc1 vfat   Camera     47FA-4071                            /media/Camera
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;内核名称&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你可以使用 fdisk -l 来获得内核名称，前缀是 dev。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: 使用这一方法，每一个标签必须是唯一的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加标签的工具和方法位于 这里。要显示所有设备的标签，可以使用 lsblk -f 命令。在 /etc/fstab 中使用 LABEL= 作为设备名的开头 :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# &amp;lt;file system&amp;gt;     &amp;lt;dir&amp;gt;       &amp;lt;type&amp;gt;    &amp;lt;options&amp;gt;        &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt;

tmpfs                  /tmp          tmpfs     nodev,nosuid          0      0

LABEL=Arch_Linux       /             ext4      defaults,noatime      0      1
LABEL=Arch_Swap        none          swap      defaults              0      0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;UUID&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所有分区和设备都有唯一的 UUID。它们由文件系统生成工具 (mkfs.*) 在创建文件系统时生成。&lt;/p&gt;

&lt;p&gt;lsblk -f 命令将显示所有设备的 UUID 值。/etc/fstab 中使用 UUID= 前缀:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# &amp;lt;file system&amp;gt;                      &amp;lt;dir&amp;gt;         &amp;lt;type&amp;gt;    &amp;lt;options&amp;gt;     &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt;

tmpfs                                     /tmp          tmpfs     nodev,nosuid          0      0

UUID=24f28fc6-717e-4bcd-a5f7-32b959024e26 /     ext4              defaults,noatime      0      1
UUID=03ec5dd3-45c0-4f95-a363-61ff321a09ff /home ext4              defaults,noatime      0      2
UUID=4209c845-f495-4c43-8a03-5363dd433153 none  swap              defaults              0      0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;提示和技巧&quot;&gt;提示和技巧&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;自动挂载&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果 /home 分区较大，可以让不依赖 /home 分区的服务先启动。把下面的参数添加到 /etc/fstab 文件中 /home 项目的参数部分即可：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;noauto,x-systemd.automount
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样 /home 分区只有需要访问时才会被挂载。内核会缓存所有的文件操作，直到 /home 分区准备完成。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 这样做会使 /home 的文件系统类型被识别为 autofs，造成 mlocate 查询时忽略该目录。实际加速效果因配置而异，所以请自己权衡是否需要。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;挂载远程文件系统也是同理。如果你仅想在需要的时候才挂载，也可以添加 noauto,x-systemd.automount 参数。另外，可以设置 x-systemd.device-timeout=# 参数，设置超时时间，以防止网络资源不能访问的时候浪费时间。&lt;/li&gt;
&lt;li&gt;如果你的加密文件系统需要密钥，则需要添加 noauto 参数到 /etc/crypttab 文件中的对应位置。systemd 开机的时候就不会打开这个加密设备，会一直等待到设备被访问时再使用密钥文件挂载。比如在使用加密RAID设备的时候可以节省一定的时间，因为 systemd 不必等到设备可用后才能访问。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/etc/crypttab
data /dev/md0 /root/key noauto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;交换分区 UUID&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果交换分区没有 UUID，可以手动加入。如果使用 lsblk -f 命令没有列出交换分区的 UUID 就说明发生了这种情况。下面是为交换分区指定 UUID 的步骤：
确定交换分区：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# swapon -s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;禁用交换分区：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# swapoff /dev/sda7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用新 UUID 重新创建交换分区：
```&lt;/p&gt;

&lt;h1 id=&quot;mkswap-u-random-dev-sda7&quot;&gt;mkswap -U random /dev/sda7&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;激活交换分区:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;swapon-dev-sda7&quot;&gt;swapon /dev/sda7&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;__路径名有空格__

如果挂载的路径中有空格，可以使用 &amp;quot;\040&amp;quot; 转义字符来表示空格（以三位八进制数来进行表示）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;etc-fstab&quot;&gt;/etc/fstab&lt;/h1&gt;

&lt;p&gt;UUID=47FA-4071     /home/username/Camera\040Pictures   vfat  defaults,noatime       0  2
/dev/sda7          /media/100\040GB\040(Storage)       ext4  defaults,noatime,user  0  0
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;外部设备&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;外部设备在插入时挂载，在未插入时忽略。这需要 nofail 选项，可以在启动时若设备不存在直接忽略它而不报错.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#/etc/fstab
/dev/sdg1    /media/backup    jfs    defaults,nofail    0  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;atime 参数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用 noatime, nodiratime 或 relatime 可以提升 ext2， ext3 及 ext4 格式磁盘的性能。 Linux 在默认情况下使用atime选项，每次在磁盘上读取（或写入）数据时都会产生一个记录。这是为服务器设计的，在桌面使用中意义不大。默认的 atime 选项最大的问题在于即使从页面缓存读取文件(从内存而不是磁盘读取)，也会产生磁盘写操作！&lt;/p&gt;

&lt;p&gt;使用 noatime 选项阻止了读文件时的写操作。大部分应用程序都能很好工作。只有少数程序如 Mutt 需要这些信息。Mutt 的用户应该使用 relatime 选项。使用 relatime 选项后，只有文件被修改时才会产生文件访问时间写操作。nodiratime 选项仅对目录禁用了文件访问时间。relatime 是比较好的折衷，Mutt 等程序还能工作，但是仍然能够通过减少访问时间更新提升系统性能。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; noatime 已经包含了 nodiratime。不需要同时指定。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;tmpfs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;tmpfs 是一个临时文件系统，驻留于你的交换分区或是内存中（取决于你的使用情况）。使用它可以提高文件访问速度，并能保证重启时会自动清除这些文件。&lt;/p&gt;

&lt;p&gt;经常使用 tmpfs 的目录有 /tmp, /var/lock and /var/run. 不要将之使用于 /var/tmp, 因为这一目录中的临时文件在重启过程中需要被保留。使用 tmpfs /run 目录，/var/run 和 /var/lock 是为了兼容老版本建立的链接。默认 /etc/fstab中的的/tmp也是 tmpfs.
默认情况下， tmpfs 分区被设置为你总的内存的一半，当然你可以自由设定这一值。注意实际中内存和交换分区的使用情况取决于你的使用情况，而 tmpfs 分区在其真正使用前是不会占用存储空间的。&lt;/p&gt;

&lt;p&gt;要将 /tmp 放到 tmpfs，将下行加入 /etc/fstab：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.....
tmpfs /tmp      tmpfs nodev,nosuid                 0 0
.....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以指定大小，但不要修改 mode 选项，以保证文件具有正确的访问权限(1777)。在上例中 /tmp 将最多使用一半内存，要指定最大空间，使用 size 挂载选项：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.....
tmpfs /tmp      tmpfs nodev,nosuid,size=2G          0 0
.....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有一个更高级的例子，展示如何为用户添加 tmpfs 挂载。这对于网站、mysql 临时文件, ~/.vim/, 和其他情况很有用。尝试并获得理想的挂载选项来完成目标是很重要的。目标是尽量采用安全的策略来防止滥用。限制大小，同时指定 uid 和 gid 加上 mode 是非常安全的。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.....
tmpfs /www/cache tmpfs rw,size=1G,nr_inodes=5k,noexec,nodev,nosuid,uid=648,gid=648,mode=1700 0 0
.....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参阅 mount 命令 man 手册以获得更多的内容。&lt;/p&gt;

&lt;p&gt;重启后方能生效。注意不要直接执行 mount -a 命令，因为可能造成无法访问当前目录中的文件（比如你应该保证 lockfiles 的正常存在）。然而，如果它们都是空的，那么就可以直接执行 mount -a 而不必重启电脑。&lt;/p&gt;

&lt;p&gt;应用更改后，可以通过 findmnt 检查是否生效：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ findmnt --target /tmp
TARGET SOURCE FSTYPE OPTIONS
/tmp   tmpfs  tmpfs  rw,nosuid,nodev,relatime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一般需要大量读写操作的程序在使用 tmpfs 时都会提升性能。有些程序把共享内存放到 tmpfs 上时性能会大幅提升，例如将 Firefox Profile 文件夹放到内存后，Firefox 性能大幅提升。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; tmpfs 目录(/tmp) 挂载时需要去掉 noexec 参数，否则有些编译程序无法执行，此外，tmpfs 的默认大小是内存的一半，可能会产生空间不够的问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面命令可以让makepkg在tmpfs目录进行编辑，也可以在在/etc/makepkg.conf中进行设置:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ BUILDDIR=/tmp/makepkg makepkg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;普通用户读写 FAT32&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了取得对 FAT32 分区的写权限，你必须修改/etc/fstab文件。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/dev/sdxY    /mnt/some_folder  vfat   user,rw,umask=000              0  0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“users”标签的意思是任何用户（甚至非 root 用户）都可以挂载或卸载分区 &amp;#39;/dev/sdX&amp;#39;。“rw”标签则分配读写的使用权。但我不知道“umask”标签的意义（umask 是权限掩码命令 umask=000 指任何人没有特权，且权限为777，即所有人都可以读、写、执行）。我曾试图在“man mount”中查询，但是没有什么结果。&lt;/p&gt;

&lt;p&gt;比如你的 FAT32 分区在 &amp;#39;/dev/sda9&amp;#39;，你想将其挂载到 &amp;#39;/mnt/fat32&amp;#39;，那么你需要输入并运行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/dev/sda9    /mnt/fat32        vfat   user,rw,umask=111,dmask=000    0  0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Fstab_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&quot;&gt;https://wiki.archlinux.org/index.php/Fstab_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Ubuntu开启root账户登录的方法</title>
   <link href="http://fooyou.github.io/blog/Login-ubuntu-with-root"/>
   <updated>2014-11-19T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/Login-ubuntu-with-root</id>
   <content type="html">&lt;p&gt;Ubuntu 默认是不允许使用root登录的，要使用root权限，就必须使用sudo命令来执行，安全繁琐。&lt;/p&gt;

&lt;p&gt;两个步骤打开：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1:&lt;/strong&gt; 设置root密码，开启root账号：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo passwd root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2:&lt;/strong&gt; 使用命令su 或者 sudo -s 登录启用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3:&lt;/strong&gt; 修改lightdm配置，修改 /etc/lightdm/lightdm.conf.d/10-ubuntu.conf 文件&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vi /etc/lightdm/lightdm.conf.d/10-ubuntu.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从后面添加如下配置，重启即可看到root账户登录项&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;greeter-show-manual-login=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>SPARQL 练习</title>
   <link href="http://fooyou.github.io/blog/SPARQL-exercise"/>
   <updated>2014-10-08T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/SPARQL-exercise</id>
   <content type="html">&lt;h1 id=&quot;sparql-练习&quot;&gt;SPARQL 练习&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;看完《理解SPARQL》做了如下练习，使用dbpedia在线SPARQL进行，网址：&lt;a href=&quot;http://dbpedia.org/snorql/&quot;&gt;http://dbpedia.org/snorql/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;练习前要先了解dbpedia的本体、属性、资源等&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;URI&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;本体&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dbpedia.org/ontology/&quot;&gt;http://dbpedia.org/ontology/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://mappings.dbpedia.org/server/ontology/classes/&quot;&gt;本体类&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dbpedia.org/property/&quot;&gt;http://dbpedia.org/property/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;描述一个本体属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;资源&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dbpedia.org/resource/&quot;&gt;http://dbpedia.org/resource/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任何东西都是资源&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;要查找一个linked data，必须首先知道其本体相关类和其属性定义，否则就无从查起。&lt;/p&gt;

&lt;h2 id=&quot;查找中国所有的省份&quot;&gt;查找中国所有的省份&lt;/h2&gt;

&lt;p&gt;在dbpedia中搜索河南（&lt;a href=&quot;http://dbpedia.org/page/Henan%EF%BC%89%E8%83%BD%E7%9C%8B%E5%88%B0%E5%AF%B9%E6%B2%B3%E5%8D%97%E7%9C%81%E7%9A%84%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%98%AF%EF%BC%9A&quot;&gt;http://dbpedia.org/page/Henan）能看到对河南省的其中一个属性是：&lt;/a&gt;&lt;http://dbpedia.org/class/yago/ProvincesOfThePeople&#39;sRepublicOfChina&gt;，那么利用这个属性我们可以找到所有的省份：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX dbp_yago: &amp;lt;&amp;lt;http://dbpedia.org/class/yago/&amp;gt;

SELECT ?p ?name WHERE {
    ?p a dbp_yago:ProvincesOfThePeople&amp;#39;sRepublicOfChina
    ?p rdfs:label ?name FILTER (LANG(?name) = &amp;#39;zh&amp;#39;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;1-找出中国所有城市&quot;&gt;1.找出中国所有城市&lt;/h2&gt;

&lt;p&gt;首先我们要找的内容是城市，可以在DBPedia的本体库中找到类：City，而China已经是dbpedia resource中的结点了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX : &amp;lt;http://dbpedia.org/resource/&amp;gt;
PREFIX dbpo: &amp;lt;http://dbpedia.org/ontology/&amp;gt;

SELECT ?city, ?city_zh_name { 
    ?city a dbpo:City; dbpo:country :China .
    ?city rdfs:label ?city_zh_name FILTER (LANG(?city_zh_name) = &amp;#39;zh&amp;#39;) .
}
ORDER BY ?city
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第1行对resource的PREFIX，没有命名，那么查询默认空间就是resource，第2行定义了dbpo为DBPedia的本体服务，select语句定义了两个变量&lt;code&gt;city&lt;/code&gt;和&lt;code&gt;city_zh_name&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;city&lt;/code&gt;是类型为dbpedia-owl(&lt;a href=&quot;http://dbpedia.org/ontology/City&quot;&gt;http://dbpedia.org/ontology/City&lt;/a&gt;)属性dbpedia-owl:country所属国家为&lt;a href=&quot;http://dbpedia.org/resource/China&quot;&gt;http://dbpedia.org/resource/China&lt;/a&gt;(:China)的城市，&lt;/p&gt;

&lt;p&gt;&lt;code&gt;city_zh_name&lt;/code&gt;意义为城市的中文名字，它是&lt;code&gt;city&lt;/code&gt;的rdfs:label属性中的LANG()为&amp;#39;zh&amp;#39;的部分。&lt;/p&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;city&lt;/th&gt;
&lt;th&gt;city_zh_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://dbpedia.org/snorql/?describe=http%3A//dbpedia.org/resource/%25C3%259Cr%25C3%25BCmqi&quot;&gt;:%C3%9Cr%C3%BCmqi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;quot;乌鲁木齐市&amp;quot;@zh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://dbpedia.org/snorql/?describe=http%3A//dbpedia.org/resource/Alashankou&quot;&gt;:Alashankou&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;quot;阿拉山口市&amp;quot;@zh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;&quot;&gt;:Altay_City&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;quot;阿勒泰市&amp;quot;@zh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://dbpedia.org/snorql/?describe=http%3A//dbpedia.org/resource/Altay_City&quot;&gt;:Anda,_Heilongjiang&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;quot;安达市&amp;quot;@zh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://dbpedia.org/snorql/?describe=http%3A//dbpedia.org/resource/Anning%2C_Yunnan&quot;&gt;:Anning,_Yunnan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;quot;安宁市&amp;quot;@zh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;2-查找河南省所有的城市&quot;&gt;2.查找河南省所有的城市&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX : &amp;lt;http://dbpedia.org/resource/&amp;gt;
PREFIX dbpo: &amp;lt;http://dbpedia.org/ontology/&amp;gt;

SELECT ?city, ?city_zh_name { 
    ?city a dbpo:City; dbpo:isPartOf :Henan .
    ?city rdfs:label ?city_zh_name FILTER (LANG(?city_zh_name) = &amp;#39;zh&amp;#39;) .
}
ORDER BY ?city
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看dbpedia的owl:class:City，可以发现其属性有一个叫dbpedia-owl:isPartOf，&lt;/p&gt;

&lt;h2 id=&quot;1-查找所有在濮阳出生的人&quot;&gt;1. 查找所有在濮阳出生的人&lt;/h2&gt;

&lt;p&gt;&amp;lt;未完待续&amp;gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SPARQL 1.1概述</title>
   <link href="http://fooyou.github.io/blog/SPARQL-1.1-Overview"/>
   <updated>2014-09-30T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/SPARQL-1.1-Overview</id>
   <content type="html">&lt;p&gt;&lt;em&gt;W3C推荐标准2013年3月21日&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;

&lt;p&gt;本文档是SPARQL 1.1的概览。它介绍了一套W3C的规范，以便于在Web或在RDF存储上查询和操作RDF图的内容。&lt;/p&gt;

&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;引言

&lt;ul&gt;
&lt;li&gt;1.1 示例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SPARQL 1.1 查询语言&lt;/li&gt;
&lt;li&gt;SPARQL 1.1 支持多种查询结果格式（XML、JSON、CSV、TSV）&lt;/li&gt;
&lt;li&gt;SPARQL 1.1 联合查询&lt;/li&gt;
&lt;li&gt;SPARQL 1.1 Entailment Regimes &lt;/li&gt;
&lt;li&gt;SPARQL 1.1 更新语言&lt;/li&gt;
&lt;li&gt;SPARQL 1.1 RDF协议&lt;/li&gt;
&lt;li&gt;SPARQL 1.1 服务描述&lt;/li&gt;
&lt;li&gt;SPARQL 1.1 图存储HTTP协议&lt;/li&gt;
&lt;li&gt;致谢&lt;/li&gt;
&lt;li&gt;参考文献&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-引言&quot;&gt;1 引言&lt;/h2&gt;

&lt;hr&gt;

&lt;h3 id=&quot;1-1-示例&quot;&gt;1.1 示例&lt;/h3&gt;

&lt;p&gt;下面，我们将说明使用SPARQL的语言，协议和相关规范的小例子。&lt;/p&gt;

&lt;p&gt;一些发布在URL为‘&lt;a href=&quot;http://example.org/alice%E2%80%99%E7%9A%84%E7%BD%91%E7%AB%99%E4%B8%8A%E7%9A%84RDF%E5%9B%BE%EF%BC%8C%E5%8C%85%E5%90%AB%E4%BA%86Alice%E7%9A%84%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E5%92%8C%E5%A5%B9%E7%9A%84%E7%A4%BE%E4%BA%A4%E8%81%94%E7%B3%BB%E4%BA%BA%E3%80%82%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8Turtle%E8%AF%AD%E6%B3%95%E6%9D%A5%E8%AF%B4%E6%98%8E%E3%80%82&quot;&gt;http://example.org/alice’的网站上的RDF图，包含了Alice的个人信息和她的社交联系人。我们使用Turtle语法来说明。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图：&lt;a href=&quot;http://example.org/alice&quot;&gt;http://example.org/alice&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@prefix foaf: &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt; .
@prefix rdfs: &amp;lt;http://www.w3.org/2000/01/rdf-schema#&amp;gt; .

&amp;lt;http://example.org/alice#me&amp;gt; a foaf:Person .
&amp;lt;http://example.org/alice#me&amp;gt; foaf:name &amp;quot;Alice&amp;quot; .
&amp;lt;http://example.org/alice#me&amp;gt; foaf:mbox &amp;lt;mailto:alice@example.org&amp;gt; .
&amp;lt;http://example.org/alice#me&amp;gt; foaf:knows &amp;lt;http://example.org/bob#me&amp;gt; .
&amp;lt;http://example.org/bob#me&amp;gt; foaf:knows &amp;lt;http://example.org/alice#me&amp;gt; .
&amp;lt;http://example.org/bob#me&amp;gt; foaf:name &amp;quot;Bob&amp;quot; .
&amp;lt;http://example.org/alice#me&amp;gt; foaf:knows &amp;lt;http://example.org/charlie#me&amp;gt; .
&amp;lt;http://example.org/charlie#me&amp;gt; foaf:knows &amp;lt;http://example.org/alice#me&amp;gt; .
&amp;lt;http://example.org/charlie#me&amp;gt; foaf:name &amp;quot;Charlie&amp;quot; .
&amp;lt;http://example.org/alice#me&amp;gt; foaf:knows &amp;lt;http://example.org/snoopy&amp;gt; .
&amp;lt;http://example.org/snoopy&amp;gt; foaf:name &amp;quot;Snoopy&amp;quot;@en .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用SPARQL1.1可以查询这样的图，将它们加载到RDF stores中可以以不同的方式操作它们。&lt;/p&gt;

&lt;h2 id=&quot;2-sparql-1-1-查询语言&quot;&gt;2 SPARQL 1.1 查询语言&lt;/h2&gt;

&lt;p&gt;假定上述图数据被加载到了SPARQL服务中（比如：可以处理SPARQL查询的HTTP服务端点）SPARQL1.1可用于从简单图模式到复杂的制定查询。例如，可以通过SPARQL SELECT查询人的名字和他们的朋友：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX foaf: &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt;
SELECT ?name (COUNT(?friend) AS ?count)
WHERE { 
    ?person foaf:name ?name . 
    ?person foaf:knows ?friend . 
} GROUP BY ?person ?name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和2008年的SPARQL 1.0一样，复杂查询可以包含&lt;code&gt;联合&lt;/code&gt;、&lt;code&gt;选择性查询部分&lt;/code&gt;和&lt;code&gt;过滤器&lt;/code&gt;。在SPARQL1.1新增的功能有&lt;code&gt;value aggregation&lt;/code&gt;，&lt;code&gt;路径表达式（path expression）&lt;/code&gt;和&lt;code&gt;嵌套查询（nested queries）&lt;/code&gt;等，同时1.1还支持ASK查询（返回yes/no）和CONSTRUCT查询（其结果可构建RDF图）所有1.1的新功能对这两个查询都可用。&lt;/p&gt;

&lt;p&gt;相比1.0，1.1对查询语言增加了一些新功能，包括子查询、价值分配、路径表达式或聚合（aggregate）-比如上例中使用的COUNT。&lt;/p&gt;

&lt;h3 id=&quot;3-sparql-1-1-支持多种查询结果格式（xml、json、csv、tsv）&quot;&gt;3 SPARQL 1.1 支持多种查询结果格式（XML、JSON、CSV、TSV）&lt;/h3&gt;

&lt;p&gt;为支持搜索结果的机器读入，SPARQL支持4中常用格式XML（Extensible Markup Language）、JSON（JavaScript Object Notation）、CSV（Comma Separated Values）、TSV（Tab Separated Values），它们在以下文档中有详细描述：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/rdf-sparql-XMLres/&quot;&gt;SPARQL Query Results XML Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/sparql11-results-json/&quot;&gt;SPARQL 1.1 Query Results JSON Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/sparql11-results-csv-tsv/&quot;&gt;SPARQL 1.1 Query Results CSV and TSV Formats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些文档详细说明了这些方案和方案中的RDF词根是如何使用目标格式编码的。&lt;/p&gt;

&lt;p&gt;上述示例的结果的4中形式：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sparql&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2005/sparql-results#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;variable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;variable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;count&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;results&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;result&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;literal&amp;gt;&lt;/span&gt;Alice&lt;span class=&quot;nt&quot;&gt;&amp;lt;/literal&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/binding&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;count&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;literal&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;datatype=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema#integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/literal&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/binding&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;result&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;literal&amp;gt;&lt;/span&gt;Bob&lt;span class=&quot;nt&quot;&gt;&amp;lt;/literal&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/binding&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;count&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;literal&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;datatype=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema#integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/literal&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/binding&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;result&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;literal&amp;gt;&lt;/span&gt;Charlie&lt;span class=&quot;nt&quot;&gt;&amp;lt;/literal&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/binding&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;count&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;literal&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;datatype=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema#integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/literal&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/binding&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/results&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sparql&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;head&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;vars&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;count&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;bindings&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;literal&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;count&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;datatype&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema#integer&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;typed-literal&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;literal&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;count&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;datatype&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema#integer&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;typed-literal&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;literal&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Charlie&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;count&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;datatype&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema#integer&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;typed-literal&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;CSV&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;name,count
Alice,3
Bob,1
Charlie,1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;TSV&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;?name&amp;lt;TAB&amp;gt;?count
&amp;quot;Alice&amp;quot;&amp;lt;TAB&amp;gt;3
&amp;quot;Bob&amp;quot;&amp;lt;TAB&amp;gt;1
&amp;quot;Charlie&amp;quot;&amp;lt;TAB&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;（&lt;/em&gt;&lt;em&gt;注&lt;/em&gt;&lt;em&gt;：&lt;Tab&gt;是TAB字符的视觉表示）&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;sparql-1-1联合查询（federated-query）&quot;&gt;SPARQL 1.1联合查询（Federated Query）&lt;/h2&gt;

&lt;p&gt;该文档介绍了一个基于SPARQL1.1查询语言的扩展来为不同SPARQL端点明确委托某些子查询。&lt;/p&gt;

&lt;p&gt;举个例子，我们的示例中，有人或许想知道Alice的朋友中是否和DBPedia中用IRI &lt;a href=&quot;http://dbpedia.org/resource/Snoopy&quot;&gt;http://dbpedia.org/resource/Snoopy&lt;/a&gt;标识的资源有相同名字的呢？通过把姓名查询和远程调用SPARQL端点 &lt;a href=&quot;http://dbpedia.org/sparql%E7%BB%93%E5%90%88%E8%B5%B7%E6%9D%A5%E4%BD%BF%E7%94%A8%E5%85%B3%E9%94%AE%E8%AF%8D%60SERVICE%60%E6%9F%A5%E6%89%BE&quot;&gt;http://dbpedia.org/sparql结合起来使用关键词`SERVICE`查找&lt;/a&gt;&lt;a href=&quot;http://dbpedia.org/resource/Snoopy&quot;&gt;http://dbpedia.org/resource/Snoopy&lt;/a&gt; 的名字就可以做到了：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX foaf: &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt;
SELECT ?name
WHERE {
    &amp;lt;http://example.org/alice#me&amp;gt; foaf:knows [ foaf:name ?name ] .
    SERVICE &amp;lt;http://dbpedia.org/sparql&amp;gt; { &amp;lt;http://dbpedia.org/resource/Snoopy&amp;gt; foaf:name ?name }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;?name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&amp;quot;Snoopy&amp;quot;@en&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;上述&lt;code&gt;WHERE&lt;/code&gt;语句的第一句仍然匹配本地的SPARQL服务，接下来的&lt;code&gt;SERVICE&lt;/code&gt;语句被代理到远程的SPARQL服务上。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;5-sparql-1-1-entailment-regimes&quot;&gt;5 SPARQL 1.1 Entailment Regimes&lt;/h2&gt;

&lt;p&gt;SPARQL可以和形如RDF Schema或者OWL axiom的本体信息一起使用。例如，我们假设除了Alice的数据外，一些由RDF Schema和OWL构成的本体信息构建定义的FOAF词汇表加载到了我们的SPARQL服务里了，&lt;/p&gt;

&lt;p&gt;该FOAF本体：（只给摘录）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@prefix foaf: &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt; .
@prefix rdfs: &amp;lt;http://www.w3.org/2000/01/rdf-schema#&amp;gt; .
...
foaf:name rdfs:subPropertyOf rdfs:label .
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下查询索要person的label：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SELECT ?label
WHERE { ?person rdfs:label ?label }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SPARQL引擎不会考虑任何特定的蕴含制度（entailment regimes），对这类查询不返回任何结果，然而一个RDF Schema的引入查询引擎将返回：&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;?label&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&amp;quot;Alice&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&amp;quot;Bob&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&amp;quot;Charlie&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&amp;quot;Snoopy&amp;quot;@en&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;因为&lt;code&gt;foaf:name&lt;/code&gt;是&lt;code&gt;rdfs:label&lt;/code&gt;的一个子属性&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/sparql11-entailment/&quot;&gt;SPARQL 1.1 Entailment Regimes&lt;/a&gt; 规范定义了，什么样的entailment regime返回什么样的结果，以及如何为RDF、RDF Schema、D-Entailment、OWL和RIF指定entailment regime。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;6-sparql-1-1-更新语言&quot;&gt;6 SPARQL 1.1 更新语言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/sparql11-update/&quot;&gt;SPARQL 1.1 更新&lt;/a&gt;规范中定义了SPARQL1.1的更新请求语法和语义并提供了大量示例代码。更操作可以由一些连续请求组成，并在图存储中执行图集合。提供了在图存储中对RDF图进行更新、创建和移除的操作。&lt;/p&gt;

&lt;p&gt;以下示例，可为Alice添加一个叫Dorothy的新朋友到默认的图中，然后通过一个英文tag删掉其他所有Alice朋友的名字：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX foaf: &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt; .

INSERT DATA { &amp;lt;http://www.example.org/alice#me&amp;gt; foaf:knows [ foaf:name &amp;quot;Dorothy&amp;quot; ]. } ;
DELETE { ?person foaf:name ?mbox } 
WHERE { &amp;lt;http://www.example.org/alice#me&amp;gt; foaf:knows ?person .
        ?person foaf:name ?name FILTER ( lang(?name) = &amp;quot;EN&amp;quot; ) .}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二个操作表明，插入和删除操作可以依赖于查询结果，WHERE部分的语法参考SPARQL 1.1 查询语言。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;7-sparql-1-1-rdf协议&quot;&gt;7 SPARQL 1.1 RDF协议&lt;/h2&gt;

&lt;p&gt;SPARQL 1.1的RDF协议了如何通过HTTP在SPARQL服务上传递查询和更新请求。它也定义了如何映射请求到HTTP GET和POST操作，还有蛇这请求应返回什么样的HTTP响应。&lt;/p&gt;

&lt;p&gt;例如，第3节讲的基于&lt;a href=&quot;http://www.example.org/sparql/&quot;&gt;http://www.example.org/sparql/&lt;/a&gt;的SPARQL请求，根据这个规范，会发送如下HTTP GET请求：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET /sparql/?query=PREFIX%20foaf%3A%20%3Chttp%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%3E%0ASELECT%20%3Fname%20%28COUNT%28%3Ffriend%29%20AS%20%3Fcount%29%0AWHERE%20%7B%20%0A%20%20%20%20%3Fperson%20foaf%3Aname%20%3Fname%20.%20%0A%20%20%20%20%3Fperson%20foaf%3Aknows%20%3Ffriend%20.%20%0A%7D%20GROUP%20BY%20%3Fperson%20%3Fname HTTP/1.1
Host: www.example.org
User-agent: my-sparql-client/0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于HTTP response的编码和不同query和update请求操作以及所支持的HTTP方法，这些实现细节都在协议规范中有详细描述。&lt;/p&gt;

&lt;h2 id=&quot;8-sparql-1-1-service-description&quot;&gt;8 SPARQL 1.1 Service Description&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/sparql11-service-description/&quot;&gt;SPARQL 1.1服务描述&lt;/a&gt;文档描述了一种用于发现的方法和通过SPARQL 1.1 RDF协议使其可见的用于描述SPAEQL服务的RDF词汇表。&lt;/p&gt;

&lt;p&gt;根据此规范，服务端口，当通过HTTP GET操作（不使用query、update）时将返回一个服务提供的RDF描述，比如以下HTTP请求：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET /sparql/ HTTP/1.1
Host: www.example.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用服务描述词汇表对&lt;a href=&quot;http://www.example.org/sparql/%E7%9A%84%E7%AB%AF%E7%82%B9%E5%8F%91%E5%87%BA%E7%9A%84%E8%AF%B7%E6%B1%82%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AARDF%E6%8F%8F%E8%BF%B0%E3%80%82%E8%BF%99%E4%B8%AA%E6%8F%8F%E8%BF%B0%E6%8F%90%E4%BE%9B%EF%BC%8C&quot;&gt;http://www.example.org/sparql/的端点发出的请求会返回一个RDF描述。这个描述提供，&lt;/a&gt; 比如关于端点的默认dataset信息或者是SPARQL语言特性和其所支持的entailment regimes。&lt;/p&gt;

&lt;h2 id=&quot;9-sparql-1-1-图存储http协议&quot;&gt;9 SPARQL 1.1 图存储HTTP协议&lt;/h2&gt;

&lt;p&gt;对许多处理RDF数据的应用程序和服务来说，没有必要了解SPARQL 1.1的全部内容。之所以真么说是因为SPARQL 1.1的图存储协议提供了旨在直接通过HTTP操作对图集合进行管理的特定操作。&lt;/p&gt;

&lt;p&gt;比如，第4节中的第1部分的更新操作，简单的把元祖插入RDF图中。在支持这个协议的服务上，这个插入操作可以直接通过HTTP POST操作把元祖作为payload替代：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;POST /rdf-graphs/service?graph=http%3A%2F%2Fwww.example.org%2Falice HTTP/1.1
Host: example.org
Content-Type: text/turtle
@prefix foaf: &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt; .
&amp;lt;http://www.example.org/alice#me&amp;gt; foaf:knows [ foaf:name &amp;quot;Dorothy&amp;quot; ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他直接通过HTTP操作进行修改（使用HTTP PUT替换整个图，或者HTTP DELETE 删除一个RDF图） 或者复取（通过HTTP GET）RDF图的操作在 &lt;a href=&quot;http://www.w3.org/TR/sparql11-http-rdf-update/&quot;&gt;SPARQL 1.1 图存储HTTP协议&lt;/a&gt; 中有详细描述。这个规范可被看成是SPARQL 1.1 Query 和 Update 的轻量级合成。&lt;/p&gt;

&lt;h2 id=&quot;10-致谢&quot;&gt;10 致谢&lt;/h2&gt;

&lt;p&gt;The members of the W3C SPARQL Working group who actively contributed to the SPARQL 1.1 specifications are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Carlos Buil Aranda, Universidad Politécnica de Madrid&lt;/li&gt;
&lt;li&gt;Olivier Corby, Institut National de Recherche en Informatique et en Automatique (INRIA)&lt;/li&gt;
&lt;li&gt;Souripriya Das, Oracle Corporation&lt;/li&gt;
&lt;li&gt;Lee Feigenbaum, Cambridge Semantics&lt;/li&gt;
&lt;li&gt;Paul Gearon, Revelytix Inc&lt;/li&gt;
&lt;li&gt;Birte Glimm, Universität Ulm&lt;/li&gt;
&lt;li&gt;Steve Harris, Garlik Ltd&lt;/li&gt;
&lt;li&gt;Sandro Hawke, W3C&lt;/li&gt;
&lt;li&gt;Ivan Herman, W3C&lt;/li&gt;
&lt;li&gt;Nicholas Humfrey, BBC&lt;/li&gt;
&lt;li&gt;Nico Michaelis, Dreamlab Technologies AG&lt;/li&gt;
&lt;li&gt;Chimezie Ogbuji, Invited Expert&lt;/li&gt;
&lt;li&gt;Matthew Perry, Oracle Corporation&lt;/li&gt;
&lt;li&gt;Alexandre Passant, DERI, National University of Ireland, Galway&lt;/li&gt;
&lt;li&gt;Axel Polleres, Siemens AG&lt;/li&gt;
&lt;li&gt;Eric Prud&amp;#39;hommeaux, W3C&lt;/li&gt;
&lt;li&gt;Andy Seaborne, The Apache Software Foundation&lt;/li&gt;
&lt;li&gt;Gregory Todd Williams, Rensselaer Polytechnic Institute&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;11-参考&quot;&gt;11 参考&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;SPARQL-XML-Result&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SPARQL Query Results XML Format (Second Edition), D. Beckett, J. Broekstra, Editors, W3C Recommendation, 21 March 2013, &lt;a href=&quot;http://www.w3.org/TR/2013/REC-rdf-sparql-XMLres-20130321&quot;&gt;http://www.w3.org/TR/2013/REC-rdf-sparql-XMLres-20130321&lt;/a&gt;. Latest version available at &lt;a href=&quot;http://www.w3.org/TR/rdf-sparql-XMLres&quot;&gt;http://www.w3.org/TR/rdf-sparql-XMLres&lt;/a&gt;. (See &lt;a href=&quot;http://www.w3.org/TR/rdf-sparql-XMLres/.&quot;&gt;http://www.w3.org/TR/rdf-sparql-XMLres/.&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;RDF-Schema&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RDF Vocabulary Description Language 1.0: RDF Schema , ed. Dan Brickley and R.V. Guha, W3C Recommendation 10 February 2004 (See &lt;a href=&quot;http://www.w3.org/TR/rdf-schema/.&quot;&gt;http://www.w3.org/TR/rdf-schema/.&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;RDF-MT&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RDF Semantics , ed. Pat Hayes, W3C Recommendation 10 February 2004 (See &lt;a href=&quot;http://www.w3.org/TR/rdf-mt/.&quot;&gt;http://www.w3.org/TR/rdf-mt/.&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;OWL2-Overview&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OWL 2 Web Ontology Language Document Overview, W3C OWL Working Group, W3C Recommendation 27 October 2009 (See &lt;a href=&quot;http://www.w3.org/TR/owl2-overview/.&quot;&gt;http://www.w3.org/TR/owl2-overview/.&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;RIF-Overview&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RIF Overview, ed. Michael Kifer and Harold Boley, W3C Working Group Note 22 June 2010 (See &lt;a href=&quot;http://www.w3.org/TR/rif-overview/.&quot;&gt;http://www.w3.org/TR/rif-overview/.&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Turtle&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Turtle - Terse RDF Triple Language, ed Eric Prud&amp;#39;hommeaux and Gavin Carothers, Working Draft 09 August 2011. (See &lt;a href=&quot;http://www.w3.org/TR/turtle/.&quot;&gt;http://www.w3.org/TR/turtle/.&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;SPARQL10-Query&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SPARQL Query Language for RDF, ed. Eric Prud&amp;#39;hommeaux and Andy Seaborne, W3C Recommendation 15 January 2008 (See &lt;a href=&quot;http://www.w3.org/TR/rdf-sparql-query/.&quot;&gt;http://www.w3.org/TR/rdf-sparql-query/.&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>理解 SPARQL</title>
   <link href="http://fooyou.github.io/blog/Understand-SPARQL"/>
   <updated>2014-09-29T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/Understand-SPARQL</id>
   <content type="html">&lt;p&gt;&lt;em&gt;作者：Andrew Matthews&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;简介:&lt;/strong&gt; &lt;em&gt;代表 Web 未来的语义 Web 是一个以知识为中心的模型，除了人类可读的文档和 XML 消息格式之外，它还增加了机器可以理解和处理的数据。SPARQL Protocol and RDF Query Language (SPARQL) 对于语义 Web 就像 SQL 对于关系数据库一样重要。它允许应用程序对分布式 RDF 数据库进行复杂的查询，并得到了互相竞争的多种框架的支持。本教程通过一家虚拟公司的团队跟踪和日志系统演示了它的用法。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;开始之前&quot;&gt;开始之前&lt;/h2&gt;

&lt;p&gt;本教程是为那些拥有很少或者没有语义 Web 应用程序开发经验的开发人员编写的。不需要任何编程或者开发工具，但是需要对 Web 基础有所了解。阅读完本教程后将能够使用 Turtle 语言生成 RDF 和 OWL 本体（ontology）。还会学到如何使用 Jena 和 Joseki 支持本体，以及使用 SPARQL 进行查询。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;常用缩写词&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;缩写词&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;API&lt;/td&gt;
&lt;td&gt;应用程序编程接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DOM&lt;/td&gt;
&lt;td&gt;文档对象模型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FTP&lt;/td&gt;
&lt;td&gt;文件传输协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td&gt;超文本传输协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTML&lt;/td&gt;
&lt;td&gt;超文本标记语言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OWL&lt;/td&gt;
&lt;td&gt;Web 本体语言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RDF&lt;/td&gt;
&lt;td&gt;资源描述框架&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URI&lt;/td&gt;
&lt;td&gt;统一资源标识符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URL&lt;/td&gt;
&lt;td&gt;统一资源定位符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W3C&lt;/td&gt;
&lt;td&gt;万维网联盟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XML&lt;/td&gt;
&lt;td&gt;可扩展标记语言&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;关于本教程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本教程介绍了 SPARQL 以及基础数据格式。还涵盖了 RDF、RDF Schema、OWL 以及 Turtle 知识表示语言。通过这些语言可以建立本体 或者域模型。本教程的例子建立了用于日志和预约系统的本体和查询，可以生成带语义标签的类似 twitter 的微型博客。通过查询博客记录可以发现公司中具备您的项目所需技能并且可以组成团队的人员。&lt;/p&gt;

&lt;p&gt;本教程的主要内容如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;介绍语义 Web，包括 RDF、OWL 和 SPARQL&lt;/li&gt;
&lt;li&gt;如何使用 Joseki 建立 RDF Triple Store&lt;/li&gt;
&lt;li&gt;编写日志系统的 SPARQL 查询&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;前提条件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要学习本教程，需要下列工具：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java™ 环境 — Java 运行时环境，用于运行 SPARQL 的服务器 Joseki(fuseki)。&lt;/li&gt;
&lt;li&gt;Joseki — 这是 Hewlett-Packard 提供的开放源代码的 SPARQL 服务器。可从 &lt;a href=&quot;http://www.joseki.org/&quot;&gt;http://www.joseki.org/&lt;/a&gt; 获得。通过该链接找到 SourceForge 下载区。下载最新版本的 Joseki 到机器上并解压到选定的位置。记住解压的位置，需要编写一个简单的批处理文件启动服务器。&lt;/li&gt;
&lt;li&gt;Jena — 语义 Web 框架（作为 Joseki 的一部分提供）。&lt;/li&gt;
&lt;li&gt;任何文本编辑器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Hewlett-Packard Labs 的一个团队从 2003 年开始开发 Joseki。它为 Jena 语义 Web 框架提供了 HTTP 支持层，后者也是由 Hewlett-Packard 开发的。这可能是最流行的语义 Web 平台，它的一位开发者也是 SPARQL 标准的编辑，因此基本上和标准同步，有时候也作为新想法的实验台。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;语义网&quot;&gt;语义网&lt;/h2&gt;

&lt;p&gt;这一节将定义语义 Web，说明 RDF 和 OWL 是什么，它们是如何工作的，以及如何使用它们为语义 Web 应用程序建立域模型。&lt;/p&gt;

&lt;h3 id=&quot;sparql的历史&quot;&gt;SPARQL的历史&lt;/h3&gt;

&lt;p&gt;SPARQL 建立在多项关键技术的基础之上，就像 HTTP 和 HTML（万维网的基础）依赖于 TCP/IP 这样的更深和更低层系统一样。在介绍 SPARQL 之前首先看看一些重要的标准，它们为什么存在，对于语义 Web 开发人员来说意味着什么。&lt;/p&gt;

&lt;p&gt;1997 年，Tim Berners-Lee 指出 HTML 和万维网存在着局限性。其设计的目标不是动态 Web 应用程序，更不用说现在的复杂分布式系统了。HTML 和 HTTP 仅仅是迈向更远大的目标 —— 机器与机器之间的半自动通信 —— 的（重要的）一步，对于我们来说就像只有 FTP 时的 WWW 一样。实现这个目标的基础是 RDF（资源描述框架）。&lt;/p&gt;

&lt;p&gt;RDF 可以描述任何事物，包括它自身，因此可以从很小的一层开始逐渐丰富。这种薄层方法用于建立词汇栈。图 1 显示了 W3C 定义的层。目前，RDF 之上的层包括 RDFS 和 OWL（有人认为将来的工作是在 OWL 上进行构建）。RDFS 即 RDF Schema 语言，它为 RDF 添加类和属性。OWL（Web 本体语言）扩展 RDFS，提供了一种更丰富的语言来定义类之间的关系。更丰富的语言允许使用自动化的推理引擎创建更智能的系统。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图1：语义 Web：W3C Web 体系结构的技术组合&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/meshinestar/notes/master/Semantic_Web/img/fig01.gif&quot; alt=&quot;语义 Web：W3C Web 体系结构的技术组合&quot;&gt;&lt;/p&gt;

&lt;p&gt;下一节将介绍如何构造 RDF，以及如何使用 RDF 构建世界模型。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;rdf&quot;&gt;RDF&lt;/h3&gt;

&lt;p&gt;RDF 曾经被称为 “元描述语言”，但这种有趣的提法不过是说它用于描述事物。它描述事物的方式和人类一样，比如 “乌鸦吃玉米” 或 “Joni 爱 Chachi” 之类的句子。每个句子都有主语（乌鸦，Joni）、谓语（吃，爱）和宾语（玉米，Chachi）。在 RDF 中这种主谓宾结构称为三元组。RDF 使用三元组描述任何事物。&lt;/p&gt;

&lt;p&gt;直观地表达这类三元组的一种方式是 RDF 图，它是 RDF 语句的一个集合。图用节点和弧线定义。 RDF 中的节点表示资源，弧线则是谓语 — 即关于主语和宾语节点之间的关系的陈述。RDF 规范的核心就是定义图，其他（如序列化格式等等）都是次要的。主语和宾语成分定义了图中的节点（也称为资源，因为它们是 URI 的目标）。每个谓语定义了三元组引用的两个节点之间的关系。&lt;/p&gt;

&lt;p&gt;为了能够从 Web 上的其他位置访问图，需要将 RDF 文件保存到三元组库 — 即存储组成图的三元组的地方。将 RDF 图存储到三元组库并公开到 Web 上之后，其他人就可使用 SPARQL 查询了（如图 2 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图2：RDF 图的直观表示，包含 Subject 和 Object 之间的一个谓语关系陈述&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/meshinestar/notes/master/Semantic_Web/img/fig02.gif&quot; alt=&quot;RDF 图的直观表示，包含 Subject 和 Object 之间的一个谓语关系陈述&quot;&gt;&lt;/p&gt;

&lt;p&gt;RDF 中的每个节点和谓语都用 URI 标识。RDF 也允许不使用 URI 标识的节点，称为空白节点（Blank Node）或空白节点标识符（Blank Node Identifier），作为用于本地引用的临时的、内部可见的标识符。RDF 规范指出，虽然提供了将 RDF 序列化为 XML 的一个标准，但是允许使用任何等价的结构。下面的 RDF XML 描述关于作者的一个三元组（如清单 1 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单1：描述作者的三元组的 RDF XML&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; 
&amp;lt;rdf:RDF xmlns:rdf=&amp;quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;quot; xmlns:mu=&amp;quot;http://aabs.purl.org/music#&amp;quot;&amp;gt; 
      &amp;lt;rdf:Description rdf:about=&amp;quot;http://aabs.purl.org/music#andrew&amp;quot;&amp;gt; 
            &amp;lt;mu:playsInstrument&amp;gt;
                 &amp;lt;rdf:Description rdf:about=&amp;quot;http://aabs.purl.org/music#guitar&amp;quot;/&amp;gt; 
           &amp;lt;/mu:playsInstrument&amp;gt; 
      &amp;lt;/rdf:Description&amp;gt; 
&amp;lt;/rdf:RDF&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它说明的是 “Andrew 弹吉他”，或者更精确地说 “称为 Andrew 的某人弹奏称为吉他的乐器”。必须承认，传递这么少的信息，上述的 XML 太长了。下面是 Turtle 语言的描述，该语言也是由 W3C 掌控的（如清单 2 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 2. 和清单 1 相同的 RDF，使用 Turtle 描述&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@prefix : &amp;lt;http://aabs.purl.org/music#&amp;gt; .
:andrew :playsInstrument :guitar .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好多了！这些语句的信噪比高得多，仅此一点就值得使用了。W3C 希望把 Turtle 作为人类可读和可写的 RDF 语言。SPARQL 使用 Turtle，因此后面所有的例子都将使用它。一个三元组的后面用句点（.）作为分隔符，因此空格无关紧要（如图 3 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图 3. 用一条语句声明‘Andrew’ 和 ‘guitar’ 通过 ‘playsInstrument’ 关系相关联&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/meshinestar/notes/master/Semantic_Web/img/fig03.gif&quot; alt=&quot;用一条语句声明‘Andrew’ 和 ‘guitar’ 通过 ‘playsInstrument’ 关系相关联&quot;&gt;&lt;/p&gt;

&lt;p&gt;除了用于在 RDF 文件中嵌入 XML 的 XML Literal 类型外，RDF 没有内置类型。可以使用 XML Schema 定义的以及那些最常用的数据类型。&lt;/p&gt;

&lt;p&gt;在 Turtle 中，文字的数据类型添加在数据后面，如清单 3 所示。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 3. 在 RDF 中使用 XML Schema 数据类型&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@prefix xsdt: &amp;lt;http://www.w3.org/2001/XMLSchema#&amp;gt;.
@prefix mu: &amp;lt;http://aabs.purl.org/music#&amp;gt;.
:andrew :boughtInstrument &amp;quot;1987-06-13T10:30:00&amp;quot;^^xsdt:dateTime .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;^^ 将数据类型声明（xsdt:dataType）附加到数据的字符串表示（&amp;quot;1987-06-13T10:30:00&amp;quot; 部分）上面。因此它说明的是 “Andrew bought the guitar on 13th June 1987 at ten thirty”。这一规则的例外是，不需要其类型的相关线索就能够明确解析的类型。因此像 5 这样没有任何说明的数字显然是一个整数。类似的，像 Andrew 这样没有任何说明的字符串也只能是一个字符串。布尔类型和小数类型也适用于这种情况。整数、布尔值和小数可以直接给出数字而不需要引号。语句 :guitar :timesRestrung 500 使用了整数。&lt;/p&gt;

&lt;p&gt;字符串可以用引号引起来（按照 Tim Berners-Lee 目前最青睐的语言 Python 的一般规则），比如 :guitar :makersModel &amp;quot;GL350&amp;quot; 或者清单 4。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 4. 使用 Python 风格的三元组用引号引起多行&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;:guitar :makersModel &amp;quot;&amp;quot;&amp;quot;GL350 some more text on a new line (provided you use triple quotes)&amp;quot;&amp;quot;&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图 4 显示了清单 2、3 和 4 对应的 RDF 图。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图 4. 关于 Andrew 和他的吉他的语句&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/meshinestar/notes/master/Semantic_Web/img/fig04.gif&quot; alt=&quot;图 4. 关于 Andrew 和他的吉他的语句&quot;&gt;&lt;/p&gt;

&lt;p&gt;RDF 没有定义标准数据结构。和一般的编程语言一样，语言设计者使用简单的结构进行扩展。RDF 提供了 ‘包’、‘序列’ 和 ‘替换列表’。这些结构通过三元组实现，暂时先不要管。如果想进一步研究，请阅读 RDF Primer（链接见 参考资料）。Turtle 为这些数据结构提供了原生的语法支持。列表的声明为：:andrew :child (:emily :thomas)。&lt;/p&gt;

&lt;p&gt;它相当于清单 5。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 5. 使用列表将一个主语和谓语用于多个宾语&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;:andrew :child :emily . :andrew :child :thomas .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可在三元组的主语中使用列表：(:thomas :emily) :parent :andrew .。&lt;/p&gt;

&lt;p&gt;要在 RDF 中声明没有 URI 的资源，可以使用空白节点标识符 _ 本地引用的临时名称。清单 6 显示了 JournalEntries 本体的一个例子：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 6. 使用谓语-宾语列表描述单个主语的多条语句&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;_:JohnConnor a u:User;
  u:domainLogin &amp;quot;someDomain/john.connor&amp;quot;;
  u:displayName &amp;quot;John Connor&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;_:JohnConnor 是一个空白节点（用前导下划线表示），可在本地引用。您可能希望通过这种方式编写 RDF，而不使用 “:JohnConnor”（外部可见的），因为域登录和将资源绑定到了 LDAP（轻型目录访问协议），这可能是您的本地资源。两种选择都可以。&lt;/p&gt;

&lt;p&gt;另一种空白节点语法使用 “[]” 表示您不愿提供本地名称的资源。仅用于当前的三元组或者谓语-宾语列表（如清单 7 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 7. 使用空白节点语法和谓语-宾语列表建立没有标识符的完整主语&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[] a j:JournalEntry;
  j:date &amp;quot;20080205T09:00:00&amp;quot;^^xsdt:dateTime;
  j:user _:JohnConnor;
  j:notes &amp;quot;&amp;quot;&amp;quot;Today I learnt how to defraud ATM machines and how to field strip a machine gun blindfolded.&amp;quot;&amp;quot;&amp;quot;;
  j:tag &amp;quot;armaments&amp;quot;;
  j:tag &amp;quot;cash&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有名称，或者不希望用毫无意义的标识符污染应用程序名称空间，则可以采用这种形式。毕竟，使用 SPARQL，可以根据相关的数据而不仅仅是 URI 来查询资源。使用空白节点的时候，三元组库将独立地定位空白节点标识符。这种形式适用于一次性的资源，因为在资源定义后面的句点之后就无法直接链接一次性资源了。&lt;/p&gt;

&lt;p&gt;从上面两个例子可以看到，可用分号让多个三元组共享一个主语。这称为谓语-宾语列表，经常要用到，因为它允许合并关于同一主语的多个语句。事实上，如果没有谓语-宾语列表这种表示法，上面的空白节点表示法就毫无用处。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;rdfs-和-owl&quot;&gt;RDFS 和 OWL&lt;/h3&gt;

&lt;p&gt;RDF 特意设计来支持用更抽象的词汇表进行分层扩展。扩展的第一种方式是使用 RDF Vocabulary Description Language（RDF 词汇表描述语言），通常被称为 RDF Schema 或 RDFS。RDFS 为 RDF 增加了类、属性和继承的特性，几乎是面向对象设计者完备的工具箱。OWL 在 RDFS 的基础上提供了及其丰富的工具箱来描述类的属性和关系。OWL 提供了大量的属性来准确描述两个类之间关系的特点。OWL 的主要动机是为本体的语义打下坚实的基础，使推理引擎能够对数据进行自由演绎。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;rdf-类和属性&quot;&gt;RDF 类和属性&lt;/h3&gt;

&lt;p&gt;RDFS 定义了一个三元组谓语 rdfs:type，声明资源的类型。允许声明类资源继承自其他类。清单 8 是类型声明的一个例子。&lt;/p&gt;

&lt;p&gt;*清单 8. 使用 rdfs:type 和 rdfs:subClassOf 定义类的层次结构 *&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;:HeavenlyBody rdfs:type rdfs:Class.
:Planet, :Asteroid, :Comet, :Meteor
rdfs:subClassOf :HeavenlyBody.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图 5 定义了一个小型的类层次结构。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图 5. 清单 8 创建的类的层次结构（使用 UML 表示图）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/meshinestar/notes/master/Semantic_Web/img/fig05.gif&quot; alt=&quot;图 5. 清单 8 创建的类的层次结构（使用 UML 表示图）&quot;&gt;&lt;/p&gt;

&lt;p&gt;定义类的实例和类声明非常相似。RDFS 通过 rdfs:subClassOf 谓语表明主语是一个类而不是实例（如清单 9 所示），从而区分类声明三元组和成员。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 9. 使用 rdfs:type 定义类实例&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;:Mercury, :Venus, :Earth, :Mars rdfs:type :Planet.
:Ceres, :Vesta rdfs:type :Asteroid
# ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Turtle 为类型声明提供了方便的简写形式（如清单 10 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 10. 使用 a 作为 rdfs:type 的简写形式&lt;/em&gt;
    :GasGiant rdfs:subClassOf :Planet.
    :Jupiter, :Saturn, :Uranus, :Neptune a :GasGiant.&lt;/p&gt;

&lt;p&gt;a 仅仅是 rdfs:type 的简写形式，没有其他意义。&lt;/p&gt;

&lt;p&gt;RDFS 也提供类的属性。清单 11 说明了属性的声明方法。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 11. 为类 :HeavenlyBody 定义属性&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;:massKg
  rdfs:domain :HeavenlyBody;
  rdfs:range xsdt:double .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里声明的属性 :massKg 从 :HeavenlyBody 映射到一个双精度数。换句话说，它表明所有的天体都能有质量。前面的实例声明可以改写为清单 12。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 12. 在实例中使用属性&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;:Earth a :Planet;
  :massKg &amp;quot;5.9742e24&amp;quot;^^xsdt:double.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RDFS 提供的设施和 OWL 相比非常少。OWL 提供了大量的方法来描述两个类之间的微妙关系。现在没有足够的时间来讨论，仅通过例子了解一下 OWL（如清单 13 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 13. 使用 OWL 更详细地描述属性&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;:hasUsedSkill a owl:ObjectProperty;
  rdfs:domain :User;
  rdfs:range :Skill;
  owl:equivalentProperty :hasSkill;
  owl:inverseProperty :hasBeenUsedBy .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它说明了属性 :hasUsedSkill 和 :User、:Skill 这两类对象有关。它和 :hasSkill 属性相同（表示同一件事）。此外，还断言如果一项技巧被某人 :hasBeenUsedBy，就意味着此人 :hasSkill 和 :hasUsedSkill。换句话说，OWL 允许告诉推理引擎在本体中定义的各种属性之间隐含的等价意义。OWL 非常丰富，不过现在使用 RDFS 就行了，因为本教程没有涉及推理引擎的使用。&lt;/p&gt;

&lt;p&gt;还有一个主题本文不打算讨论，即由来已久的关于面向对象和数据建模哪种方法更好的争论。目前来看显然面向对象将统治应用程序开发世界，因此能否方便地建立本体和对象域之间的映射至关重要。&lt;strong&gt;LinqToRdf 之类的系统&lt;/strong&gt;表明建立这样的映射是可能的，面临的真正问题是纳入 OWL 本体的信息太多了。这是祸中得福。&lt;/p&gt;

&lt;p&gt;理论讲得够多了。对于 SPARQL 来说，您现在对 RDF 的了解已经够了。上面的简要介绍没有涉及 RDF 之上的层次，也没有讨论已经得到广泛应用的那些本体论，如 &lt;strong&gt;FOAF&lt;/strong&gt;、&lt;strong&gt;SIOC&lt;/strong&gt; 以及 &lt;strong&gt;Dublin Core&lt;/strong&gt;。也没有深入探讨激动人心的&lt;strong&gt;推理引擎&lt;/strong&gt;、&lt;strong&gt;规则标记语言&lt;/strong&gt;或者公式，这些技术都拥有强大的功能，前途无量。也许会在其他教程中分别讨论。现在看看更加实际的问题。需要建立三元组库和 SPARQL 端点。之后就可以开发本体了。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;用-owl-定义本体&quot;&gt;用 OWL 定义本体&lt;/h3&gt;

&lt;p&gt;本教程开发了一个简单的程序，可以定义日志项说明您做了什么。然后开发 SPARQL 查询提出各种问题，看看这家虚构的公司中有谁做了什么。&lt;/p&gt;

&lt;p&gt;前面曾经提到这些日志条目是一个类似 twitter 的微型博客。需要知道，本教程中所有这些例子都是为了引出后面的解释。日志系统需要 UI 来显示记录的内容。这里不再介绍，因为大多数开发人员都对这方面非常熟悉，而且 developerWorks 很多教程都有详细的介绍（链接参见 参考资料）。&lt;/p&gt;

&lt;p&gt;本体定义后面将创建的数据的格式。这个本体论定义了带属性的类。微型博客上的记录将采用符合该本体格式的 Turtle 片段来编写。一旦数据存储到三元组库中，就可以使用 SPARQL 查询。SPARQL 查询返回的结果采用 XML 格式，封装了和查询匹配的变量。很容易提取 XML 信息并显示在 Web 上。&lt;/p&gt;

&lt;p&gt;首先定义日志的本体（如清单 14 所示）。实际上非常简单 — 只有两个类。这定义分别称为 JournalEntry 和 User 的两个类。每个User 可以定义任意数量的日志项，每个日志项可以包含日期、对用户的引用和一组标签。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 14. 小而完整的日志系统本体&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@prefix log: &amp;lt;http://www.w3.org/2000/10/swap/log#&amp;gt; . 
@prefix string: &amp;lt;http://www.w3.org/2000/10/swap/string#&amp;gt;. 
@prefix os: &amp;lt;http://www.w3.org/2000/10/swap/os#&amp;gt;. 
@prefix owl: &amp;lt;http://www.w3.org/2002/07/owl#&amp;gt; . 
@prefix j: &amp;lt;Journal.n3#&amp;gt;. 
@prefix : &amp;lt;#&amp;gt;. 

#JournalEntry class
:JournalEntry a owl:Class . 
:date
  rdfs:domain :JournalEntry;
  rdfs:range xsdt:datetime;
  owl:cardinality 1. 
:user
  rdfs:domain :JournalEntry;
  rdfs:range :User;
  owl:cardinality 1. 
:notes
  rdfs:domain :JournalEntry;
  rdfs:range xsdt:string;
  owl:cardinality 1. 
:tag
  rdfs:domain :JournalEntry;
  rdfs:range xsdt:string .

#User class
:User a owl:class . 
:domainLogin
  rdfs:domain :User;
  rdfs:range :xsdt:string;
  owl:cardinality 1. 
:displayName
  rdfs:domain :User;
  rdfs:range xsdt:string;
  owl:maxCardinality 1 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面在 JournalEntries.n3 文件中定义几个 JournalEntry 元素。首先应该定义一个 :User 实例（如清单 15 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 15. 描述作者的本体条目&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;_:AndrewMatthews a :User;
:domainLogin &amp;quot;someDomain/andrew.matthews&amp;quot;;
:displayName &amp;quot;Andrew Matthews&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到这个条目符合 Journal.n3 中的定义。有了用户条目之后就可以定义日志条目了（如清单 16 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 16. 使用本体创建匿名日志条目&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[] a :JournalEntry; 
:date &amp;quot;20080204&amp;quot;^^xsdt:datetime; 
:user _:AndrewMatthews; 
:notes &amp;quot;&amp;quot;&amp;quot;Today I wrote some more content for the great new SPARQL tutorial that I&amp;#39;ve been preparing. I used some N3 to do it in, and I defined a simple ontology for defining journal entries. This is an example of one of those entries!&amp;quot;&amp;quot;&amp;quot;; 
:tag &amp;quot;N3&amp;quot;; 
:tag &amp;quot;RDF&amp;quot;; 
:tag &amp;quot;OWL&amp;quot;; 
:tag &amp;quot;tutorial&amp;quot;. 

[] a :JournalEntry; 
:date &amp;quot;20080205&amp;quot;^^xsdt:datetime; 
:user _:AndrewMatthews; 
:notes &amp;quot;&amp;quot;&amp;quot;Today, I wrote some more content for the tutorial I wrote a section that describes how you set up Joseki.&amp;quot;&amp;quot;&amp;quot; 
:tag &amp;quot;N3&amp;quot;; 
:tag &amp;quot;Java&amp;quot;; 
:tag &amp;quot;Joseki&amp;quot;; 
:tag &amp;quot;configuration&amp;quot;; 
:tag &amp;quot;Jena&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一次没有给出条目的名称，而仅仅定义了一个符合 :JournalEntry 类定义的匿名实例。教程的 源代码文件 中包含更多这样的条目，从而查询起来更有趣。&lt;/p&gt;

&lt;p&gt;源代码 中包含支持本体定义的其他日志条目以及需要的有关文件。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;从本教程的开始部分下载该 zip 文件&lt;/li&gt;
&lt;li&gt;将 .bat 文件复制到 Joseki 目录&lt;/li&gt;
&lt;li&gt;将配置文件复制到 Joseki 目录覆盖原来的配置文件 Joseki.ttl。&lt;/li&gt;
&lt;li&gt;将 RunJoseki.bat 文件中的路径改为 Joseki 下载后的目录。&lt;/li&gt;
&lt;li&gt;要启动三元组库和 SPARQL 服务器，只需双击 RunJoseki.bat 批处理文件即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;显示的控制台屏幕最初应该类似于清单 17。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 17. Joseki 启动时生成的典型的清单&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Starting Joseki 
12:19:17 INFO Configuration :: 
==== Configuration ==== 
12:19:17 INFO Configuration :: Loading : &amp;lt;joseki-config.ttl&amp;gt; 
12:19:18 INFO ServiceInitSimple :: Init: Example initializer 
12:19:18 INFO Configuration :: 
==== Datasets ==== 
12:19:18 INFO Configuration :: New dataset: JournalDataset 
12:19:18 INFO Configuration :: Default graph : Journal.n3 
12:19:18 INFO Configuration :: 
==== Services ==== 
12:19:18 INFO Configuration :: Service reference: &amp;quot;sparql&amp;quot; 
12:19:18 INFO Configuration :: Class name: org.joseki.processors.SPARQL 
12:19:18 INFO SPARQL :: SPARQL processor 
12:19:18 INFO SPARQL :: Locking policy: none 
12:19:18 INFO SPARQL :: Dataset description: true // Web loading: true 
12:19:18 INFO Configuration :: Dataset: JournalDataset 
12:19:18 INFO Configuration :: 
==== Bind services to the server ==== 
12:19:18 INFO Configuration :: Service: &amp;lt;sparql&amp;gt; 
12:19:18 INFO Configuration :: 
==== Initialize datasets ==== 
12:19:19 INFO Configuration :: 
==== End Configuration ==== 
12:19:19 INFO Dispatcher :: Loaded data source configuration: joseki-config.ttl 
12:19:19 INFO log :: Logging to org.slf4j.impl.Log4jLoggerAdapter@29d65b via org.mortbay.log.Slf4jLog 
12:19:19 INFO log :: jetty-6.1.4 
12:19:19 INFO log :: NO JSP Support for /, did not find org.apache.jasper.servlet.JspServlet 
12:19:19 INFO log :: Started SocketConnector@0.0.0.0:2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在可以进行 SPARQL 查询了。Joseki 自带的 Web 服务器提供了 SPARQL 查询表单。表单的位置是 &lt;a href=&quot;http://localhost:2020/sparql.html%E3%80%82%E8%BF%90%E8%A1%8C&quot;&gt;http://localhost:2020/sparql.html。运行&lt;/a&gt; Joseki 之后单击该链接即可打开 SPARQL 查询表单（如图 6 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图 6. 在 Joseki 上尝试查询的 SPARQLer 网页&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/meshinestar/notes/master/Semantic_Web/img/fig06.jpg&quot; alt=&quot;在 Joseki 上尝试查询的 SPARQLer 网页&quot;&gt;&lt;/p&gt;

&lt;p&gt;Joseki 是接收和响应 SPARQL 查询的 HTTP 端点。它以 Jena Semantic Web 框架为基础，后者提供了三元组库功能。Joseki 还提供了简单的 Java servlet 引擎作为 Web 端点。并利用它呈现 Web 查询表单，允许手动执行查询。真正的产品中不会使用该查询表单。将会使用 SPARQL API（Jena 框架就提供了这样的 API）通过编程来表示查询。实际上没有 Web 也能使用 SPARQL 。如果有本地三元组库，可直接使用 SPARQL 对其进行访问。SPARQL 协议定义了在 Web 上如何通信。&lt;/p&gt;

&lt;h3 id=&quot;sparql-实践&quot;&gt;SPARQL 实践&lt;/h3&gt;

&lt;p&gt;我们讨论了 RDF、OWL、Turtle 以及下载安装 Joseki SPARQL 服务器的过程。现在看看如何使用 SPARQL。我们将使用 SPARQLer 查询页生成和测试查询。查询开发中最好使用 Firefox，因为在 SPARQLer 查询和结果页面之间来回切换的时候它能够保留查询。从现在开始，开发的查询都和我们的示例应用程序有关。我们将创建查询从示例日志中提取数据片段。&lt;/p&gt;

&lt;p&gt;SPARQL 允许从 RDF 数据库（或者三元组库）中查询三元组。表面上看和从关系数据库中提取数据的结构化查询语言（SQL）非常类似。对于那些熟悉数据库的人来说这种相似性没有多少帮助，因为三元组库和关系数据库是完全不同的东西。关系数据库以表为基础，数据都存储在固定的表中，通过外键定义表行之间的关系。三元组库只存储三元组，描述事物的时候可以使用任意数量的三元组。使用关系数据库会受到数据库布局的限制。&lt;/p&gt;

&lt;p&gt;RDF 没有外键和主键。它使用的是 URI，万维网的标准引用格式。通过 URI，一个三元组库可以直接链接到任何三元组库的其他任何数据。这就是 Web 分布式的强大所在。&lt;/p&gt;

&lt;p&gt;由于三元组库是一个庞大无序的三元组集合，SPARQL 查询通过定义匹配三元组的模板（称为 Graph Pattern）来完成。RDF 和图一节曾经提到，三元组库中的三元组构成了描述一组资源的图。使用 SPARQL 提取三元组库数据需要定义和图中语句相匹配的模式。这将会是类似这样的问题：找出那些描述了 “plays guitar” 的语句的所有主语。清单 18 展示了一个对利用 清单 1 音乐本体定义的数据进行的查询。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 18. 确定 Andrew 所奏乐器的 SPARQL 查询。适用于清单 1 中定义的图&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX : &amp;lt;http://aabs.purl.org/music#&amp;gt;
SELECT ?instrument
WHERE {
  :andrew :playsInstrument ?instrument .
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本教程中也使用 Turtle，因为 SPARQL 使用 Turtle 形式表示查询图模式。该查询说 “找到主语为 :andrew，谓语为 :playsInstrument的所有三元组，获取并返回匹配三元组中的宾语”。当然，SPARQL 不仅能做这些，不过三元组库建立并运行之后马上就可以实现该功能。您也许希望尽快获得效率，而不需要太多理论，但是没有本体就没有三元组库，没有三元组库就无法测试查询。因此首先要定义本体，运行它并进行查询。现在我们定义了本体和有关的实例数据，可以用这些数据配置 Joseki 了。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;为日志数据集配置-joseki&quot;&gt;为日志数据集配置 Joseki&lt;/h3&gt;

&lt;p&gt;本教程采用 Joseki SPARQL 服务器，因为它是免费和开源的，而且是一个非常流行的平台。也可选择其他三元组库和 SPARQL 端点来存放本体和执行查询。&lt;/p&gt;

&lt;p&gt;Joseki 和 Jena 都是用 Java 语言编写的，不过在本教程中不需要编写 Java 代码。只需要正确配置服务器，让它指向您的文件，并告诉构造什么样的图即可。Joseki 配置文件是定义资源的 Turtle 文件，这些资源描述提供的图。描述数据文件，还可以定义推理引擎来处理 RDF 中定义的规则。真正的应用程序中不会使用 SPARQLer 查询页面，而使用 API 通过编程方式向 Joseki 发出查询，并对结果进行解码，以在程序中使用（如图 7 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图 7. 典型的语义 Web 应用程序体系结构&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/meshinestar/notes/master/Semantic_Web/img/fig07.gif&quot; alt=&quot;图 7. 典型的语义 Web 应用程序体系结构&quot;&gt;&lt;/p&gt;

&lt;p&gt;首先定义存放服务数据的服务。称为 “JournalService”。清单 19 显示了服务配置的内容。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 19. 服务配置&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[] rdf:type joseki:Service;
  rdfs:label &amp;quot;SPARQL on the Professional Journal model&amp;quot;;
  joseki:serviceRef &amp;quot;journal&amp;quot;;
  joseki:dataset _:JournalDataset;
  joseki:processor joseki:ProcessorSPARQL_FixedDS .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jena 和 Joseki（本教程中使用的工具）的配置设置都使用 Turtle。总而言之，上述片段定义了类型为 joseki:Service 的一个实体，标签为 “SPARQL on the Professional Journal model”。配置文件中的其他实体通过 joseki:serviceRef “journal” 间接引用它。它存放后面将定义的数据集 _:JournalDataset。&lt;/p&gt;

&lt;p&gt;现在必须定义前面所提到的 _:JournalDataset 数据集。为此，定义一个 ja:RDFDataset 类型的实体，如清单 20 所示。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 20. 数据集配置&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;_:JournalDataset rdf:type ja:RDFDataset;
  ja:defaultGraph _:JournalGraph;
  rdfs:label &amp;quot;JournalDataset&amp;quot;;
  ja:namedGraph [
    ja:graphName &amp;lt;http://aabs.purl.org/ontologies/2007/11/journal&amp;gt;;
    ja:graph _:JournalGraph
 ]; .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段 RDF 定义了由 _:JournalDataset 标识的 RDFDataset，其默认图定义为 _:JournalGraph。它定义了可以访问图中数据的 URI，并提供了数据集内容的默认访问方式。最后还需要定义本体及其数据的图。前面用 _:JournalGraph 指代这个图。清单 21 显示了图的定义。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 21. 图的定义&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;_:JournalGraph rdf:type ja:MemoryModel;
  rdfs:label &amp;quot;JournalGraph&amp;quot;;
  ja:content [ja:externalContent &amp;lt;file:C:/dev/sparqlTutorial/Joseki/Journal.n3&amp;gt;];
  ja:content [ja:externalContent &amp;lt;file:C:/dev/sparqlTutorial/Joseki/JournalEntries.n3&amp;gt;].
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后一个元素定义了一个图 — Giant Global Graph 或 GGG 的一小部分，Tim Burners-Lee 最近尝试用它标记语义 Web。要记住，所有的 RDF 定义的都是图。因此毫不奇怪，三元组库的配置就是发现数据和将其放入图中，或者指定公开这些图的方式。
要记住，下载的 zip 文件解压到哪里，ja:content URI 就应该指向哪里。我们将定义一个内存模型对象 JournalGraph，链接到两个外部磁盘文件 Journal.n3 和 JournalEntries.n3。这就是下面要关注的焦点 — 它们就是定义本体的地方（这是语义 Web 的说法，程序员更愿意称之为对象或者域模型）。&lt;/p&gt;

&lt;h3 id=&quot;用-sparql-编写查询&quot;&gt;用 SPARQL 编写查询&lt;/h3&gt;

&lt;p&gt;上述步骤都是漫长的预备阶段，目标就是为了编写一个查询。我们讨论了很多基础知识，包括 RDF、RDFS、OWL 以及 Turtle，如果手工编写 RDF 的话 Turtle 可能是最好的办法。还介绍了如何结合并保存本体，配置在 Web 上进行发布的 SPARQL 端点。
最后，可以编写团队日志和跟踪系统了。这些查询是为了增强团队沟通，帮助资源管理者在向客户提供建议之前确定合适的人员。需要开发的查询如下。这些查询按照从易到难的顺序排列，逐渐增加 SPARQL 查询的复杂程度。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;按照日期顺序取得所有预约的列表&lt;/li&gt;
&lt;li&gt;通过关键字筛选所有日志条目的注释&lt;/li&gt;
&lt;li&gt;获取给定用户登记的全部技能/技术列表&lt;/li&gt;
&lt;li&gt;获得具备所需特定技能的所有用户的列表&lt;/li&gt;
&lt;li&gt;获得指定日期范围内记录日志的用户列表&lt;/li&gt;
&lt;li&gt;回答关于团队和客户当前状态的问题&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SPARQL 提供了四种不同形式的查询：SELECT、ASK、DESCRIBE 和 CONSTRUCT。我将通过几个查询来说明每种查询类型的不同形式、各种语法技巧、变化形式和查询的用途。这些查询有很多共性。在大多数情况下，我都使用 SELECT 形式来介绍，因为这可能是最常用的查询类型。&lt;/p&gt;

&lt;p&gt;SELECT 查询形式用于标准查询。以标准 SPARQL XML 结果格式返回查询结果。本节中多数查询都要用到 SELECT 查询。ASK 的结果是 yes/no，没有具体内容，后面的 清单 33 将会展示。DESCRIBE 用于提取本体和实例数据的一部分。CONSTRUCT 根据查询图的结果生成 RDF，在 下载 部分的代码中可以找到一些例子。&lt;/p&gt;

&lt;p&gt;为了节约空间，本教程中的例子将只保留前两个结果，除非必须看到全部内容。多数查询返回的结果都多于两个。如果您痛恨那些罗罗嗦嗦的手册和书籍，我和您一样。本教程会尽量避免这种情况。本教程中重复的一个地方是查询的前缀。查询应该能够立即使用，因此它们必须是自成体系的。您可以直接将其拖到查询表单中执行。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;分解查询&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;清单 22 中的查询获取所有的注释并按照时间先后返回。这一节我们看看典型的 SPARQL 查询语法。下一节 将讨论三元组库用于查找和查询匹配的三元组的算法。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 22. 按日期顺序返回注释的查询&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX : &amp;lt;http://aabs.purl.org/ont/journal#&amp;gt;
SELECT ?notes
WHERE {
  ?e a :JournalEntry .
  ?e :notes ?notes .
  ?e :date ?date .
}
ORDER BY ?date
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每个 SPARQL SELECT 查询都包括一组按顺序排列的部分。第一部分是序言，包括可选的 BASE 定义和一些前缀定义。其后的 SELECT 部分以 SELECT 开始，描述搜索哪个图的可选的数据集部分，后面用 WHERE 子句表达描述目标结果的图模式。WHERE 子句之后是一些结果修饰符：Order 子句、Limit 子句或者 Offset 子句。这些修饰符将在后面介绍。&lt;/p&gt;

&lt;p&gt;结果如清单 23 所示。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 23. 清单 22 的查询结果&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;notes &amp;quot;Today I wrote some more content for the great new SPARQL tutorial ... &amp;quot;Today I learnt about insane asylums&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要使返回结果按倒序排列，可通过选择顺序修饰符 ASC()、DESC() 实现。下面的命令可以使结果按相反的顺序出现：ORDER BY DESC(?date)。
如果还想在日期排序中根据其他变量排序，可以在 ORDER BY 子句中添加其他变量：ORDER BY DESC(?date) ASC(?notes)。
如果需要把结果限制到前 5 个，可使用 LIMIT 运算符（如清单 24 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 24. 限制返回的结果数量&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SELECT ?notes
WHERE {
  ?e a :JournalEntry .
  ?e :notes ?notes .
  ?e :date ?date .
}
ORDER BY ?date
LIMIT 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果准备跳过某些结果，可使用 OFFSET 修饰符（如清单 25 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 25. 跳过部分结果&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SELECT ?notes
WHERE {
  ?e a :JournalEntry .
  ?e :notes ?notes .
  ?e :date ?date .
}
ORDER BY ?date
LIMIT 5
OFFSET 150
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果进行过 SQL 开发，应该很熟悉这些修饰符。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;搜索三元组库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用图模式获取结果的过程非常简单。多数三元组库都在内存或者数据库中保存三元组，可按照主语、谓语和宾语查询。SPARQL 在查询图模式中用一组三元组表示。首先假设图模式中只有一个三元组。查询可能提供具体的主语 URI。这样的话，三元组库可以忽略没有该主语的所有三元组。然后再筛选掉与图模式提供 的谓语不匹配的所有三元组。最后，如果 SPARQL 提供了具体的宾语，还可进一步排除不匹配的三元组。&lt;/p&gt;

&lt;p&gt;如果查询的主语、谓语或宾语中使用了变量，则不排除那些不匹配的三元组，三元组库将其全部保留，因为可能和变量匹配。上例中第一个三元组是 ?e a :JournalEntry .。a 是 rdfs:type 的简写，因此三元组库可以忽略所有谓语不是 rdfs:type 的三元组。然后再筛选掉宾语不是 :JournalEntry 的三元组。余下的就是可以作为 ?e 结果的三元组。&lt;/p&gt;

&lt;p&gt;上述查询的图模式包含多个三元组，因此三元组库在完成之前还需要对其他三元组做同样的处理。如果一个变量出现在多个位置，则可以使用所有那些值相同的三元组的交集。上例中所有匹配的三元组必须有一个匹配的主语。如果不符合，则丢弃，结果中只保留剩下的三元组。变量匹配可能有多种方式，所以会有多个结果。三元组库的最后一步是根据结果集需要的变量创建结果集。&lt;/p&gt;

&lt;p&gt;在搜索的最后，三元组库将得到包含 ?e、?notes、?date 的结果集，这些都是查询中定义的变量。如果 SELECT 查询的形式为 “SELECT ?date ?notes”，则不返回 ?e，虽然在查询中很重要。&lt;/p&gt;

&lt;p&gt;上述过程是实际过程的简化形式。有多种方法可以加快这个过程（比如一次进行多项匹配）。完成的任务将是一样的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;按照日期顺序取得所有预约列表&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;清单 22 中的查询可以创建一个简单的微型博客，按照日期顺序显示注释。和 twitter 差不多。这个查询采用相同的形式，按照日期顺序返回所有的预订列表。如果准备组织新的项目团队，这样的查询是必需的，以便筛掉已经预定的雇员。&lt;/p&gt;

&lt;p&gt;在清单 26 中，必须连接多个类的数据：EmployeeBooking、Customer 和 User。SQL 表示连接表的语法非常笨拙。所幸的是 SPARQL 不会这样。它根本就是为这类查询而设计的，因此非常简单。您需要定义一个图匹配模式，定义需要返回的每个类的属性。在三元组世界中，连接的结果是另一个三元组。清单 26 展示了这个查询。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 26. 按日期返回所有的预约信息&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX u: &amp;lt;http://aabs.purl.org/ont/users#&amp;gt;
PREFIX j: &amp;lt;http://aabs.purl.org/ont/journal#&amp;gt;
PREFIX b: &amp;lt;http://aabs.purl.org/ont/avail#&amp;gt;
SELECT ?dn ?custName ?startDate ?endDate
WHERE {
  ?booking a b:EmployeeBooking ;
    b:startDate ?startDate ;
    b:endDate ?endDate ;
    b:employee ?dl ;
    b:with ?cust .
  ?cust a b:Customer ;
    b:name ?custName .
  ?emp a u:User ;
    u:domainLogin ?dl ;
    u:displayName ?dn .
}
ORDER BY ?startDate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先定义了三个名称空间前缀：u、j 和 b，分别用于用户、日志和预约。然后告诉 Joseki 您需要和变量 ?dn、?custName、?startDate 以及 ?endDate 的匹配。?dn 仅仅是 “display name” 的简写形式，也是查询运行后包含的内容。&lt;/p&gt;

&lt;p&gt;在基本的图模式中定义了预约（称为 ?booking）及其起始和结束日期（?startDate 和 ?endDate）。意思是说在 b:EmployeeBooking类型的图中定义了一些实例。只要发现 b:Employeebooking 类型的匹配，就一定有 b:startDate 和 b:endDate 类型的属性。与这些属性匹配的内容可以放在变量 ?startDate 和 ?endDate 中。&lt;/p&gt;

&lt;p&gt;查询结果定义规定必须取得雇员的 u:displayName 和与其联系的客户的 b:name。查询必须定义谁以及这些属性是什么，以便获得正确的匹配。因此定义 ?emp 和 ?cust 实例及其属性。查询只需要将其链接起来，以引入将预约、用户和客户类的实例链接到一起的三元组。EmployeeBooking 的对象属性 b:employee 链接一个特定的用户实例。它的 b:with 属性则链接到 Customer 类。
添加 &amp;#39;b:with ?cust&amp;#39; 三元组（主语仍然是 ?booking），这可以告诉 SPARQL 只需要返回和 ?booking 返回结果匹配的 ?cust（如表 1 所示）。这就是 SPARQL 中的连接。:User 类也是如此。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;表 1. 与 ?booking 匹配的 ?cust 的连接结果&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;dn&lt;/th&gt;
&lt;th&gt;custName&lt;/th&gt;
&lt;th&gt;startDate&lt;/th&gt;
&lt;th&gt;endDate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;Andrew Matthews&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;IBM&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;2008-03-01T09:00:00&amp;quot; ^^xsdt:dateTime&lt;/td&gt;
&lt;td&gt;&amp;quot;2008-03-08T09:00:00&amp;quot; ^^xsdt:dateTime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;John Connor&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;IBM&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;2008-03-01T09:00:00&amp;quot; ^^xsdt:dateTime&lt;/td&gt;
&lt;td&gt;&amp;quot;2008-03-08T09:00:00&amp;quot; ^^xsdt:dateTime&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;连接很简单吧？只需要声明两个类的实例之间存在关系，SPARQL 只返回存在这种关系的匹配。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;获取所有用户（雇员）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个查询和前面的查询非常相似。清单 27 中的查询使用了默认前缀，因为它只处理一个本体中的 URI。因为可以假定该类和对象属性的 URI，因此可以使用分号（:）作为前缀。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 27. 使用默认前缀的查询&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX : &amp;lt;http://aabs.purl.org/ont/users#&amp;gt;
SELECT DISTINCT ?dl ?dn
WHERE {
  ?u a :User ;
    :domainLogin ?dl ;
    :displayName ?dn .
}
ORDER BY ?dn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表 2 显示了 清单 27 中查询的结果。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;表 2. 默认前缀查询的结果&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;dl&lt;/th&gt;
&lt;th&gt;dn&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;someDomain/andrew.matthews&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;Andrew Matthews&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;someDomain/john.connor&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;John Connor&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;someDomain/john.doe&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;John Doe&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;someDomain/sarah.connor&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;Sarah Connor&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;获取通过关键字筛选的所有日志条目的注释&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作为对公司内其他雇员的一项服务，可以按照作者附加到日志条目上的标签进行聚合。从而为 RDF 或者 Java 开发提供专门的流。希望了解和 RDF 有关的工作的用户可以订阅这样的流，从而得到量身定做的提要。&lt;/p&gt;

&lt;p&gt;这个查询很有意思，因为它引入了 FILTER 关键字。允许用表达式来定义匹配变量的属性。该查询假设您只对那些包含关键字 SPARQL 的注释感兴趣。&lt;/p&gt;

&lt;p&gt;清单 28 中的查询仅仅取得所有日志条目的注释部分 — 不想看到大量的文本。这是使用 FILTER 关键字的第一个查询。筛选提供了一种非图形化的方法来定义匹配结果特性。下面的例子使用正则表达式匹配包含单词 SPARQL 的条目。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 28. 检索注释中包含单词 “today” 的所有日志条目&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX : &amp;lt;http://aabs.purl.org/ont/journal#&amp;gt;
SELECT ?notes
WHERE {
  ?e a :JournalEntry .
  ?e :notes ?notes .
  FILTER regex(?notes, &amp;quot;today&amp;quot;)
}
ORDER BY ?date
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该查询使用了默认名称空间前缀分号（:）。该查询仅指一个本体中定义的实体，因此谓语和类型没有歧义。FILTER 表达式使用正则表达式说明需要包含单词 SPARQL 的日志条目。结果有两个，如清单 29 所示。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 29. 结果&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;notes
&amp;quot;Went to work on the SPARQL tutorial today. I seem to have a terminator fixation.&amp;quot;
&amp;quot;Today I wrote some more content for the great new SPARQL tutorial that I&amp;#39;ve been preparing. I used some Turtle, and I defined a simple ontology for defining journal entries. This is an example of one of those entries!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正则表达式是可用的函数和运算符之一。它来自 &lt;strong&gt;XPath&lt;/strong&gt; 和 &lt;strong&gt;XQuery&lt;/strong&gt; 系统。FILTER 表达式支持中缀和前缀运算符以及括号的一般语法，因此清单 30 也是有效的。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 30. 使用 FILTER 限制图匹配的更多例子&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;FILTER (?t = &amp;quot;RDF&amp;quot; || ?t = &amp;quot;OWL&amp;quot; || ?t = &amp;quot;cash&amp;quot;)
FILTER ( (?start &amp;gt; &amp;quot;2008-03-05T09:00:00&amp;quot;^^xsdt:dateTime &amp;amp;&amp;amp; ?start &amp;lt; &amp;quot;2008-03-07T09:00:00&amp;quot;^^xsdt:dateTime)|| (?start &amp;lt; &amp;quot;2008-03-05T09:00:00&amp;quot;^^xsdt:dateTime &amp;amp;&amp;amp; ?end &amp;gt; &amp;quot;2008-03-05T09:00:00&amp;quot;^^xsdt:dateTime) )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运算符、函数的完整列表以及类型匹配请参阅 SPARQL 文档。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获取具备所需技能的所有用户&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果需要组建一个团队（这也是本教程中的例子），需要一份具备将要使用的技术知识的人员清单。要找到这些人，需要提供要寻找的所有技能或技术，看看谁和这些技能匹配。这个查询的意义在于它使用了 UNION 运算符。UNION 可以合并单独查询的结果。可以用它将每种技术的查询结果合并起来。&lt;/p&gt;

&lt;p&gt;这个例子获取编写的日志条目中标记有 RDF、OWL 或 SPARQL 的所有用户的显示名称。UNION 运算符允许合并可替换的图模式的结果。
一般来说，返回结果前必须匹配所有的图模式。但是 UNION 只需要满足任何一个子图模式即可。在清单 31 所示查询中，任何能够匹配 {?e j:tag &amp;quot;RDF&amp;quot;.}、{?e j:tag &amp;quot;OWL&amp;quot;.} 或 {?e j:tag &amp;quot;SPARQL&amp;quot;.} 的结果都是可接受的。它相当于 OR 运算符，后面将看到 || 运算符也能实现同样的效果。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 31. 获取具备匹配技能的用户&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX u: &amp;lt;http://aabs.purl.org/ont/users#&amp;gt;
PREFIX j: &amp;lt;http://aabs.purl.org/ont/journal#&amp;gt;
SELECT DISTINCT ?dn
WHERE {
  ?u a u:User; u:displayName ?dn .
  ?e a j:JournalEntry; j:user ?u .
  { {?e j:tag &amp;quot;RDF&amp;quot;.} UNION {?e j:tag &amp;quot;OWL&amp;quot;.} UNION {?e j:tag &amp;quot;SPARQL&amp;quot;.} }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通常，定义所处理的本体的名称空间以及感兴趣的变量。然后定义希望用户匹配的属性。这里定义了希望连接的两个实例（?u 表示用户，?e 表示日志条目）。为了建立连接，在日志条目中描述 j:user 属性。实例及其之间的关系被定义之后，另一个图模式根据附加到日志条目的标记将匹配项合并到一起（如表 3 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;表 3. 连接日志实例和用户类的实例&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;dn&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;Andrew Matthews&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;John Doe&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;表示该查询的另一种方法是使用 FILTER。&lt;/p&gt;

&lt;p&gt;清单 31 中的简单查询将日志实例和用户类实例连接起来。该查询（清单 32）引入了一个字符串文字作为三元组模式 &amp;lt;?e j:tag &amp;quot;RDF&amp;quot;&amp;gt; 的宾语。它的意思很清楚，但是如果没有读过本教程开始部分关于 RDF 和 RDF 的介绍，现在最好读一读。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 32. 该查询使用 FILTER 实现和清单 31 中的 UNION 同样的结果&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX u: &amp;lt;http://aabs.purl.org/ont/users#&amp;gt;
PREFIX j: &amp;lt;http://aabs.purl.org/ont/journal#&amp;gt;
SELECT DISTINCT ?dn WHERE {
  ?u a u:User; u:displayName ?dn .
  ?e a j:JournalEntry; j:user ?u ; j:tag ?t .
  FILTER (?t = &amp;quot;RDF&amp;quot; || ?t = &amp;quot;OWL&amp;quot; || ?t = &amp;quot;SPARQL&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;筛选器的逻辑意义和前面的基于 UNION 的查询一样，但如果不熟悉多图模式的话可能更容易理解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;给定日期哪位雇员开始为客户服务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很多查询可能需要对数据进行概括，或者得到许多问题（比如 “Do we have someone working at X this week?”）的是或者否的简要答案。SPARQL 可使用 ASK 查询类型解决这类问题。&lt;/p&gt;

&lt;p&gt;清单 33 中的查询是否有人在 3月 18 日开始在 IBM 工作。不需要关心是谁，只想知道有没有。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 33. 询问是否有人在 3 月 18 日开始在 IBM 工作&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PREFIX b: &amp;lt;http://aabs.purl.org/ont/avail#&amp;gt;
PREFIX u: &amp;lt;http://aabs.purl.org/ont/users#&amp;gt;
PREFIX xsdt: &amp;lt;http://www.w3.org/2001/XMLSchema#&amp;gt;

ASK
{
  ?x a u:User;
    u:displayName ?dn;
    u:domainLogin ?dl.
  ?c a b:Customer;
    b:name &amp;quot;IBM&amp;quot;.
  ?b a b:EmployeeBooking;
    b:with ?c;
    b:employee ?dl;
    b:startDate &amp;quot;2008-03-18T09:00:00&amp;quot;^^xsdt:dateTime.
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ASK 查询只需要返回是否找到了结果，返回结果基本上不需要占用带宽。该查询的格式类似于 SELECT。但是没有定义返回变量，因为不需要返回变量。相反，它返回 true 或者 false 表示查询（如果使用 SELECT）有没有返回数据（如清单 34 所示）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;清单 34. ASK 查询返回 true&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ASK =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面这些查询示例，您应该对 SPARQL 有一定的了解了。本文未进行详细讨论，可以通过 下载 部分的示例代码了解从这个日志示例导出数据的各种方法。&lt;/p&gt;

&lt;h3 id=&quot;结束语&quot;&gt;结束语&lt;/h3&gt;

&lt;p&gt;我们学习了语义 Web 如何使用 RDF、OWL 和 Turtle 工作。您了解了使用 Turtle 手工编写 RDF 的最简方式，以及 SPARQL 如何使用 Turtle。现在您已经具备足够的知识，可以阅读 W3C 和其他团体发布的各种语义 Web 标准。您可以编写自己的本体，对它们进行托管，以及使用 SPARQL 对它们进行查询。语义 Web 的底层技术非常复杂，这里没有全部介绍。但是您现在具备了足够的知识，可以充满自信地去探索了。&lt;/p&gt;

&lt;p&gt;本教程中的查询涉及到了 SPARQL 的很多功能（但不是全部）。它们允许您轻松地连接类，使用复杂的表达式语言筛选结果。动态构造 RDF 以最大化存储数据的价值和互操作性。您编写了不占用带宽的查询，其他查询则提供了可在您的三元组库中定义信息的元数据。也希望您对 SPARQL 强大功能有所了解。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;下载&quot;&gt;下载&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th&gt;大小&lt;/th&gt;
&lt;th&gt;下载方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;示例源代码&lt;/td&gt;
&lt;td&gt;x-sparql.zip&lt;/td&gt;
&lt;td&gt;12KB&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=316306&amp;amp;filename=x-sparql.zip&amp;amp;method=http&amp;amp;locale=zh_CN&quot;&gt;HTTP&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;原文链接已经失效了，可以下载本文图7 gif文件解压即可得到代码&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;学习&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/rdf-primer/&quot;&gt;The RDF Primer from W3C&lt;/a&gt;：这是一个关于使用 RDF 表示知识的重要指南。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/rdf-sparql-query/&quot;&gt;W3C SPARQL 规范&lt;/a&gt;：阅读 SPARQL 查询语言规范。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/2001/sw/&quot;&gt;W3C Turtle 规范&lt;/a&gt;：关于 Turtle 语法和功能的详细说明。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/webarch/&quot;&gt;W3C 语义 Web 门户网站&lt;/a&gt;：了解 W3C 开发的各种与语义 Web 有关的技术。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/webarch/&quot;&gt;W3C Web 体系结构文档&lt;/a&gt;：有关 URI 使用的最佳实践来源。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.semanticfocus.com/blog/entry/title/302-semantic-web-videos-and-podcasts/&quot;&gt;302 Semantic Web Videos&lt;/a&gt;（James Simmons，2008 年 2 月）：数百小时的视频资料，涉及到语义 Web 的最新进展、研究方向和评论。非常值得一看。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Weaving-Web-Tim-Berners-Lee/dp/0752820907&quot;&gt;Weaving the Web&lt;/a&gt;（Tim Berners-Lee，Texere Publishing，2001 年 6 月）：这部引人入胜的著作讨论了 Web 的过去、现在和未来。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.planetrdf.com&quot;&gt;PlanetRDF&lt;/a&gt; ：聚合了和语义 Web 有关的博客文章。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://aabs.wordpress.com/semantic-web/&quot;&gt;The Wandering Glitch&lt;/a&gt;：阅读本文作者 Andrew Matthews 的语义 Web 博客文章。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/xml/library/j-jena/&quot;&gt;Introduction to Jena&lt;/a&gt;（Philip McCarthy，developerWorks，2004 年 6 月）：Jena 使用指南。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/xml/library/j-sparql/&quot;&gt;Search RDF data with SPARQL&lt;/a&gt;（Philip McCarthy，developerWorks，2005 年 5 月）：SPARQL 中级指南。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/xml/library/w-rdf/&quot;&gt;An introduction to RDF&lt;/a&gt;（Uche Ogbuji，developerWorks，2000 年 12 月）：介绍 RDF 基础知识的另一篇文章。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/owl-features/&quot;&gt;W3C 的 OWL 概述&lt;/a&gt;：了解 OWL 用途的最佳地方。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.foaf-project.org/&quot;&gt;FOAF-Project&lt;/a&gt;：了解这种描述人及相互关系的标准 RDF 本体论。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/certify/certs/01001503.shtml&quot;&gt;IBM XML 认证&lt;/a&gt;：了解如何才能成为一名 IBM 认证的 XML 及相关技术的开发人员。 &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/views/xml/library.jsp&quot;&gt;XML 技术库&lt;/a&gt;：developerWorks XML 专区提供了大量技术文章和技巧、教程、标准以及 IBM 红皮书。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/offers/techbriefings/?S_TACT=105AGX06&amp;amp;S_CMP=art&quot;&gt;developerWorks 技术活动和网络广播&lt;/a&gt;：随时关注技术的最新进展。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/xml&quot;&gt;developerWorks XML 专区&lt;/a&gt;：了解 XML。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/podcast/?S_TACT=105AGX06&amp;amp;S_CMP=ART&quot;&gt;developerWorks podcasts&lt;/a&gt;：聆听软件开发人员之间有趣的访谈和讨论。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;获得产品和技术&quot;&gt;获得产品和技术&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.joseki.org/&quot;&gt;Joseki Web 站点&lt;/a&gt;：请访问 Joseki 服务器的主站点。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/downloads/?S_TACT=105AGX06&amp;amp;S_CMP=art&quot;&gt;IBM 试用软件&lt;/a&gt;：使用试用软件开发您的下一个项目，可直接从 developerWorks 下载。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;讨论&quot;&gt;讨论&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/forums/forum.jspa?forumID=1258&quot;&gt;参与论坛讨论&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/forums/dw_xforums.jsp&quot;&gt;XML 讨论论坛&lt;/a&gt;：参与任何关于 XML 的讨论。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/blogs/&quot;&gt;developerWorks XML 专区&lt;/a&gt;：分享您的想法：阅读本文后请把您的建议和想法发表到这个论坛上。XML 专区编辑负责该论坛，欢迎您的参加。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;developerWorks 博客：请访问这些博客并加入 developerWorks 社区。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>vim/vi加密解密文件</title>
   <link href="http://fooyou.github.io/blog/Vim-Encryption-Decryption-file"/>
   <updated>2014-09-19T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/Vim-Encryption-Decryption-file</id>
   <content type="html">&lt;h2 id=&quot;加密&quot;&gt;加密&lt;/h2&gt;

&lt;p&gt;使用vi打开文本，命令行模式输入X（大写 的）⇒ 回车，会提示输入密码，输入两次密码后，保存退出 ⇒ 完成&lt;/p&gt;

&lt;p&gt;下次使用vim打开时输入密码，正常显示和编辑&lt;/p&gt;

&lt;h2 id=&quot;解密&quot;&gt;解密&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;vi打开加密文本，输入正确密码，然后输入下面命令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;:set key=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回车保存即可解密&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vi打开加密文本，输入正确密码，命令行输入:X，什么也不输入，然后保存。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>image 2 pdf和pdf 2 image</title>
   <link href="http://fooyou.github.io/blog/image-2-pdf"/>
   <updated>2014-09-14T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/image-2-pdf</id>
   <content type="html">&lt;p&gt;今天老婆的音乐教学事业有所突破,我当然要支持,所以帮老婆把她师弟发过来的吉他教学内容转成pdf文档,教学内容为100多张图片,很大的图片.&lt;/p&gt;

&lt;p&gt;最开始使用如下命令:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;convert -resize 50%x%50 -quality 80 *.jpg guitar_train.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原图很大,鉴于老婆只在iPad和iPhone上查 看,所以直接把原图切掉一般,并且压缩质量改为原来的80%,看着原来100多兆的图片变成 40多兆的pdf文档,很开心.&lt;/p&gt;

&lt;p&gt;但当我打开发现,顺序乱套了,并没有按照文件名 1~178.jpg进行pdf压制,这不要命了么,忙活那么半天白费了.后到 ImageMagick官网论坛一查,果然不能有序排版,他们给出的方案很扯淡,要把每张图先转成pdf然后通过pdftk合并各个pdf.&lt;/p&gt;

&lt;p&gt;果断抛弃ImageMagick，后使用 gscan2pdf有GUI界面，可改变image顺序，还可英文OCR，很好。最终步骤如下：&lt;/p&gt;

&lt;h2 id=&quot;step-1&quot;&gt;Step 1&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;使用ImageMagick convert命令处理图像，把变小，降低其质量（为节省存储空间）批处理代码保存成adjust.sh:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;for img in `ls *.jpg`
    do
        convert -resize 40% -quality 75 $img out/$img
    done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在图片根目录下运行:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh adjust.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调整后的图片会在out目录下&lt;/p&gt;

&lt;h2 id=&quot;step-2&quot;&gt;Step 2&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;使用gscan2pdf，没有什么好说的，打开⇒ 保存 ⇒ 命名&lt;/p&gt;

&lt;p&gt;想干点小脚本的活，除了python等脚本语言，使 用shell还是有些优势的&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>git tag 导出</title>
   <link href="http://fooyou.github.io/blog/git-tag-output"/>
   <updated>2014-07-22T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/git-tag-output</id>
   <content type="html">&lt;h2 id=&quot;git-tag-操作&quot;&gt;git tag 操作&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看tag列表&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git tag -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切换到tag（假如切换至tag_1.0）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git checkout tag_1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;导出并压缩为zip格式&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git archive --format=zip --output=tag_1.0.zip tag_1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;导出并压缩为tar.bz2格式&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git archive tag_1.0 | bzip2 &amp;gt; tag_1.0.tar.bz2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;导出并压缩为tar.gz格式&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git archive --first_post=tar tag_1.0 | gzip &amp;gt; tag_1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;git-打包当前代码库（all表示所有分支）&quot;&gt;git 打包当前代码库（all表示所有分支）&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git bundle create bundle_filename --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件&lt;code&gt;bundle_filename&lt;/code&gt;可被当做repo进行clone&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Windows下使用LESS和SASS的集成环境</title>
   <link href="http://fooyou.github.io/blog/less-sass-on-windows"/>
   <updated>2014-06-23T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/less-sass-on-windows</id>
   <content type="html">&lt;h2 id=&quot;一：分步安装sass环境&quot;&gt;一：分步安装SASS环境&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;安装SASS和compass的方法：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装Ruby，Windows下使用rubyinstaller-2.0.0-p353-x64.exe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装sass&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gem install sass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果命令行不好用，就手动安装：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gem install --local &amp;lt;path/sass-3.2.12.gem&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装compass：
a. 安装fssm：gem install --local &lt;path/fssm-0.2.10.gem&gt;
b. 安装chunky_png：gem install --local &lt;path/chunky_png-1.2.9.gem&gt;
c. 安装compass：gem install --local &lt;path/ compass-0.12.2.gem&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;二：集成环境&quot;&gt;二：集成环境&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;LESS：使用Crunch App，Crunch运行在Adobe air平台上，所以要先安装Adobe AIR。Crunch可以把分离的LESS文件合成一个CSS文件供Web APP使用，好处多多。&lt;/p&gt;

&lt;p&gt;a. 下载并安装Air：&lt;a href=&quot;http://get.adobe.com/cn/air/&quot;&gt;http://get.adobe.com/cn/air/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;b. 下载Crunch.air，并安装：&lt;a href=&quot;http://crunchapp.net/&quot;&gt;http://crunchapp.net/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SASS：直接安装Prepros，所有的都集成在了里面，安装后直接使用，创建compass工程，使用sprite把icon全压缩在一张图上，并生成相应CSS文件。&lt;/p&gt;

&lt;p&gt;a. 下载并安装：&lt;a href=&quot;http://alphapixels.com/prepros&quot;&gt;http://alphapixels.com/prepros&lt;/a&gt; 第一步所有的东西都在这个App里了，东西很简单，看一个Demo就会。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://compass-style.org/&quot;&gt;http://compass-style.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sass-lang.com/&quot;&gt;http://sass-lang.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/11/compass.html&quot;&gt;http://www.ruanyifeng.com/blog/2012/11/compass.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://phpconf.hinablue.me/&quot;&gt;http://phpconf.hinablue.me/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sass.hinablue.me/#slide1&quot;&gt;http://sass.hinablue.me/#slide1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>将文件隐藏在图片中的方法（linux/windows）</title>
   <link href="http://fooyou.github.io/blog/hide-file-into-image"/>
   <updated>2014-06-20T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/hide-file-into-image</id>
   <content type="html">&lt;h2 id=&quot;linux&quot;&gt;linux&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;如下步骤隐藏：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将图片1.jpg和file文件单独存放到一文件夹下，比如/tmp/temp&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctrl + alt + t调出terminal：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd /tmp/temp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行如下命令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cat 1.jpg file &amp;gt;&amp;gt; img.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如此找回文件：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    unzip img.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;如下步骤隐藏：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将图片1.jpg和file文件单独存放到一文件夹下，比如c:\temp&lt;/li&gt;
&lt;li&gt;Win + R -&amp;gt; 输入cmd -&amp;gt; cd c:\temp&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行如下命令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;copy /b img.jpg + 1.jpg file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意：&lt;/strong&gt;图片一定要在file文件前面&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如此找回文件：&lt;/p&gt;

&lt;p&gt;使用7-zip等压缩软件打开img.jpg即可。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>vim常用快捷键</title>
   <link href="http://fooyou.github.io/blog/vi-shortcut"/>
   <updated>2014-06-18T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/vi-shortcut</id>
   <content type="html">&lt;p&gt;vi有三种模式：Normal、Visual、Edit模式。&lt;/p&gt;

&lt;p&gt;进入Vim后就是Normal模式
Normal  -- v --&amp;gt; Virtual
Normal  -- V --&amp;gt; Virtual line
Normal  -- Ctrl + V --&amp;gt; Virtual block&lt;/p&gt;

&lt;p&gt;Virtual --ESC--&amp;gt; Normal
Normal --i, a, etc --&amp;gt; Edit&lt;/p&gt;

&lt;p&gt;Virtual 模式可进行选中，复制，粘贴操作&lt;/p&gt;

&lt;h3 id=&quot;进入vi的命令&quot;&gt;进入vi的命令&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;vi filename&lt;/td&gt;
&lt;td&gt;打开或新建文件，并将光标置于第一行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vi +n filename&lt;/td&gt;
&lt;td&gt;打开文件，并将光标置于第n行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vi + filename&lt;/td&gt;
&lt;td&gt;打开文件，并将光标置于最后一行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vi +/pattern filename&lt;/td&gt;
&lt;td&gt;打开文件，并将光标置于第一个与pattern匹配的串处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vi -r filename&lt;/td&gt;
&lt;td&gt;在上次正用vi编辑时发生系统崩溃，恢复filename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vi filename....filename&lt;/td&gt;
&lt;td&gt;打开多个文件，依次进行编辑&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;移动光标类命令&quot;&gt;移动光标类命令&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;光标左移一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;光标右移一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;space&lt;/td&gt;
&lt;td&gt;光标右移一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Backspace&lt;/td&gt;
&lt;td&gt;光标左移一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k或Ctrl+p&lt;/td&gt;
&lt;td&gt;光标上移一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;j或Ctrl+n&lt;/td&gt;
&lt;td&gt;光标下移一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;td&gt;光标下移一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w或W&lt;/td&gt;
&lt;td&gt;光标右移一个字至字首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b或B&lt;/td&gt;
&lt;td&gt;光标左移一个字至字首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;e或E&lt;/td&gt;
&lt;td&gt;光标右移一个字至字尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;)&lt;/td&gt;
&lt;td&gt;光标移至句尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&lt;/td&gt;
&lt;td&gt;光标移至句首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;td&gt;光标移至段落开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{&lt;/td&gt;
&lt;td&gt;光标移至段落结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nG&lt;/td&gt;
&lt;td&gt;光标移至第n行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n+&lt;/td&gt;
&lt;td&gt;光标下移n行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n-&lt;/td&gt;
&lt;td&gt;光标上移n行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n$&lt;/td&gt;
&lt;td&gt;光标移至第n行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;光标移至屏幕顶行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;光标移至屏幕中间行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;光标移至屏幕最后行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;（注意是数字零）光标移至当前行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;光标移至当前行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;屏幕翻滚类命令&quot;&gt;屏幕翻滚类命令&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+u&lt;/td&gt;
&lt;td&gt;向文件首翻半屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+d&lt;/td&gt;
&lt;td&gt;向文件尾翻半屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+f&lt;/td&gt;
&lt;td&gt;向文件尾翻一屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl＋b&lt;/td&gt;
&lt;td&gt;向文件首翻一屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nz&lt;/td&gt;
&lt;td&gt;将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;插入&quot;&gt;插入&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;光标前插入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;行首插入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;光标后插入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;行尾插入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;td&gt;当前行之下新开一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;当前行之上新开一行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;替换输入&quot;&gt;替换输入&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;替换当前字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;替换当前字符及其后的字符，直至按ESC键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;从当前光标位置处开始，以输入的文本替代指定数目的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;删除指定数目的行，并以所输入文本代替之&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ncw/nCW&lt;/td&gt;
&lt;td&gt;修改指定数目的字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nCC&lt;/td&gt;
&lt;td&gt;修改指定数目的行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;copy-amp-paste&quot;&gt;Copy &amp;amp; paste&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;yy&lt;/td&gt;
&lt;td&gt;将一行文本移到缺省缓冲区中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yn&lt;/td&gt;
&lt;td&gt;将下一个词移到缺省缓冲区中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ynw&lt;/td&gt;
&lt;td&gt;将后面的n个词移到缺省缓冲区中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;如果缺省缓冲区中包含一行文本，则在当前行后面插入一个空行井将缺省缓冲区中的内容粘贴到这一行中；如果缺省缓冲区中包含多个词，把这些词粘贴到光标的右边&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;如果缺省缓冲区中包含一行文本，则在当前行前面插入一个空行井将缺省缓冲区中的内容粘贴到这一行中；如果缺省缓冲区中包含多个词，把这些词粘贴到光标的左边&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;删除命令&quot;&gt;删除命令&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ndw或ndW&lt;/td&gt;
&lt;td&gt;删除光标处开始及其后的n-1个字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;do&lt;/td&gt;
&lt;td&gt;删至行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d$&lt;/td&gt;
&lt;td&gt;删至行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ndd&lt;/td&gt;
&lt;td&gt;删除当前行及其后n-1行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x或X&lt;/td&gt;
&lt;td&gt;删除一个字符，x删除光标后的，而X删除光标前的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+u&lt;/td&gt;
&lt;td&gt;删除输入方式下所输入的文本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;搜索及替换命令&quot;&gt;搜索及替换命令&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/pattern&lt;/td&gt;
&lt;td&gt;从光标开始处向文件尾搜索pattern&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?pattern&lt;/td&gt;
&lt;td&gt;从光标开始处向文件首搜索pattern&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;在同一方向重复上一次搜索命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;在反方向上重复上一次搜索命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:s/p1/p2/g&lt;/td&gt;
&lt;td&gt;将当前行中所有p1均用p2替代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:n1,n2s/p1/p2/g&lt;/td&gt;
&lt;td&gt;将第n1至n2行中所有p1均用p2替代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:g/p1/s//p2/g&lt;/td&gt;
&lt;td&gt;将文件中所有p1均用p2替换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;选项设置&quot;&gt;选项设置&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;all&lt;/td&gt;
&lt;td&gt;列出所有选项设置情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;term&lt;/td&gt;
&lt;td&gt;设置终端类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ignorance&lt;/td&gt;
&lt;td&gt;在搜索中忽略大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;显示制表位(Ctrl+I)和行尾标志（$)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;显示行号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;report&lt;/td&gt;
&lt;td&gt;显示由面向行的命令修改过的数目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terse&lt;/td&gt;
&lt;td&gt;显示简短的警告信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;warn&lt;/td&gt;
&lt;td&gt;在转到别的文件时若没保存当前文件则显示NO write信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nomagic&lt;/td&gt;
&lt;td&gt;允许在搜索模式中，使用前面不带“\”的特殊字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nowrapscan&lt;/td&gt;
&lt;td&gt;禁止vi在搜索到达文件两端时，又从另一端开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mesg&lt;/td&gt;
&lt;td&gt;允许vi显示其他用户用write写到自己终端上的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;最后行方式命令&quot;&gt;最后行方式命令&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;:n1,n2 co n3&lt;/td&gt;
&lt;td&gt;将n1行到n2行之间的内容拷贝到第n3行下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:n1,n2 m n3&lt;/td&gt;
&lt;td&gt;将n1行到n2行之间的内容移至到第n3行下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:n1,n2 d&lt;/td&gt;
&lt;td&gt;将n1行到n2行之间的内容删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:w&lt;/td&gt;
&lt;td&gt;保存当前文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:e filename&lt;/td&gt;
&lt;td&gt;打开文件filename进行编辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:x&lt;/td&gt;
&lt;td&gt;保存当前文件并退出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:q&lt;/td&gt;
&lt;td&gt;退出vi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:q!&lt;/td&gt;
&lt;td&gt;不保存文件并退出vi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:!command&lt;/td&gt;
&lt;td&gt;执行shell命令command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:n1,n2 w!command&lt;/td&gt;
&lt;td&gt;将文件中n1行至n2行的内容作为command的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为command的输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:r!command&lt;/td&gt;
&lt;td&gt;将命令command的输出结果放到当前行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;寄存器操作&quot;&gt;寄存器操作&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;?nyy&lt;/td&gt;
&lt;td&gt;将当前行及其下n行的内容保存到寄存器？中，其中?为一个字母，n为一个数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;?nyw&lt;/td&gt;
&lt;td&gt;将当前行及其下n个字保存到寄存器？中，其中?为一个字母，n为一个数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;?nyl&lt;/td&gt;
&lt;td&gt;将当前行及其下n个字符保存到寄存器？中，其中?为一个字母，n为一个数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;?p&lt;/td&gt;
&lt;td&gt;取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ndd&lt;/td&gt;
&lt;td&gt;将当前行及其下共n行文本删除，并将所删内容放到1号删除寄存器中。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;选中复制粘贴&quot;&gt;选中复制粘贴&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;剪切&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;粘贴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;选中当前行，光标位置至行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;选中当前行，光标位置至行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Ubuntu设置环境变量并立即生效</title>
   <link href="http://fooyou.github.io/blog/Ubuntu-environment-variables"/>
   <updated>2014-06-17T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/Ubuntu-environment-variables</id>
   <content type="html">&lt;p&gt;Linux系统包含两类持久性环境变量：用户环境变量(Session-wide)和系统环境变量(System-wide)。用户环境变量仅仅对当前的用户有效，系统环境变量对所有用户都有效。&lt;/p&gt;

&lt;h2 id=&quot;用户环境变量&quot;&gt;用户环境变量&lt;/h2&gt;

&lt;p&gt;用户环境变量通常被存储在下面的文件中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;~/.profile&lt;/li&gt;
&lt;li&gt;~/.pam_environment&lt;/li&gt;
&lt;li&gt;~/.bash_profile 或者 ~/.bash_login&lt;/li&gt;
&lt;li&gt;~/.bashrc&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;系统环境变量&quot;&gt;系统环境变量&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;/etc/environment&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt;这不是个脚本文件，其不支持变量扩展，也不需要使用赋值表达式（无需使用export）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;JAVA_HOME=/opt/java/jdk1.8.0_20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/etc/profile&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这个文件通常被认为是设置系统级环境变量的文件，但是这是基础文件包的配置文件，不建议直接修改这个文件，而是在/etc/profile.d目录下添加自定义配置文件.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/etc/profile.d/*.sh&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;查看/etc/profile的代码可以发现，其中有对/etc/profile.d/*.sh读取并设置的代码。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;所以比如要配置JAVA的环境变量，那么ubuntu上最好的做法应该如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在/etc/profile.d下新建文件java_var.sh&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vi /etc/profile.d/java_var.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加入JAVA_HOME、JRE_HOME和PATH到java_var.sh&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export JAVA_HOME=/opt/java/jdk1.8.0_20
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=$CLASSPATH:.:$JAVA_HOME/lib:$JRE_HOME/lib
export PATH=$PATH:$JAVA_HOME/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使配置生效&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看是否设置成功。（使用echo或printenv命令）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;echo $JAVA_HOME
printenv JAVA_HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样设置，各个环境变量之间，只需维护自己的文件，相互之间的影响较低，方便维护。&lt;/p&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://help.ubuntu.com/community/EnvironmentVariables#Persistent_environment_variables&quot;&gt;https://help.ubuntu.com/community/EnvironmentVariables#Persistent_environment_variables&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>python使用pdb调试</title>
   <link href="http://fooyou.github.io/blog/pdb-debug-python"/>
   <updated>2014-05-13T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/pdb-debug-python</id>
   <content type="html">&lt;p&gt;根据设计编写代码后需要对一些代码进行调试，可以通过log信息检查代码是否按照设计执行，有时发现代码工作异常但看log又不能提供更多信息时，就需要对代码进行调试以获得更详细的出错信息来帮助修正代码。&lt;/p&gt;

&lt;p&gt;python提供了原生的pdb来对代码进行调试还是比较方便的，但像远程调试，多线程之类的pdb是搞不定的。&lt;/p&gt;

&lt;p&gt;pdb调试方法有以下几种：&lt;/p&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;命令行启动目标，加上&lt;code&gt;-m&lt;/code&gt;参数，这是我最常用的调试方式。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;python -m pdb test.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行后，断点会出现在程序的第一行&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在python的交互环境启用&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pdb&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mymodule&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mymodule.test()&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;硬编码调试&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pdb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行脚本，到pdb.set_trace()那会中断。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;常用调试命令：&lt;/p&gt;

&lt;hr&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;h(elp)&lt;/td&gt;
&lt;td&gt;打印当前pdb可用命令。可用&lt;code&gt;h [command]&lt;/code&gt;查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l(ist)&lt;/td&gt;
&lt;td&gt;列出当前运行的代码块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b(reak)&lt;/td&gt;
&lt;td&gt;b [n] 在第n行设置断点， b [func] 在某函数入口设置断点，只输入&lt;code&gt;b&lt;/code&gt;会列出所有断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cl(ear)&lt;/td&gt;
&lt;td&gt;cl [n] 清除第n行断点，cl [func], cl 同 b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enbale&lt;/td&gt;
&lt;td&gt;激活断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;disable&lt;/td&gt;
&lt;td&gt;禁用断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n(ext)&lt;/td&gt;
&lt;td&gt;单步出调试 Step out，相当于VS的F10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s(tep)&lt;/td&gt;
&lt;td&gt;单步进调试 Step into，相当于VS的F11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c(ont(inue))&lt;/td&gt;
&lt;td&gt;继续执行，直至遇到断点，相当于VS F5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;j(ump)&lt;/td&gt;
&lt;td&gt;跳转到某行 j [n]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a(rgs)&lt;/td&gt;
&lt;td&gt;打印当前函数参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p(arameter)&lt;/td&gt;
&lt;td&gt;打印变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;感叹号后跟语句，可直接改变某个变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;q(uit)&lt;/td&gt;
&lt;td&gt;退出调试&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;condition&lt;/td&gt;
&lt;td&gt;条件断点 condition [n] 条件表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bt/w&lt;/td&gt;
&lt;td&gt;查看调用堆栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;执行到函数返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;移到当前堆栈帧的下一帧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;td&gt;移到当前堆栈帧的上一帧&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;艾玛，熟悉了python的调试环境后发现python调试和C差不多吗。不错不错，^_^&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git通过代理访问Github</title>
   <link href="http://fooyou.github.io/blog/use-github-with-proxy"/>
   <updated>2013-06-12T00:00:00+08:00</updated>
   <id>http://fooyou.github.io/blog/use-github-with-proxy</id>
   <content type="html">&lt;p&gt;网络代理下，用git直接与github仓库对接，就是不好用，因为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;解决方法：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ssh协议代理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前提准备：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;配置.ssh/config:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ vi ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写下如下配置项：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Host github.com
Hostname ssh.github.com
Port 443
ProxyCommand ~/.ssh/ssh-https-tunnel %h %p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载ssh-https-tunel，可从&lt;a href=&quot;http://zwitterion.org/software/ssh-https-tunnel/ssh-https-tunnel%E4%B8%8B%E8%BD%BD%EF%BC%8C%E4%BF%9D%E5%AD%98%E5%88%B0%7E/.ssh%E4%B8%8B%EF%BC%8C%E6%B7%BB%E5%8A%A0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%9D%83%E9%99%90%E3%80%82&quot;&gt;http://zwitterion.org/software/ssh-https-tunnel/ssh-https-tunnel下载，保存到~/.ssh下，添加可执行权限。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改host，port，user，pass：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Proxy details
my $host = &amp;quot;proxy.xxx.com&amp;quot;;
my $port = 8000;

# Basic Proxy Authentication - leave empty if you don&amp;#39;t need it
my $user = &amp;quot;usr&amp;quot;;
my $pass = &amp;quot;passwd&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;用git 对接你的github仓库吧：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone git@github.com:fooyou/jekyll-bootstrap.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 
</feed>